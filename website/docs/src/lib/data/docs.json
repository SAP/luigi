[{"name":"README.md","shortName":"docs","contents":{"data":{},"messages":[],"history":[],"cwd":"/Users/I529989/Documents/SAP/32-luigi/website/docs","value":"<section class=\"h0Wrapper headingWrapper\">\n<section class=\"h1Wrapper headingWrapper\"><h1 id=\"luigidocumentation\">Luigi Documentation</h1>\n<p>If you are new to Luigi, read the <a href=\"/docs/getting-started\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Getting started guide</a> to learn more about its structure and key features.</p>\n<section class=\"h2Wrapper headingWrapper\"><h2 id=\"luigicore\">Luigi Core</h2>\n<p>Luigi Core enables you to create web applications with an easily configurable and consistent user interface.</p>\n<p><a href=\"/docs/application-setup\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Installation</a> shows you the first steps to prepare your application for development.</p>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"configuration\">Configuration</h3><!-- add-attribute:class:success -->\n<blockquote class=\"success\">\n  <p><strong>TIP:</strong> <a href=\"https://fiddle.luigi-project.io\" rel=\"external\" target=\"_blank\">Luigi Fiddle</a> allows you to configure a very simple application and get a feel for the process.</p>\n</blockquote>\n<p>To configure your Luigi application, simply edit the files in the <code>luigi-config</code> folder of your project. Luigi configuration is divided into several sections, which are outlined in the guides below:</p>\n<ul>\n  <li><a href=\"/docs/navigation-configuration\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Navigation (basic)</a> - configure basic top and side navigation, links, and categories.</li>\n  <li><a href=\"/docs/navigation-advanced\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Navigation (advanced)</a> - create a dynamic path, reuse micro frontends with the same origin, and configure additional navigation elements. </li>\n  <li><a href=\"/docs/navigation-parameters-reference\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Full parameter reference</a> - find all the parameters which you can use to configure Luigi navigation in one place.</li>\n  <li><a href=\"/docs/authorization-configuration\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Authorization</a> - configure login and security features for your application.</li>\n  <li><a href=\"/docs/authorization-events\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Authorization events</a> - define event configuration used to react to Luigi authorization events.</li>\n  <li><a href=\"/docs/general-settings\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">General settings</a> - fully customize a micro frontend, define a header, make your application responsive, and more.</li>\n  <li><a href=\"/docs/lifecycle-hooks\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Lifecycle hooks</a> - execute custom logic on any of the Luigi lifecycle steps.</li>\n</ul>\n<p>The following guides outline Luigi Core API features and additional UI options that exist outside the configuration files:</p>\n<ul>\n  <li><a href=\"/docs/luigi-core-api\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Core API</a> - API features that help you enrich and use Luigi Core.</li>\n  <li><a href=\"/docs/luigi-ux-features\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Luigi UI features</a> - customization options for some of the Luigi UI components.</li>\n</ul>\n</section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"luigiclient\">Luigi Client</h2>\n<p>Luigi Client enables you to connect micro frontends to an already existing Luigi Core application.</p>\n<p><a href=\"/docs/luigi-client-setup\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Installation</a> shows you how to install the Luigi Client.</p>\n<p>Read the Luigi Client API documentation to learn more about the functions and parameters you can use to communicate with the core application:</p>\n<ul>\n  <li><a href=\"/docs/luigi-client-api#lifecycle\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Lifecycle</a> - manage the lifecycle of listeners, navigation nodes, and event data.</li>\n  <li><a href=\"/docs/luigi-client-api#linkmanager\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Link Manager</a> - navigate to a specific route.</li>\n  <li><a href=\"/docs/luigi-client-api#uxmanager\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">UX Manager</a> - manage appearance options such as the behavior of backdrop or loading indicators.</li>\n</ul>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"advanced\">Advanced</h2>\n<p><a href=\"/docs/communication\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Communication</a> describes how to send custom messages between Luigi Core and Client.</p>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"examples\">Examples</h2>\n<p>Check the Luigi <a href=\"https://github.com/SAP/luigi/blob/main/core/examples\" rel=\"external\" target=\"_blank\">application examples</a> for an in-depth look at Luigi capabilities.</p>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"development\">Development</h2>\n<p>Read the <a href=\"https://github.com/SAP/luigi#development\" rel=\"external\" target=\"_blank\">development and code formatting guidelines</a> if you are interested in contributing.</p>\n</section></section></section>"}},{"name":"advanced-options-luigi-client.md","shortName":"advanced-options-luigi-client","contents":{"data":{},"messages":[],"history":[],"cwd":"/Users/I529989/Documents/SAP/32-luigi/website/docs","value":"<section class=\"h0Wrapper headingWrapper\">\n<section class=\"h1Wrapper headingWrapper\"><h1 id=\"advanced-configuration-options\">Advanced configuration options</h1>\n<section class=\"h2Wrapper headingWrapper\"><h2 id=\"disable-luigi-core-browser-history-handling\">Disable Luigi Core browser history handling</h2>\n<p>By default, Luigi Client navigation does not manipulate the browser history. Luigi Core handles the browser history by design. If there is a need to disable the history handling by Luigi Core, you can add an attribute to the <code>head</code>-tag in the <code>index.html</code> of the Luigi Client micro frontend. For example:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html>\n  &#x3C;head disable-luigi-history-handling=\"true\"> &#x3C;/head>\n  &#x3C;body>&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n</div>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"disable-luigi-core-runtime-error-handling\">Disable Luigi Core runtime error handling</h2>\n<p>\n  By default, Luigi Client listens to runtime errors and sends the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent\" rel=\"external\" target=\"_blank\">error event</a> properties to Luigi Core.\n  If a navigation node has configured a property called <a href=\"/docs/navigation-parameters-reference#node-parameters\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">runTimeErrorHandler</a>, you have the possibility to handle errors on the Luigi Core level. For example:\n</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html>\n  &#x3C;head disable-luigi-runtime-error-handling=\"true\"> &#x3C;/head>\n  &#x3C;body>&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n</div>\n</section></section></section>"}},{"name":"advanced-scenarios.md","shortName":"advanced-scenarios","contents":{"data":{},"messages":[],"history":[],"cwd":"/Users/I529989/Documents/SAP/32-luigi/website/docs","value":"<section class=\"h0Wrapper headingWrapper\">\n<section class=\"h1Wrapper headingWrapper\"><h1 id=\"expert-scenarios\">Expert scenarios</h1>\n<p>This is a collection of advanced use cases and example implementations. If you are new to Luigi, take a look at our <a href=\"/docs/getting-started\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Getting Started</a> section first.</p>\n<dl class=\"accordion-container\">\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"authenticate-luigi-with-google-cloud-identity\">Authenticate Luigi with Google Cloud Identity</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <h4 id=\"overview\">Overview</h4>\n      <p>This example shows you how to use Luigi with a Google account.</p>\n      <h4 id=\"steps\">Steps</h4>\n      <ol>\n        <li>Register a project and generate an OAuth2 Web Client based on <a href=\"https://developers.google.com/identity/protocols/OAuth2UserAgent\" rel=\"external\" target=\"_blank\">Google Developers Identity - OAuth2UserAgent</a>.</li>\n        <li>To get your app running locally, set the Authorized JavaScript Origins URIs to <code>http://localhost:[PORT]</code> (replace PORT by the port of your locally running luigi app, e.g. <code>4200</code> for Angular). Then, set Authorized redirect URIs to <code>http://localhost:[PORT]/luigi-core/auth/oauth2/callback.html?storageType=localStorage</code>.</li>\n        <li>Copy the Client ID which ends with <code>apps.googleusercontent.com</code>.</li>\n        <li>Update the LuigiConfig auth section. In this example, we have also provided a configuration for logout and getting user information:</li>\n      </ol>\n      <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n            <img src=\"/images/copy-clipboard-default.svg\">\n            <div class=\"popoverCopy\">Click to copy</div>\n          </div></a>\n        <pre class=\"canCopyCode\"><code class=\"language-javascript\">  {\n    auth: {\n      use: 'oAuth2ImplicitGrant',\n      oAuth2ImplicitGrant: {\n        authorizeUrl: 'https://accounts.google.com/o/oauth2/v2/auth',\n        oAuthData: {\n          response_type: 'id_token token',\n          client_id: 'YOUR_CLIENT_ID...apps.googleusercontent.com',\n          scope: 'openid https://www.googleapis.com/auth/userinfo.email profile',\n        }\n      },\n      logoutFn: async (settings, authData, logoutCallback) => {\n        console.log('revoking token');\n        await fetch(`https://accounts.google.com/o/oauth2/revoke?token=${authData.accessToken}`);\n        logoutCallback('/logout.html');\n      }\n    }\n  }\n</code></pre>\n      </div>\n      <p>\n        Google's <code>id_token</code> contains basic identity data like name and user ID, which allows for this data to be shown in the profile.\n        5. If you would also like to show the user picture, add the following code to enrich the user profile information:\n      </p>\n      <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n            <img src=\"/images/copy-clipboard-default.svg\">\n            <div class=\"popoverCopy\">Click to copy</div>\n          </div></a>\n        <pre class=\"canCopyCode\"><code class=\"language-javascript\">  userInfoFn: async (settings, authData) => {\n    const response = await fetch('https://www.googleapis.com/oauth2/v1/userinfo', {\n      method: 'GET',\n      headers: {\n        'Authorization': 'Bearer ' + authData.accessToken\n      }\n    });\n    const json = await response.json();\n    return json;\n  },\n</code></pre>\n      </div>\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"use-feature-toggles-in-luigi\">Use Feature Toggles in Luigi</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>There are two possibilities to add feature toggles to the active feature toggles list. On the one hand, you can use the Core API and on the other hand, it is possible to add a feature toggle through URL parameters.</p>\n      <h4 id=\"overview-1\">Overview</h4>\n      <p>Luigi allows you to implement and configure feature toggles. They can be used to organize and compartmentalize your code.</p>\n      <h4 id=\"usage\">Usage</h4>\n      <ul>\n        <li>\n          <p>Before using feature toggles, you first have to include the feature toggle query parameter in the <a href=\"/docs/general-settings\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">general settings</a> part of your Luigi configuration file. This allows you to enable setting the feature toggles via URL :</p>\n          <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n                <img src=\"/images/copy-clipboard-default.svg\">\n                <div class=\"popoverCopy\">Click to copy</div>\n              </div></a>\n            <pre class=\"canCopyCode\"><code>featureToggles = { queryStringParam: 'ft' };\n</code></pre>\n          </div>\n        </li>\n        <li>\n          <p>To <strong>set</strong> feature toggles, you have two possibilities:</p>\n          <ol>\n            <li>Set feature toggles to the active feature toggle list through <a href=\"/docs/luigi-core-api#featuretoggles\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Luigi Core API</a>:</li>\n          </ol>\n          <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n                <img src=\"/images/copy-clipboard-default.svg\">\n                <div class=\"popoverCopy\">Click to copy</div>\n              </div></a>\n            <pre class=\"canCopyCode\"><code class=\"language-javascript\">  Luigi.featureToggles().setFeatureToggle('ft1');\n</code></pre>\n          </div>\n          <ol start=\"2\">\n            <li>Set feature toggles to the active feature toggle list via URL parameters by appending a comma-separated list of strings. The parameter name is the predefined <strong>featureToggles.queryStringParam</strong> :</li>\n          </ol>\n          <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n                <img src=\"/images/copy-clipboard-default.svg\">\n                <div class=\"popoverCopy\">Click to copy</div>\n              </div></a>\n            <pre class=\"canCopyCode\"><code>http://localhost:4200/projects/pr1?ft=ft1,ft2\n</code></pre>\n          </div>\n        </li>\n        <li>\n          <p>To <strong>unset</strong> feature toggles, you have to use the Core API:</p>\n          <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n                <img src=\"/images/copy-clipboard-default.svg\">\n                <div class=\"popoverCopy\">Click to copy</div>\n              </div></a>\n            <pre class=\"canCopyCode\"><code class=\"language-javascript\">  Luigi.featureToggles().unsetFeatureToggle('ft1');\n</code></pre>\n          </div>\n        </li>\n        <li>\n          <p>\n            To <strong>restrict node visiblity with feature toggles</strong>:\n            You can define a list of feature toggles for a particular top or left navigation node. For that you can use the <a href=\"/docs/navigation-parameters-reference#visibleForFeatureToggles\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">visibleForFeatureToggles</a> parameter in order to display the node for certain feature toggles.\n            For example, this node will be visible if <code>ft1</code> is added to the active feature toggle list:\n          </p>\n          <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n                <img src=\"/images/copy-clipboard-default.svg\">\n                <div class=\"popoverCopy\">Click to copy</div>\n              </div></a>\n            <pre class=\"canCopyCode\"><code class=\"language-javascript\">{\n    category: { label: 'Feature Toggle: Settings 2', icon: 'action-settings' },\n    pathSegment: 'settings_ft',\n    label: 'Project Settings 2',\n    viewUrl: '/sampleapp.html#/projects/' + projectId + '/settings',\n    icon: 'settings',\n    visibleForFeatureToggles: ['ft1']\n}\n</code></pre>\n          </div>\n          <p>If you define a list of multiple feature toggles, the node will be restricted and it will be shown only if <strong>all</strong> of the specified feature toggles are set.</p>\n          <p>\n            It is also possible to negate the visibility of a node by adding an exclamation mark at the beginning of the feature toggle name.\n            In this example, the node is always visible except if <code>ft1</code> is set as an active feature toggle:\n          </p>\n          <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n                <img src=\"/images/copy-clipboard-default.svg\">\n                <div class=\"popoverCopy\">Click to copy</div>\n              </div></a>\n            <pre class=\"canCopyCode\"><code class=\"language-javascript\">{\n    category: { label: 'Feature Toggle: Settings 2', icon: 'action-settings' },\n    pathSegment: 'settings_ft',\n    label: 'Project Settings 2',\n    viewUrl: '/sampleapp.html#/projects/' + projectId + '/settings',\n    icon: 'settings',\n    visibleForFeatureToggles: ['!ft1']\n}\n</code></pre>\n          </div>\n        </li>\n        <li>\n          <p>\n            To <strong>use feature toggles in a micro frontend</strong>:\n            It is possible to restrict content in a micro frontend using feature toggles. The active feature toggle list is available in the Luigi <a href=\"/docs/luigi-client-api#getActiveFeatureToggles\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Client API</a>.\n          </p>\n          <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n                <img src=\"/images/copy-clipboard-default.svg\">\n                <div class=\"popoverCopy\">Click to copy</div>\n              </div></a>\n            <pre class=\"canCopyCode\"><code class=\"language-javascript\">  if (LuigiClient.getActiveFeatureToggles().includes('ft1')) {\n    //display content\n  }\n</code></pre>\n          </div>\n        </li>\n      </ul>\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"use-intent-based-navigation-in-luigi-client\">Use Intent-Based Navigation in Luigi Client</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <h4 id=\"overview-2\">Overview</h4>\n      <p>Luigi Client allows you to navigate through micro frontends by using an intent-based navigation. This type of navigation decouples navigation triggers from the actual navigation targets. Rather than directly encoding the name of the target app into the URL fragment, app developers provide a navigation intent such as <code>display</code> or <code>edit</code> as shown in the examples below.</p>\n      <h4 id=\"usage-1\">Usage</h4>\n      <ul>\n        <li>\n          <p>To <strong>enable</strong> intent-based navigation, you need to first identify the necessary target mappings. This can be done by defining <code>intentMapping</code> in the Luigi configuration under <code>navigation</code> as in the example below:</p>\n          <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n                <img src=\"/images/copy-clipboard-default.svg\">\n                <div class=\"popoverCopy\">Click to copy</div>\n              </div></a>\n            <pre class=\"canCopyCode\"><code class=\"language-javascript\">intentMapping = [\n  {\n    semanticObject: 'Sales',\n    action: 'display',\n    pathSegment: '/projects/sap/munich/database/sales/display'\n  },\n  {\n    semanticObject: 'Sales',\n    action: 'edit',\n    pathSegment: '/projects/sap/munich/database/sales/edit'\n  }\n];\n</code></pre>\n          </div>\n          <ol>\n            <li>\n              The intent link is built using the <code>semanticObject</code>, <code>action</code> and optional parameters in the following format:\n              <code>#?intent=semanticObject-action?params</code>.\n              An example of an intent link would be as follows:\n            </li>\n          </ol>\n          <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n                <img src=\"/images/copy-clipboard-default.svg\">\n                <div class=\"popoverCopy\">Click to copy</div>\n              </div></a>\n            <pre class=\"canCopyCode\"><code class=\"language-javascript\">  #?intent=Sales-edit?id=100\n</code></pre>\n          </div>\n          <ol start=\"2\">\n            <li>Navigation to a micro frontend through this intent is then made possible by using the <a href=\"/docs/luigi-client-api#navigate\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">linkManager navigate method</a> from Luigi Client API:</li>\n          </ol>\n          <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n                <img src=\"/images/copy-clipboard-default.svg\">\n                <div class=\"popoverCopy\">Click to copy</div>\n              </div></a>\n            <pre class=\"canCopyCode\"><code class=\"language-javascript\">  LuigiClient.linkManager().navigate('#?intent=Sales-edit?id=100');\n</code></pre>\n          </div>\n          <ol start=\"3\">\n            <li>This method would then be navigating to the translated real path segment:</li>\n          </ol>\n          <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n                <img src=\"/images/copy-clipboard-default.svg\">\n                <div class=\"popoverCopy\">Click to copy</div>\n              </div></a>\n            <pre class=\"canCopyCode\"><code class=\"language-javascript\">  https://example.com/projects/sap/munich/database/sales/edit?~id=100;\n</code></pre>\n          </div>\n          <ol start=\"4\">\n            <li>Alternatively, the intent link can also be accessed through the browser URL and accessed from outside:</li>\n          </ol>\n          <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n                <img src=\"/images/copy-clipboard-default.svg\">\n                <div class=\"popoverCopy\">Click to copy</div>\n              </div></a>\n            <pre class=\"canCopyCode\"><code class=\"language-javascript\">  https://example.com/#?intent=Sales-edit?id=100;\n</code></pre>\n          </div>\n        </li>\n      </ul>\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"defer-luigi-client-initialization\">Defer Luigi Client Initialization</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <h4 id=\"overview-3\">Overview</h4>\n      <p>\n        In some scenarios, the micro frontend application needs to decide when to finalize the Luigi Client initialization. By default, Luigi Client is initialized when you import the library in your micro frontend application.\n        However, it can be the case that a complex application takes too long to load all the modules. Since Luigi Client initialization is done automatically when it is imported, Luigi Core will assume that the micro frontend is fully loaded and ready for further actions when it is not.\n        This may lead to some problems, such as UI synchronization issues where the side menu highlights an item, but the micro-frontend application shows different content.\n      </p>\n      <h4 id=\"usage-2\">Usage</h4>\n      <p>These are the steps you can use to defer Luigi Client initialization :</p>\n      <ol>\n        <li>In your micro frontend HTML that serves as entry file, you must add the <code>defer-luigi-init</code> attribute into the <code>&#x3C;head></code> element as follows:</li>\n      </ol>\n      <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n            <img src=\"/images/copy-clipboard-default.svg\">\n            <div class=\"popoverCopy\">Click to copy</div>\n          </div></a>\n        <pre class=\"canCopyCode\"><code class=\"language-html\">    &#x3C;html>\n      &#x3C;head defer-luigi-init>\n      ....\n      &#x3C;/head>\n      .....\n    &#x3C;/html>\n  ```\n2. Then, you can use the Luigi Client API inside your micro frontend:\n```javascript\n    LuigiClient.luigiClientInit();\n</code></pre>\n      </div><!-- add-attribute:class:warning -->\n      <blockquote class=\"warning\">\n        <p><strong>NOTE</strong>: This will only initialize Luigi Client if it hasn't already been initialized.</p>\n      </blockquote>\n    </dd>\n  </div>\n</dl>\n</section></section>"}},{"name":"application-setup.md","shortName":"application-setup","contents":{"data":{},"messages":[],"history":[],"cwd":"/Users/I529989/Documents/SAP/32-luigi/website/docs","value":"<section class=\"h0Wrapper headingWrapper\">\n<section class=\"h1Wrapper headingWrapper\"><h1 id=\"quick-setup\">Quick setup</h1>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/kEzTZ2U9KMM\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<p>This document shows you how to quickly set up a Luigi web application by installing some of our <a href=\"https://github.com/SAP/luigi/tree/main/core/examples\" rel=\"external\" target=\"_blank\">examples</a>.</p>\n<p>Luigi can be added to any application using these steps:</p>\n<ul>\n  <li>Adding Luigi's <code>npm</code> packages to your project dependencies.</li>\n  <li>Giving Luigi exclusive control over your entry <code>index.html</code> file.</li>\n  <li>Starting the server to run your application.</li>\n</ul>\n<p>In this example, all these steps are achieved through a single <strong>installer</strong> script for any of the frameworks listed below. Keep in mind that if you have a single page application, you need to transfer it to a \"two-page application\". You should run your application to make sure the existing router doesn't interfere.</p>\n<ul>\n  <li><a href=\"/docs/application-setup#application-setup-without-a-framework\" onclick=\"navigateInternal(event, this)\">Application setup without a framework</a></li>\n  <li><a href=\"/docs/application-setup#application-setup-for-angular\" onclick=\"navigateInternal(event, this)\">Angular</a></li>\n  <li><a href=\"/docs/application-setup#application-setup-for-sapui5openui5\" onclick=\"navigateInternal(event, this)\">SAPUI5/OpenUI5</a></li>\n  <li><a href=\"/docs/application-setup#application-setup-for-vuejs\" onclick=\"navigateInternal(event, this)\">VUE.JS</a></li>\n  <li><a href=\"/docs/application-setup#application-setup-for-react\" onclick=\"navigateInternal(event, this)\">React</a></li>\n</ul>\n<section class=\"h2Wrapper headingWrapper\"><h2 id=\"application-setup-without-a-framework\">Application setup without a framework</h2><!-- add-attribute:class:warning -->\n<blockquote class=\"warning\">\n  <p><strong>NOTE:</strong> You need a development server capable of hosting Single Page Applications. The recommended server is Live Server.</p>\n</blockquote>\n<ol>\n  <li>Use the following installer to create a directory for your application, install Luigi, make assets available, and start your local server:</li>\n</ol>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-bash\">bash &#x3C;(curl -s https://raw.githubusercontent.com/SAP/luigi/main/scripts/setup/no-framework.sh)\n</code></pre>\n</div>\n<p>or execute these commands manually to get the same result:</p>\n<dl class=\"accordion-container\">\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"click-to-expand\">Click to expand</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n            <img src=\"/images/copy-clipboard-default.svg\">\n            <div class=\"popoverCopy\">Click to copy</div>\n          </div></a>\n        <pre class=\"canCopyCode\"><code class=\"language-bash\">mkdir my-new-app &#x26;&#x26; cd my-new-app\n\nnpm init -y > /dev/null\n\n# add \"start\" command to the package.json file. This command is split into 2 lines on purpose!\nsed 's/\"scripts\": {/\"scripts\": {\\\n\\   \"buildConfig\":\"webpack --entry .\\/src\\/luigi-config\\/luigi-config.es6.js --output-path .\\/public\\/assets --output-filename luigi-config.js --mode production\",/1' package.json > p.tmp.json &#x26;&#x26; mv p.tmp.json package.json\nsed 's/\"scripts\": {/\"scripts\": {\\\n\\   \"start\":\"live-server --entry-file=index.html public\",/1' package.json > p.tmp.json &#x26;&#x26; mv p.tmp.json package.json\n\nnpm i -save @luigi-project/core @luigi-project/client fundamental-styles @sap-theming/theming-base-content live-server webpack webpack-cli @babel/core @babel/preset-env babel-loader \nmkdir -p public/assets\nmkdir -p src/luigi-config\n\n# download assets\ncurl https://raw.githubusercontent.com/SAP/luigi/main/scripts/setup/assets/index.html > public/index.html\ncurl https://raw.githubusercontent.com/SAP/luigi/main/scripts/setup/assets/luigi-config.es6.js > src/luigi-config/luigi-config.es6.js\ncurl https://raw.githubusercontent.com/SAP/luigi/main/scripts/setup/assets/basicMicroFrontend.html > public/assets/basicMicroFrontend.html\n\n\ncp -r node_modules/\\@luigi-project/core public/luigi-core\ncp -r node_modules/\\@luigi-project/client public/luigi-client\ncp -r node_modules/fundamental-styles/dist public/fundamental-styles\ncp -r node_modules/@sap-theming/theming-base-content public/theming-base-content\n\necho \"Building config with command: npm run buildConfig\"\nnpm run buildConfig\n\necho \"Running live-server with command: npm run start\"\nnpm run start\n\n</code></pre>\n      </div>\n    </dd>\n  </div>\n</dl>\n<ol start=\"2\">\n  <li>Open the directory where Luigi is installed. Search for the <code>luigi-config.js</code> file which you can use to configure Luigi <a href=\"/docs/navigation-configuration\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">navigation</a>, <a href=\"/docs/authorization-configuration\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">authorization</a>, <a href=\"/docs/general-settings\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">general settings</a> and more.</li>\n</ol>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"application-setup-for-angular\">Application setup for Angular</h2><!-- add-attribute:class:warning -->\n<blockquote class=\"warning\">\n  <p><strong>NOTE:</strong> The Angular CLI is a prerequisite for this example.</p>\n</blockquote>\n<ol>\n  <li>\n    <p>If you do not have the Angular CLI installed, download and install it from <a href=\"https://cli.angular.io/\" rel=\"external\" target=\"_blank\">here</a>.</p>\n  </li>\n  <li>\n    <p>Use the installer to create your application, install Luigi, make assets available, and serve your application:</p>\n  </li>\n</ol>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-bash\">bash &#x3C;(curl -s https://raw.githubusercontent.com/SAP/luigi/main/scripts/setup/angular.sh)\n</code></pre>\n</div>\n<p>or execute these commands manually to get the same result:</p>\n<dl class=\"accordion-container\">\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"click-to-expand-1\">Click to expand</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n            <img src=\"/images/copy-clipboard-default.svg\">\n            <div class=\"popoverCopy\">Click to copy</div>\n          </div></a>\n        <pre class=\"canCopyCode\"><code class=\"language-bash\">ng new my-angular-app --routing &#x26;&#x26; cd my-angular-app\n\nnpm i -P @luigi-project/core @luigi-project/client fundamental-styles @sap-theming/theming-base-content webpack@5.74.0 webpack-cli@4.10.0 \nsed 's/\"scripts\": {/\"scripts\": {\\\n\\   \"buildConfig\":\"webpack --entry .\\/src\\/luigi-config\\/luigi-config.es6.js --output-path .\\/src\\/assets --output-filename luigi-config.js --mode production\",/1' package.json > p.tmp.json &#x26;&#x26; mv p.tmp.json package.json\nmkdir -p src/luigi-config\n\n # the following steps can be copy and pasted to the terminal at once\nmv src/index.html src/angular.html\n\n# download assets\ncurl https://raw.githubusercontent.com/SAP/luigi/main/scripts/setup/assets/index.html > src/index.html\ncurl https://raw.githubusercontent.com/SAP/luigi/main/scripts/setup/assets/luigi-config.es6.js > src/luigi-config/luigi-config.es6.js\ncurl https://raw.githubusercontent.com/SAP/luigi/main/scripts/setup/assets/basicMicroFrontend.html > src/assets/basicMicroFrontend.html\n\n# string replacements in some files\nsed 's#\"src/index.html\"#\"src/angular.html\"#g' angular.json > tmp.json &#x26;&#x26; mv tmp.json angular.json\n\nsed 's#\"src/styles.css\"#\"src/styles.css\",\\\n              \"node_modules/fundamental-styles/dist/fundamental-styles.css\"#g' angular.json > tmp.json &#x26;&#x26; mv tmp.json angular.json\nsed 's#\"src/assets\"#\"src/assets\",\\\n              \"src/index.html\",\\\n              \"src/logout.html\",\\\n              {\"glob\": \"fundamental-styles.css\",\"input\": \"node_modules/fundamental-styles/dist\",\"output\": \"/fundamental-styles\"},\\\n              {\"glob\": \"*\",\"input\": \"node_modules/@sap-theming/theming-base-content\",\"output\": \"/fonts\"},\\\n              {\"glob\": \"**\",\"input\": \"node_modules/@luigi-project/core\",\"output\": \"/luigi-core\"},\\\n              {\"glob\": \"luigi-client.js\",\"input\": \"node_modules/@luigi-project/client\",\"output\": \"/luigi-client\"}#g' angular.json > tmp.json &#x26;&#x26; mv tmp.json angular.json\n\nnpm run buildConfig\nnpm run start\n</code></pre>\n      </div>\n    </dd>\n  </div>\n</dl>\n<ol start=\"3\">\n  <li>Open the directory where Luigi is installed. Search for the <code>luigi-config.js</code> file which you can use to configure Luigi <a href=\"/docs/navigation-configuration\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">navigation</a>, <a href=\"/docs/authorization-configuration\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">authorization</a>, <a href=\"/docs/general-settings\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">general settings</a> and more.</li>\n</ol>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"application-setup-for-sapui5openui5\">Application setup for SAPUI5/OpenUI5</h2>\n<ol>\n  <li>Use the installer to create a directory for your application, install Luigi, make assets available, and start your local server:</li>\n</ol>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-bash\">bash &#x3C;(curl -s https://raw.githubusercontent.com/SAP/luigi/main/scripts/setup/openui5.sh)\n</code></pre>\n</div>\n<p>or execute these commands manually to get the same result:</p>\n<dl class=\"accordion-container\">\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"click-to-expand-2\">Click to expand</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n            <img src=\"/images/copy-clipboard-default.svg\">\n            <div class=\"popoverCopy\">Click to copy</div>\n          </div></a>\n        <pre class=\"canCopyCode\"><code class=\"language-bash\">mkdir my-ui5-app &#x26;&#x26; cd my-ui5-app\necho \"Creating folders and downloading example assets\"\nmkdir -p ./webapp/home ./webapp/libs ./webapp/sample1 ./webapp/sample2 ./webapp/i18n\n\nexport UI5EX_REPO_URL=\"https://raw.githubusercontent.com/SAP/luigi/main/core/examples/luigi-example-openui5\"\n\ncurl --silent $UI5EX_REPO_URL/webapp/sample2/Sample2.view.xml > ./webapp/sample2/Sample2.view.xml\ncurl --silent $UI5EX_REPO_URL/webapp/sample2/sample2.html > ./webapp/sample2/sample2.html\ncurl --silent $UI5EX_REPO_URL/webapp/sample2/index.js > ./webapp/sample2/index.js\ncurl --silent $UI5EX_REPO_URL/webapp/sample2/Sample2.controller.js > ./webapp/sample2/Sample2.controller.js\ncurl --silent $UI5EX_REPO_URL/webapp/home/Home.view.xml > ./webapp/home/Home.view.xml\ncurl --silent $UI5EX_REPO_URL/webapp/home/Home.controller.js > ./webapp/home/Home.controller.js\ncurl --silent $UI5EX_REPO_URL/webapp/favicon.ico > ./webapp/favicon.ico\ncurl --silent $UI5EX_REPO_URL/webapp/index.html > ./webapp/index.html\ncurl --silent $UI5EX_REPO_URL/webapp/luigi-config.js > ./webapp/luigi-config.js\ncurl --silent $UI5EX_REPO_URL/webapp/openui5.html > ./webapp/openui5.html\ncurl --silent $UI5EX_REPO_URL/webapp/libs/.gitignore > ./webapp/libs/.gitignore\ncurl --silent $UI5EX_REPO_URL/webapp/Component.js > ./webapp/Component.js\ncurl --silent $UI5EX_REPO_URL/webapp/sample1/index.js > ./webapp/sample1/index.js\ncurl --silent $UI5EX_REPO_URL/webapp/sample1/Sample1.controller.js > ./webapp/sample1/Sample1.controller.js\ncurl --silent $UI5EX_REPO_URL/webapp/sample1/sample1.html > ./webapp/sample1/sample1.html\ncurl --silent $UI5EX_REPO_URL/webapp/sample1/Sample1.view.xml > ./webapp/sample1/Sample1.view.xml\ncurl --silent $UI5EX_REPO_URL/webapp/logo.png > ./webapp/logo.png\ncurl --silent $UI5EX_REPO_URL/webapp/manifest.json > ./webapp/manifest.json\ncurl --silent $UI5EX_REPO_URL/webapp/i18n/i18n_en.properties > ./webapp/i18n/i18n_en.properties\ncurl --silent $UI5EX_REPO_URL/webapp/i18n/i18n.properties > ./webapp/i18n/i18n.properties\ncurl --silent $UI5EX_REPO_URL/ui5.yaml > ./ui5.yaml\ncurl --silent $UI5EX_REPO_URL/README.md > ./README.md\ncurl --silent $UI5EX_REPO_URL/.gitignore > ./.gitignore\ncurl --silent $UI5EX_REPO_URL/package-lock.json > ./package-lock.json\ncurl --silent $UI5EX_REPO_URL/package.json > ./package.json\n\nnpm i\nnpm run build\nnpm run start\n</code></pre>\n      </div>\n    </dd>\n  </div>\n</dl>\n<ol start=\"2\">\n  <li>Open the directory where Luigi is installed. Open the <code>webapp/luigi-config.js</code> file which you can use to configure Luigi <a href=\"/docs/navigation-configuration\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">navigation</a>, <a href=\"/docs/authorization-configuration\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">authorization</a>, <a href=\"/docs/general-settings\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">general settings</a> and more.</li>\n</ol>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"application-setup-for-vuejs\">Application setup for VUE.JS</h2><!-- add-attribute:class:warning -->\n<blockquote class=\"warning\">\n  <p><strong>NOTE:</strong> The VUE CLI is a prerequisite for this example.</p>\n</blockquote>\n<ol>\n  <li>If you do not have VUE CLI installed, use this command to install it.</li>\n</ol>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-bash\">npm install -g @vue/cli\n</code></pre>\n</div>\n<ol start=\"2\">\n  <li>Use the installer to create your application, install Luigi, make assets available, and serve your application:</li>\n</ol>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-bash\">bash &#x3C;(curl -s https://raw.githubusercontent.com/SAP/luigi/main/scripts/setup/vue.sh)\n</code></pre>\n</div>\n<p>or execute these commands manually to get the same result:</p>\n<dl class=\"accordion-container\">\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"click-to-expand-3\">Click to expand</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n            <img src=\"/images/copy-clipboard-default.svg\">\n            <div class=\"popoverCopy\">Click to copy</div>\n          </div></a>\n        <pre class=\"canCopyCode\"><code class=\"language-bash\"># create sample vue app\nvue create -d my-vue-app &#x26;&#x26; cd my-vue-app\n\n# install dependencies\ncurl https://raw.githubusercontent.com/SAP/luigi/main/core/examples/luigi-example-vue/package.json > package.json\nnpm i\n# as soon as new package.json under vue example released this line can be removed\nnpm i webpack-cli@4.2.0 node-sass@4.14.1\n\nmkdir -p src/luigi-config src/assets/scss src/views public/assets\n\n# cleanup default installation\n# remove default index, will be replaced with example assets\nrm public/index.html src/app.vue\nrm -rf src/components\n\necho \"@import '~fundamental-styles/dist/fundamental-styles.css';\" > src/assets/scss/style.scss\n\n# set scripts\necho \"const webpack = require('webpack');\nconst CopyWebpackPlugin = require('copy-webpack-plugin');\nmodule.exports = {\n  pages: {\n    sampleapp: {\n      entry: 'src/main.js',\n      template: 'public/sampleapp.html',\n      filename: 'sampleapp.html'\n    }\n  },\n  lintOnSave:true,\n  runtimeCompiler: true,\n  outputDir: 'dist',\n  configureWebpack: {\n    module: {\n      rules: [\n        {\n          test: /\\.css$/,\n          use: ['css-loader']\n        },\n        {\n          test: /\\.scss$/,\n          use: ['sass-loader']\n        }\n      ]\n    },\n    plugins: [\n      new CopyWebpackPlugin(\n        [\n          {context:'public',to:'index.html',from:'index.html'},\n          {context:'node_modules/@luigi-project/core',to:'./luigi-core',from:{glob:'**',dot:true}},\n          {context:'node_modules/@luigi-project/client',to:'./luigi-client',from:{glob:'**',dot:true}},\n          {\n            from: 'node_modules/fundamental-styles/dist',\n            to: './fundamental-styles'\n          },\n          {\n            from: 'node_modules/@sap-theming/theming-base-content',\n            to: './fonts'\n          }\n        ],\n        {ignore:['.gitkeep','**/.DS_Store','**/Thumbs.db'],debug:'warning'}\n      )]\n    }\n};\" > vue.config.js\n\necho \"const path = require('path');\nmodule.exports = {\n    entry: './src/luigi-config/luigi-config.es6.js',\n    output: {\n        filename: 'luigi-config.js',\n        path: path.resolve(__dirname, 'public'),\n    },\n};\" > webpack.config.js\n\nsed 's/\"scripts\": {/\"scripts\": {\\\n\\    \"buildConfig\":\"webpack --config webpack.config.js\",/1' package.json > p.tmp.json &#x26;&#x26; mv p.tmp.json package.json\n\necho '{\n    \"globals\": {\n        \"Luigi\": \"readonly\"\n    }\n}' > .eslintrc.json\n\nmkdir -p src/luigi-config\n\n# fetch assets from vue example\ncurl https://raw.githubusercontent.com/SAP/luigi/main/core/examples/luigi-example-vue/public/index.html > public/index.html\ncurl https://raw.githubusercontent.com/SAP/luigi/main/core/examples/luigi-example-vue/public/sampleapp.html > public/sampleapp.html\ncurl https://raw.githubusercontent.com/SAP/luigi/main/core/examples/luigi-example-vue/src/app.vue > src/app.vue\ncurl https://raw.githubusercontent.com/SAP/luigi/main/core/examples/luigi-example-vue/src/main.js > src/main.js\ncurl https://raw.githubusercontent.com/SAP/luigi/main/core/examples/luigi-example-vue/public/luigi-config.js > src/luigi-config/luigi-config.es6.js\n\ncurl https://raw.githubusercontent.com/SAP/luigi/main/core/examples/luigi-example-vue/src/router.js > src/router.js\ncurl https://raw.githubusercontent.com/SAP/luigi/main/core/examples/luigi-example-vue/src/store.js > src/store.js\n\ncurl https://raw.githubusercontent.com/SAP/luigi/main/core/examples/luigi-example-vue/src/views/home.vue > src/views/home.vue\ncurl https://raw.githubusercontent.com/SAP/luigi/main/core/examples/luigi-example-vue/src/views/sample1.vue > src/views/sample1.vue\ncurl https://raw.githubusercontent.com/SAP/luigi/main/core/examples/luigi-example-vue/src/views/sample2.vue > src/views/sample2.vue\n\n# generic assets\n\nnpm run buildConfig\nnpm run serve\n</code></pre>\n      </div>\n    </dd>\n  </div>\n</dl>\n<ol start=\"3\">\n  <li>Open the directory where Luigi is installed. Search for the <code>luigi-config.js</code> file you can use to configure Luigi <a href=\"/docs/navigation-configuration\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">navigation</a>, <a href=\"/docs/authorization-configuration\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">authorization</a>, <a href=\"/docs/general-settings\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">general settings</a> and more.</li>\n</ol>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"application-setup-for-react\">Application setup for React</h2>\n<ol>\n  <li>Use the installer to create your application, install Luigi, make assets available, and serve your application:</li>\n</ol>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-bash\">bash &#x3C;(curl -s https://raw.githubusercontent.com/SAP/luigi/main/scripts/setup/react.sh)\n</code></pre>\n</div>\n<p>or execute these commands manually to get the same result:</p>\n<dl class=\"accordion-container\">\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"click-to-expand-4\">Click to expand</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n            <img src=\"/images/copy-clipboard-default.svg\">\n            <div class=\"popoverCopy\">Click to copy</div>\n          </div></a>\n        <pre class=\"canCopyCode\"><code class=\"language-bash\">npx create-react-app my-react-app &#x26;&#x26; cd my-react-app\n\n# eject project to customize webpack configs\necho yes | npm run eject\n\n\n# install dependencies\nnpm i -P @luigi-project/core @luigi-project/client fundamental-styles@0.11.0 @sap-theming/theming-base-content react-router-dom@5.1.2\nnpm i copy-webpack-plugin@5 webpack webpack-cli @babel/core @babel/preset-env babel-loader --save-dev\n\n# replace strings in some places\nsed \"s/const HtmlWebpackPlugin = require('html-webpack-plugin');/const HtmlWebpackPlugin = require('html-webpack-plugin');const CopyWebpackPlugin = require('copy-webpack-plugin');/g\" config/webpack.config.js > config/webpack.config.tmp.js &#x26;&#x26; mv config/webpack.config.tmp.js config/webpack.config.js\nsed \"s/new HtmlWebpackPlugin(/new CopyWebpackPlugin([\\\n  {context: 'public', to: 'index.html', from: 'index.html'  },\\\n  {context: 'node_modules\\/@luigi-project\\/core',to: '.\\/luigi-core',from: {glob: '**',dot: true}}],\\\n  {ignore: ['.gitkeep', '**\\/.DS_Store', '**\\/Thumbs.db'],debug: 'warning'\\\n  }),\\\n  new HtmlWebpackPlugin(/g\" config/webpack.config.js > config/webpack.config.tmp.js &#x26;&#x26; mv config/webpack.config.tmp.js config/webpack.config.js\nsed \"s/template: paths.appHtml,/template: paths.appHtml,\\\n  filename: 'sampleapp.html',/g\" config/webpack.config.js > config/webpack.config.tmp.js &#x26;&#x26; mv config/webpack.config.tmp.js config/webpack.config.js\nsed \"s/public\\/index.html/public\\/sampleapp.html/g\" config/paths.js > config/paths.tmp.js &#x26;&#x26; mv config/paths.tmp.js config/paths.js\nsed \"s/publicUrl + '\\/index.html',/publicUrl + '\\/sampleapp.html',/g\" config/webpack.config.js > config/webpack.config.tmp.js &#x26;&#x26; mv config/webpack.config.tmp.js config/webpack.config.js\nsed \"s/const isWsl = require('is-wsl');//g\" config/webpack.config.js > config/webpack.config.tmp.js &#x26;&#x26; mv config/webpack.config.tmp.js config/webpack.config.js\nsed \"s/!isWsl/true/g\" config/webpack.config.js > config/webpack.config.tmp.js &#x26;&#x26; mv config/webpack.config.tmp.js config/webpack.config.js\n\necho \"const path = require('path');\n\nmodule.exports = {\n    entry: './src/luigi-config/luigi-config.es6.js',\n    output: {\n        filename: 'luigi-config.js',\n        path: path.resolve(__dirname, 'public'),\n    },\n};\">webpack.config.js\n\nsed 's/\"scripts\": {/\"scripts\": {\\\n\\    \"buildConfig\":\"webpack --config webpack.config.js\",/1' package.json > p.tmp.json &#x26;&#x26; mv p.tmp.json package.json\n\necho '{\n    \"globals\": {\n        \"Luigi\": \"readonly\"\n    }\n}'>.eslintrc.json\n\n# downloads\nmkdir -p src/luigi-config\ncurl https://raw.githubusercontent.com/SAP/luigi/main/core/examples/luigi-example-react/public/index.html > public/index.html\ncurl https://raw.githubusercontent.com/SAP/luigi/main/core/examples/luigi-example-react/public/sampleapp.html > public/sampleapp.html\ncurl https://raw.githubusercontent.com/SAP/luigi/main/core/examples/luigi-example-react/public/luigi-config.js > src/luigi-config/luigi-config.es6.js\n\n\n# add index.js\ncurl https://raw.githubusercontent.com/SAP/luigi/main/core/examples/luigi-example-react/src/index.js > src/index.js\ncurl https://raw.githubusercontent.com/SAP/luigi/main/core/examples/luigi-example-react/src/index.css > src/index.css\n\n# add views\nmkdir src/views\ncurl https://raw.githubusercontent.com/SAP/luigi/main/core/examples/luigi-example-react/src/views/home.js > src/views/home.js\ncurl https://raw.githubusercontent.com/SAP/luigi/main/core/examples/luigi-example-react/src/views/sample1.js > src/views/sample1.js\ncurl https://raw.githubusercontent.com/SAP/luigi/main/core/examples/luigi-example-react/src/views/sample2.js > src/views/sample2.js\n\nnpm i\nnpm run buildConfig\nnpm start\n</code></pre>\n      </div>\n    </dd>\n  </div>\n</dl>\n<ol start=\"2\">\n  <li>Open the directory where Luigi is installed. Search for the <code>luigi-config.js</code> file which you can use to configure Luigi <a href=\"/docs/navigation-configuration\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">navigation</a>, <a href=\"/docs/authorization-configuration\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">authorization</a>, <a href=\"/docs/general-settings\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">general settings</a> and more.</li>\n</ol>\n</section></section></section>"}},{"name":"authorization-configuration.md","shortName":"authorization-configuration","contents":{"data":{},"messages":[],"history":[],"cwd":"/Users/I529989/Documents/SAP/32-luigi/website/docs","value":"<section class=\"h0Wrapper headingWrapper\">\n<section class=\"h1Wrapper headingWrapper\"><h1 id=\"authorization-configuration\">Authorization configuration</h1>\n<p>To configure authorization in Luigi:</p>\n<ol>\n  <li>\n    <p>Configure the <a href=\"/docs/authorization-configuration#general-authorization-options\" onclick=\"navigateInternal(event, this)\">general authorization options</a>.</p>\n  </li>\n  <li>\n    <p>Choose an authorization provider:</p>\n    <ul>\n      <li><a href=\"/docs/authorization-configuration#openid-connect-configuration\" onclick=\"navigateInternal(event, this)\">OpenID Connect</a></li>\n      <li><a href=\"/docs/authorization-configuration#oauth2-implicit-grant-configuration\" onclick=\"navigateInternal(event, this)\">OAuth2 Implicit Grant</a></li>\n      <li><a href=\"/docs/authorization-configuration#custom-authorization-provider\" onclick=\"navigateInternal(event, this)\">Custom authorization provider</a></li>\n    </ul>\n  </li>\n</ol>\n<section class=\"h2Wrapper headingWrapper\"><h2 id=\"general-authorization-options\">General authorization options</h2>\n<ul>\n  <li><a href=\"/docs/authorization-configuration#how-do-i-configure-authorization-in-luigi\" onclick=\"navigateInternal(event, this)\">General authorization configuration in Luigi</a></li>\n  <li><a href=\"/docs/authorization-configuration#how-do-i-show-some-navigation-nodes-only-to-non-authenticated-users\" onclick=\"navigateInternal(event, this)\">Show content to logged out users/allow anonymous access</a></li>\n</ul>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"how-do-i-configure-authorization-in-luigi\">How do I configure authorization in Luigi?</h3>\n<p>You can configure Luigi authorization using the <code>auth:</code> section of your Luigi configuration file.</p>\n<p>This is an example of a simplified authorization structure:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">import oidcProvider from '@luigi-project/plugin-auth-oidc';\nauth: {\n  use: 'openIdConnect',\n  openIdConnect: {\n    idpProvider: oidcProvider,\n    ...\n  },\n  disableAutoLogin: true\n}\n</code></pre>\n</div>\n<p>For each specific provider, use the settings described further in this document. You can use these parameters to configure the general authorization:</p>\n<section class=\"h4Wrapper headingWrapper\"><h4 id=\"use\">use</h4>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: defines the active authorization provider.</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"disableautologin\">disableAutoLogin</h4>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: allows you to disable the automatic login flow that is provided by default.</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"storage\">storage</h4>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: parameter which allows you to set the storage type. It can be set to <code>localStorage</code>, <code>sessionStorage</code> or <code>none</code>.</li>\n  <li><strong>example</strong>:</li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">auth: {\n   storage: 'sessionStorage'\n</code></pre>\n</div>\n</section></section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"how-do-i-show-some-navigation-nodes-only-to-non-authenticated-users\">How do I show some navigation nodes only to non-authenticated users?</h3>\n<p>To show certain nodes only to users who are not logged-in, use the <a href=\"/docs/navigation-parameters-reference#anonymousaccess\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">anonymousAccess</a> parameter.</p>\n<p>Make sure <strong>disableAutoLogin</strong> is set to <code>true</code>. Add the <strong>anonymousAccess</strong> parameter to the nodes you want to hide and their children:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">anonymousAccess: `exclusive` // show nodes only when logged out\n// OR\nanonymousAccess: true // always show nodes\n</code></pre>\n</div><!-- add-attribute:class:success -->\n<blockquote class=\"success\">\n  <p><strong>TIP:</strong> To show navigation nodes only to certain authenticated (logged in) users instead, use the <a href=\"/docs/navigation-parameters-reference#nodeaccessibilityresolver\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">nodeAcessibilityResolver</a> parameter.</p>\n</blockquote>\n</section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"openid-connect-configuration\">OpenID Connect configuration</h2>\n<p>This code snippet demonstrates how to configure authorization using OpenID Connect in Luigi. Note that you must install the <a href=\"/docs/auth-oidc\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">OpenID Plugin</a> first.</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">import oidcProvider from '@luigi-project/plugin-auth-oidc';\nauth: {\n  use: 'openIdConnect',\n  openIdConnect: {\n    idpProvider: oidcProvider,\n    authority: 'https://example.com',\n    client_id: 'client',\n    scope: 'audience:server:client_id:client openID profile email groups',\n    redirect_uri: '',\n    post_logout_redirect_uri: '/logout.html',\n    automaticSilentRenew: true,\n    userInfoFn:(authSettings, authData)=>{},\n    accessTokenExpiringNotificationTime: 60\n    profileStorageInterceptorFn:(jwtProfile)=>{}\n  },\n  disableAutoLogin: false\n}\n</code></pre>\n</div>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"parameters\">Parameters</h3>\n<section class=\"h4Wrapper headingWrapper\"><h4 id=\"authority\">authority</h4>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: contains the OpenID Connect server address used to authenticate.</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"client_id\">client_id</h4>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: contains your app client ID.</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"scope\">scope</h4>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: defines the permissions to request at login.</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"redirect_uri\">redirect_uri</h4>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: sets the URL to return to after login.</li>\n  <li><strong>default</strong>: the default application root is <code>/</code>.</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"post_logout_redirect_uri\">post_logout_redirect_uri</h4>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: sets the URL to return after logout.</li>\n  <li><strong>default</strong>: <code>/logout.html</code>.</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"automaticsilentrenew\">automaticSilentRenew</h4>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: enables the automatic silent renewal of the token if it is supported by the server. For this mechanism to work, the browser must have third-party cookies support enabled.</li>\n  <li><strong>default</strong>: <code>false</code></li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"accesstokenexpiringnotificationtime\">accessTokenExpiringNotificationTime</h4>\n<ul>\n  <li><strong>type</strong>: number</li>\n  <li><strong>description</strong>: is the number of seconds before an access token expires and triggers silent token refresh.</li>\n  <li><strong>default</strong>: <code>60</code> seconds</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"thirdpartycookiesscriptlocation\">thirdPartyCookiesScriptLocation</h4>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: is the URL to the page containing third-party cookies support check. For details, see <a href=\"/docs/authorization-configuration#third-party-cookies-and-silent-token-refresh\" onclick=\"navigateInternal(event, this)\">Third-party cookies and silent token refresh section</a>.</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"userinfofn\">userInfoFn</h4>\n<ul>\n  <li><strong>type</strong>: function</li>\n  <li><strong>description</strong>: provides a function to get user information. It returns a promise of a <strong>userinfo</strong> object which can contain <strong>name</strong>, <strong>email</strong> and <strong>picture</strong> (value is a URL to the image). <strong>Name</strong> or <strong>email</strong> are displayed in the profile drop-down menu and the user’s profile picture is displayed in the top navigation.</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"profilestorageinterceptorfn\">profileStorageInterceptorFn</h4>\n<ul>\n  <li><strong>type</strong>: function</li>\n  <li><strong>description</strong>: provides a function to mutate the profile values of the <a href=\"https://jwt.io\" rel=\"external\" target=\"_blank\">JSON Web Token (JWT)</a> before it gets stored in Luigi. It allows the removal of values like <strong>email</strong> to comply with data privacy restrictions. Since it is async, you could use it to enrich the profile data, but it should not get mixed up with <strong>userInfoFn</strong> which is specifically designed to define user information.</li>\n</ul>\n</section></section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"third-party-cookies-and-silent-token-refresh\">Third-party cookies and silent token refresh</h3>\n<p>The OpenID Connect configuration allows you to specify the <strong>automaticSilentRenew</strong> option. When set to <code>true</code>, Luigi attempts to automatically renew the token in the background before it expires. Be aware that this mechanism requires the browser to support <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#Third-party_cookies\" rel=\"external\" target=\"_blank\">third-party cookies</a>.</p>\n<p>To detect whether the user's browser supports the mechanism, use the script in the <a href=\"https://github.com/SAP/luigi/tree/main/core/third-party-cookies\" rel=\"external\" target=\"_blank\"><code>third-party-cookies</code></a> catalog. Deploy this file on a domain different from your main application's and set <strong>thirdPartyCookiesScriptLocation</strong> to the <code>init.html</code> file. During initialization, Luigi detects the cookies support and produces a warning in the console if cookies are disabled in the user's browser.</p>\n<p>When Luigi fails to renew the token and then logs the user out, it adds the <code>?reason=tokenExpired&#x26;thirdPartyCookies=[VALUE]</code> query parameters to the logout page redirect URL. Luigi replaces <strong>[VALUE]</strong> with one of these options:</p>\n<ul>\n  <li><code>disabled</code> means that third party cookies are disabled.</li>\n  <li><code>enabled</code> means that the browser supports third party cookies.</li>\n  <li><code>not_checked</code> means that the script was not provided in <strong>thirdPartyCookiesScriptLocation</strong> or it could not be loaded.</li>\n</ul>\n<p>Use these parameters to set a logout page.</p>\n</section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"oauth2-implicit-grant-configuration\">OAuth2 Implicit Grant configuration</h2>\n<p>This code snippet demonstrates how to configure authorization using OAuth2 Implicit Grant in Luigi. Note that you must install the <a href=\"/docs/auth-oauth2\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">OAuth2 Plugin</a> first.</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">import oAuth2ImplicitGrant from '@luigi-project/plugin-auth-oauth2';\n\nauth: {\n  use: 'oAuth2ImplicitGrant',\n  oAuth2ImplicitGrant: {\n    idpProvider: oAuth2ImplicitGrant,\n    authorizeUrl: 'https://example.com/authorize',\n    logoutUrl: 'https://example.com/logout',\n    oAuthData: {\n      client_id: 'egDuozijY5SVr0NSIowUP1dT6RVqHnlp'\n      scope: '',\n      // optional parameters\n      redirect_uri: '/assets/auth-oauth2/callback.html'\n      response_type: 'id_token token',\n      // all specified values inside oAuthData will be added to the oauth call, i.e display=\"popup\",\n    }\n    // optional functions\n    nonceFn: () => {},\n    logoutFn: (settings, authData, logoutCallback) => { ...; logoutCallback('/logout.html'); },\n    userInfoFn:(settings, authData)=>{},\n    accessTokenExpiringNotificationTime: 60,\n    expirationCheckInterval: 5\n  },\n  disableAutoLogin: false\n</code></pre>\n</div>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"parameters-1\">Parameters</h3>\n<section class=\"h4Wrapper headingWrapper\"><h4 id=\"authorizeurl\">authorizeUrl</h4>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: contains the URL or address of the OAuth2 authorization server.</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"logouturl\">logoutUrl</h4>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: contains the endpoint to terminate the authorization session.</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"oauthdata\">oAuthData</h4>\n<ul>\n  <li><strong>type</strong>: object</li>\n  <li><strong>description</strong>: comprises the object with data sent to the <strong>authorizeUrl</strong>.</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"client_id-1\">client_id</h4>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: holds your application client ID.</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"scope-1\">scope</h4>\n<ul>\n  <li><strong>description</strong>: defines permissions that are requested at login.</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"redirect_uri-1\">redirect_uri</h4>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: contains the URL to return to after login.</li>\n  <li><strong>default</strong>: the default application root is <code>/</code>.</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"response_type\">response_type</h4>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: defaults to the <strong>id_token</strong>. Any other parameter that is added to oAuthData is also added to the authorization payload.</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"noncefn\">nonceFn</h4>\n<ul>\n  <li><strong>type</strong>: function</li>\n  <li><strong>description</strong>: provides a function that returns a string in order to override the default <strong>nonce</strong>.</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"logoutfn\">logoutFn</h4>\n<ul>\n  <li><strong>type</strong>: function</li>\n  <li><strong>description</strong>: provides the function to override the <strong>logoutUrl</strong> functionality for a custom logout. It needs to execute the <strong>logoutCallback(redirectUri)</strong> function after logout. Its parameter <strong>redirectUri</strong> is an URL or path to redirect to after executing <strong>logoutCallback</strong>. If no <strong>redirectUri</strong> is defined, Luigi stays in the current state.</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"userinfofn-1\">userInfoFn</h4>\n<ul>\n  <li><strong>type</strong>: function</li>\n  <li><strong>description</strong>:provides a function to get user information. It returns a promise of a <strong>userinfo</strong> object which can contain <strong>name</strong>, <strong>email</strong> and <strong>picture</strong> (value is a URL to the image). <strong>Name</strong> or <strong>email</strong> are displayed in the profile drop-down menu and the user’s profile picture is displayed in the top navigation.</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"accesstokenexpiringnotificationtime-1\">accessTokenExpiringNotificationTime</h4>\n<ul>\n  <li><strong>type</strong>: number</li>\n  <li><strong>description</strong>: number of seconds that pass before an access token expires and the <strong>onAuthExpireSoon</strong> event is fired.</li>\n  <li><strong>default</strong>: the default value is <code>60</code> seconds.</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"expirationcheckinterval\">expirationCheckInterval</h4>\n<ul>\n  <li><strong>type</strong>: number</li>\n  <li><strong>description</strong>: the number of seconds to pass between each check if the token is about to expire.</li>\n  <li><strong>default</strong>: the default value is <code>5</code> seconds.</li>\n</ul>\n</section></section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"custom-authorization-provider\">Custom authorization provider</h2>\n<p>You can write your own authorization provider that meets your requirements. This is an example of what a custom authorization provider may look like:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">export class CustomAuthenticationProvider {\n\n  constructor(configSettings = {}) {\n    const defaultSettings = {\n      redirect_uri: window.location.origin + '/custom-auth-callback.html';\n    }\n    this.settings = Object.assign({}, defaultSettings, configSettings);\n  }\n​\n  login(){\n    // logic to handle the login mechanism\n    // returns a promise which contains an error message if something went wrong\n  }\n\n  logout(authData, logoutLuigiCore){\n    // call logoutLuigiCore() to reset stored data in Luigi Core\n    // logic to handle the logout mechanism\n  }\n\n  setTokenExpirationAction(){\n  }\n\n  setTokenExpireSoonAction() {}\n\n  generateNonce(){\n    // returns a string\n  }\n\n  userInfo(){\n    // logic to get some user information\n    // returns a promise of a userinfo object which contains an object with `name`, `email` and `picture` properties to display in the profile dropdown menu\n    return { name, email, picture };\n  }\n\n  unload() {\n    // logic that is called if you use Luigi.unload() in order to remove event listeners and intervals.\n  }\n}\n</code></pre>\n</div>\n<p>\n  Read more about <a href=\"/docs/luigi-core-api#unload\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Luigi.unload()</a>.\n  ​\n  To use the custom authentication provider in your Luigi app, include this code in the <code>auth:</code> section of the configuration file:\n</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.setConfig({\n  auth: {\n    use: 'myProviderConfig',\n    myProviderConfig: {\n      idpProvider: myProvider,\n      redirect_uri: '/another-callback.html'\n    }\n  }\n})\n</code></pre>\n</div>\n<p>\n  ​\n  <a href=\"https://github.com/SAP/luigi/blob/main/core/src/providers/auth/oAuth2ImplicitGrant.js\" rel=\"external\" target=\"_blank\">oAuth2ImplicitGrant.js</a> is a good starting point if you don't use an external authorization library.\n  ​\n  After authorization is successful on the authorization provider's side, it redirects back to <code>Luigi callback.html</code> <strong>redirect_uri</strong>. The provider verifies the authorization data, saves it in <strong>localStorage</strong> for Luigi, and redirects to the Luigi main page.\n  ​\n  <a href=\"https://github.com/SAP/luigi/blob/main/core/src/providers/auth/openIdConnect.js\" rel=\"external\" target=\"_blank\">openIdConnect.js</a> lazy loads the official <code>oidc-client</code> library and is a good starting point if you also depend on external authorization libraries.\n</p><!-- add-attribute:class:warning -->\n<blockquote class=\"warning\">\n  <p><strong>NOTE:</strong> Read more about authorization helpers in the <a href=\"/docs/luigi-core-api#AuthorizationStore\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Core API: AuthorizationStore</a> section.</p>\n</blockquote>\n<p>​<!-- second empty line required for quote --></p>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"persisting-auth-data\">Persisting auth data</h3>\n<p>\n  ​\n  Make sure to set this data in your authorization provider implementation. Most of the time it is used in a <code>callback.html</code> so that its data is available for Luigi after successful authorization:\n  ​\n</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">// partial content of callback.html\nconst data = {\n  accessToken: hashParams['access_token'],\n  accessTokenExpirationDate: hashParams['expiry_timestamp'],\n  scope: hashParams['scope'],\n  idToken: hashParams['id_token']\n};\n​\nLuigi.auth().store.setAuthData(data);\nLuigi.auth().store.setNewlyAuthorized();\n​\n// redirect back to Luigi\nwindow.location.href = '/';\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"additional-options-\">Additional options ​</h3>\n<p>\n  Additionally, if you process authorization data during Luigi runtime (inside the custom provider, similarly to using the<code>openIdConnect</code> provider), dispatch the <code>luigi.auth.tokenIssued</code> Event to update the currently opened micro frontends with the latest authorization data. This is not required when processing authorization outside Luigi, for example when <code>oAuth2ImplicitGrant</code> provider processes the data in <code>callback.html</code> and redirects to Luigi afterward.\n  ​\n</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">window.postMessage(\n  { msg: 'luigi.auth.tokenIssued', authData: data },\n  '*'\n);\n</code></pre>\n</div>\n</section></section></section></section>"}},{"name":"authorization-events.md","shortName":"authorization-events","contents":{"data":{},"messages":[],"history":[],"cwd":"/Users/I529989/Documents/SAP/32-luigi/website/docs","value":"<section class=\"h0Wrapper headingWrapper\">\n<section class=\"h1Wrapper headingWrapper\"><h1 id=\"authorization-events\">Authorization events</h1><!-- add-attribute:class:success -->\n<blockquote class=\"success\">\n  <p><strong>TIP:</strong> For learning and testing purposes, use the <a href=\"https://fiddle.luigi-project.io\" rel=\"external\" target=\"_blank\">Luigi Fiddle</a> page where you can configure a sample Luigi application.</p>\n</blockquote>\n<p>\n  Luigi provides life cycle events which it can trigger internally or by authorization providers.\n  Events are part of the <strong>auth</strong> configuration object and have to be functions. They can be executed asynchronously.\n</p>\n<p>An example events configuration looks as follows:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">auth: {\n  events: {\n    onAuthSuccessful: (settings, authData) => {},\n    onAuthError: (settings, err) => {}\n    onAuthExpired: (settings) => {},\n    onLogout: (settings) => {},\n    onAuthExpireSoon: (settings) => {},\n    onAuthConfigError: (settings, err) => {}\n  }\n}\n</code></pre>\n</div>\n<p>\n  The first parameter is always the current <strong>settings</strong> object of the currently active authorization provider. This object contains the user provider configuration with the default values.\n  The second parameter is optional and it is either <strong>authData</strong> or <strong>error</strong>.\n</p>\n<p>You can disable the default behavior of <code>onAuthExpired</code> and <code>onAuthError</code> by making the function return <code>false</code>. As a result, the lifecycle execution stops with this function. This, however, may lead to blank pages after the user logs out since typically the page redirects to a logout, login or home page.</p>\n<section class=\"h2Wrapper headingWrapper\"><h2 id=\"events\">Events</h2>\n<ul>\n  <li>\n    <p><code>onAuthSuccessful</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\" rel=\"external\" target=\"_blank\">function</a></strong> is executed after logging in with the <strong>authData</strong> object parameter. If valid authorization data was found in the local storage, the function is not executed.</p>\n  </li>\n  <li>\n    <p><code>onAuthError</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\" rel=\"external\" target=\"_blank\">function</a></strong> is executed:</p>\n    <ul>\n      <li>by Luigi <strong>reason</strong> URL parameter with optional <strong>error</strong> URL parameter for detailed description was found on Luigi initialization. The OAuth2Provider uses this approach by redirecting from the authorization provider to <code>luigi.domain/?reason=someError&#x26;error=Error detail describe</code>.</li>\n      <li>by the OIDC provider if silent access token renewal fails</li>\n    </ul>\n    <p>Return <code>false</code> to prevent redirecting to <code>logoutUrl</code> after executing this function. It goes to the Luigi main route <code>/</code> instead.</p>\n  </li>\n  <li>\n    <p><code>onAuthExpired</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\" rel=\"external\" target=\"_blank\">function</a></strong> is executed if the token expires during runtime, or if Luigi is opened with outdated authorization data in the local storage. Return <code>false</code> to prevent redirecting to <code>logoutUrl</code> after executing this function.</p>\n  </li>\n  <li>\n    <p><code>onLogout</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\" rel=\"external\" target=\"_blank\">function</a></strong> is executed after the user logs out.</p>\n  </li>\n  <li>\n    <p><code>onAuthExpireSoon</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\" rel=\"external\" target=\"_blank\">function</a></strong> is executed before the token expires. For OAuth2 and OIDC you can set the <strong>accessTokenExpiringNotificationTime</strong> to specify the number of seconds required to pass before the event is fired. The default value is <code>60</code> seconds.</p>\n    <ul>\n      <li>by using oAuth2ImplicitGrant you can specify <strong>expirationCheckInterval</strong> which is the number of seconds to pass between each check if the token is about to expire. The default value is <code>5</code> seconds.</li>\n    </ul>\n  </li>\n  <li>\n    <p><code>onAuthConfigError</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\" rel=\"external\" target=\"_blank\">function</a></strong> is executed if an authentication provider is wrongly configured and unavailable as a result.</p>\n  </li>\n</ul>\n</section></section></section>"}},{"name":"communication.md","shortName":"communication","contents":{"data":{},"messages":[],"history":[],"cwd":"/Users/I529989/Documents/SAP/32-luigi/website/docs","value":"<section class=\"h0Wrapper headingWrapper\">\n<section class=\"h1Wrapper headingWrapper\"><h1 id=\"communication\">Communication</h1><!-- add-attribute:class:success -->\n<blockquote class=\"success\">\n  <p><strong>TIP:</strong> For learning and testing purposes, use the <a href=\"https://fiddle.luigi-project.io\" rel=\"external\" target=\"_blank\">Luigi Fiddle</a> page where you can configure a sample Luigi application.</p>\n</blockquote>\n<section class=\"h2Wrapper headingWrapper\"><h2 id=\"overview\">Overview</h2>\n<p>The Luigi configuration file can include a section called <code>communication:</code>. In it, you can define custom messages to be exchanged between Luigi Core and Luigi Client, as well as configure additional communication options.</p>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"custom-messages\">Custom messages</h2>\n<p>Luigi Core and Luigi Client can exchange custom messages in both directions.</p>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"luigi-client-to-luigi-core\">Luigi Client to Luigi Core</h3>\n<p>For Luigi Client to send messages to Luigi Core, use the <a href=\"/docs/luigi-client-api#sendCustomMessage\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">sendCustomMessage</a> method from Client API.</p>\n<p>For Luigi Core to process custom messages, define a configuration similar to the following at the root level of your Luigi configuration object:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">{\n  ...\n  communication: {\n    customMessagesListeners: {\n      'my-custom-message.update-top-nav': () => {\n        Luigi.navigation().updateTopNavigation();\n      }\n    }\n  }\n  ...\n}\n</code></pre>\n</div>\n<p>where the <code>my-custom-message.update-top-nav</code> key is the message ID, and the value is the listener function for the custom message. The listener receives the following input parameters:</p>\n<ul>\n  <li><strong>customMessage</strong> the <a href=\"/docs/luigi-client-api#sendCustomMessage\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">message</a> sent by Luigi Client.</li>\n  <li><strong>microfrontend</strong> a micro frontend object as specified <a href=\"/docs/luigi-core-api#getMicrofrontends\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">here</a>.</li>\n  <li><strong>navigation node</strong> a <a href=\"/docs/navigation-parameters-reference#Node-parameters\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">navigation node object</a>.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"luigi-core-to-luigi-client\">Luigi Core to Luigi Client</h3>\n<p>For Luigi Core to send messages, use the <a href=\"/docs/luigi-core-api#customMessages\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">customMessages</a> section from Core API. You can send a custom message to all rendered micro frontends, or to a specific one. For the latter, use the Core API <a href=\"/docs/luigi-core-api#elements\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">elements</a> methods to retrieve micro frontends and select the one you want to send the custom message to.</p>\n<p>For Luigi Client to process the message, add and remove message listeners as described <a href=\"/docs/luigi-client-api#addCustomMessageListener\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">here</a>.</p>\n</section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"ignore-events-from-inactive-iframes\">Ignore events from inactive iframes</h2>\n<p>In the <code>communication:</code> section of the Luigi config, you can add the <code>skipEventsWhenInactive</code> parameter in order to ignore events normally sent from Luigi Client to Luigi Core when an iframe/micro frontend is not currently selected or active.</p>\n<p>For example, you can ignore any of these events (or others, as needed):</p>\n<ul>\n  <li><a href=\"https://github.com/SAP/luigi/blob/main/client/src/linkManager.js#L82\" rel=\"external\" target=\"_blank\">luigi.navigation.open</a> - skipping this event will prevent the inactive iframe from opening</li>\n  <li><a href=\"https://github.com/SAP/luigi/blob/main/client/src/lifecycleManager.js#L124\" rel=\"external\" target=\"_blank\">luigi.navigate.ok</a> - skipping this event will prevent navigation</li>\n  <li><a href=\"https://github.com/SAP/luigi/blob/main/client/src/uxManager.js#L102\" rel=\"external\" target=\"_blank\">luigi.ux.confirmationModal.show</a> - skipping this event will prevent the showing of a <a href=\"/docs/luigi-client-api#showconfirmationmodal\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">confirmation modal</a></li>\n  <li><a href=\"https://github.com/SAP/luigi/blob/main/client/src/uxManager.js#L172\" rel=\"external\" target=\"_blank\">luigi.ux.alert.show</a> - skipping this event will prevent the showing of an <a href=\"/docs/luigi-client-api#showalert\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">alert</a></li>\n</ul>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"skipeventswheninactive\">skipEventsWhenInactive</h3>\n<ul>\n  <li><strong>type</strong>: array of strings</li>\n  <li><strong>description</strong>: a list of strings specifying the names of events which you want to ignore. When specified, the events will be ignored when an iframe is inactive.</li>\n  <li><strong>default</strong>: undefined</li>\n  <li><strong>example</strong>:</li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">{\n  ...\n  communication: {\n    skipEventsWhenInactive: [\"luigi.navigation.open\", \"luigi.ux.alert.show\"]\n  }\n  ...\n}\n</code></pre>\n</div>\n</section></section></section></section>"}},{"name":"content-guidelines.md","shortName":"content-guidelines","contents":{"data":{},"messages":[],"history":[],"cwd":"/Users/I529989/Documents/SAP/32-luigi/website/docs","value":"<section class=\"h0Wrapper headingWrapper\">\n<section class=\"h1Wrapper headingWrapper\"><h1 id=\"content-guidelines\">Content Guidelines</h1>\n<p>This page contains instructions on how to create documentation for Luigi. It defines the rules for each of these topics:</p>\n<ul>\n  <li><a href=\"/docs/content-guidelines#structure\" onclick=\"navigateInternal(event, this)\">Structure</a></li>\n  <li><a href=\"/docs/content-guidelines#metadata\" onclick=\"navigateInternal(event, this)\">Metadata</a></li>\n  <li><a href=\"/docs/content-guidelines#api-documentation\" onclick=\"navigateInternal(event, this)\">API documentation</a></li>\n  <li><a href=\"/docs/content-guidelines#audience-and-language\" onclick=\"navigateInternal(event, this)\">Audience and language</a></li>\n  <li><a href=\"/docs/content-guidelines#format\" onclick=\"navigateInternal(event, this)\">Format</a></li>\n  <li><a href=\"/docs/content-guidelines#links\" onclick=\"navigateInternal(event, this)\">Links</a></li>\n  <li><a href=\"/docs/content-guidelines#screenshots-and-diagrams\" onclick=\"navigateInternal(event, this)\">Screenshots and diagrams</a></li>\n  <li><a href=\"/docs/content-guidelines#glossary\" onclick=\"navigateInternal(event, this)\">Glossary</a></li>\n</ul>\n<section class=\"h2Wrapper headingWrapper\"><h2 id=\"overview\">Overview</h2>\n<p>Luigi documentation is written in Markdown and stored on GitHub. The Markdown files are then rendered on the main documentation page using Sapper. Find more about what GitHub-flavored Markdown is <a href=\"https://github.github.com/gfm\" rel=\"external\" target=\"_blank\">here</a>.</p>\n<p>Documentation resides in the <code>luigi/docs</code> folder in the <a href=\"https://github.com/SAP/luigi\" rel=\"external\" target=\"_blank\">Luigi repository</a>.</p>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"structure\">Structure</h2>\n<p>Documentation on the Luigi website follows the structure below. When adding a new document, you need to place it into one of the five main categories depending on its topic.</p>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"basics\">Basics</h3>\n<ul>\n  <li><a href=\"/docs/getting-started\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Getting started</a></li>\n  <li><a href=\"/docs/luigi-architecture\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Architecture</a></li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"luigi-core\">Luigi Core</h3>\n<ul>\n  <li><a href=\"/docs/application-setup\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Installation</a></li>\n  <li><a href=\"/docs/navigation-configuration\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Basic navigation</a></li>\n  <li><a href=\"/docs/navigation-advanced\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Advanced navigation</a></li>\n  <li><a href=\"/docs/navigation-parameters-reference\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Navigation parameters reference</a></li>\n  <li><a href=\"/docs/authorization-configuration\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Authorization</a></li>\n  <li><a href=\"/docs/authorization-events\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Authorization events</a></li>\n  <li><a href=\"/docs/general-settings\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">General settings</a></li>\n  <li><a href=\"/docs/lifecycle-hooks\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Lifecycle hooks</a></li>\n  <li><a href=\"/docs/luigi-ux-features\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">UI features</a></li>\n  <li><a href=\"/docs/luigi-core-api\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">API</a></li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"luigi-client\">Luigi Client</h3>\n<ul>\n  <li><a href=\"/docs/luigi-client-setup\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Installation</a></li>\n  <li><a href=\"/docs/luigi-client-api\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">API</a></li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"advanced\">Advanced</h3>\n<ul>\n  <li><a href=\"/docs/communication\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Custom messages</a></li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"examples\">Examples</h3>\n<ul>\n  <li><a href=\"https://github.com/SAP/luigi/tree/main/core/examples/luigi-example-angular\" rel=\"external\" target=\"_blank\">Angular</a></li>\n  <li><a href=\"https://github.com/SAP/luigi/tree/main/core/examples/luigi-example-vue\" rel=\"external\" target=\"_blank\">Vue</a></li>\n  <li><a href=\"https://github.com/SAP/luigi/tree/main/core/examples/luigi-example-react\" rel=\"external\" target=\"_blank\">React</a></li>\n</ul>\n</section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"metadata\">Metadata</h2>\n<p>In order to render documentation correctly on the Luigi website, you need to add metadata to the Markdown documents on GitHub. This does not apply if you are adding text to an already existing document/category.</p>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"navigation-metadata\">Navigation metadata</h3>\n<p>This type of metadata determines where to display the document in the navigation structure of the Luigi website. It must be written as a JSON object surrounded by <code>&#x3C;!--meta</code> <code>meta--></code> tags. For example:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-json\">&#x3C;!-- meta\n{\n  \"node\": {\n    \"label\": \"Overview\",\n    \"category\": {\n      \"label\": \"Basics\",\n      \"collapsible\": true\n    },\n    \"metaData\": {\n      \"categoryPosition\": 1,\n      \"position\": 0\n    }\n  }\n}\nmeta -->\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"alert-blocks-metadata\">Alert blocks metadata</h3>\n<p>To draw the reader's attention to something, you can use the quote block option in Markdown. Directly above the quote block, add metadata which determines whether the alert box on the website will be green (<code>success</code>) or yellow (<code>warning</code>).</p>\n<p>Use one of these three options for alert blocks:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code>&#x3C;!-- add-attribute:class:warning -->\n>**NOTE:** Necessary information\n</code></pre>\n</div>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code>&#x3C;!-- add-attribute:class:success -->\n>**TIP:** Useful, but not strictly necessary information\n</code></pre>\n</div>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code>&#x3C;!-- add-attribute:class:warning -->\n>**WARNING:** Very important information\n</code></pre>\n</div>\n</section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"api-documentation\">API Documentation</h2>\n<p>The <a href=\"/docs/luigi-core-api\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Core</a> and <a href=\"/docs/luigi-client-api\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Client API</a> documents are different from the rest of Luigi documentation. They are automatically generated by a script. Instead of adding documentation directly to the <code>.md</code> files in the <code>luigi/docs</code> folder, you need to:</p>\n<ol>\n  <li>Add documentation as comments to the <code>.js</code> file where the API function is contained. First, write a description of what the function does. Then, include extra categories preceded by tags (if relevant):</li>\n</ol>\n<ul>\n  <li><code>@memberof</code> - defines the larger category the function is part of, e.g. <code>LuigiNavigation</code> or <code>Authorization</code></li>\n  <li><code>@param</code> - parameters the function takes, e.g. <code>{boolean}</code>, <code>{string}</code>, <code>{Object}</code> followed by any specific name if applicable</li>\n  <li><code>@returns</code> - type and description of what the function returns, e.g. <code>{boolean}</code>, <code>{string}</code>, <code>{Object}</code> followed by any specific name if applicable</li>\n  <li><code>@example</code> - one or more examples of how the function is used</li>\n  <li><code>@since</code> - earliest Luigi version offering this feature</li>\n</ul>\n<p>For an example, you can look at the already existing functions, in this case <a href=\"/docs/luigi-client-api#fromvirtualtreeroot\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">fromVirtualTreeRoot</a>:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">  /**\n   * Sets the current navigation base to the parent node that is defined as virtualTree. This method works only when the currently active micro frontend is inside a virtualTree.\n   * @memberof LuigiNavigation\n   * @returns {linkManager} link manager instance\n   * @since 1.0.1\n   * @example\n   * Luigi.navigation().fromVirtualTreeRoot().navigate('/users/groups/stakeholders')\n   */\n</code></pre>\n</div>\n<ol start=\"2\">\n  <li>Save and commit your changes. If you have run <code>npm install</code> in the root folder (as indicated in the <a href=\"https://github.com/SAP/luigi/blob/main/CONTRIBUTING.md\" rel=\"external\" target=\"_blank\">contributing guidelines</a>), documentation should be automatically generated and added to the <code>luigi-core-api.md</code> or <code>luigi-client-api.md</code> file on push to your branch origin. If not, you can run <code>lerna run docu</code> manually.</li>\n</ol>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"audience-and-language\">Audience and language</h2>\n<p>The audience of this documentation consists mainly of developers interested in implementing a micro frontend UI solution. It is assumed the reader already has basic knowledge of web development. Do not explain general concepts unrelated to Luigi except if they are instrumental for working with the feature you are describing.</p>\n<p>When writing documentation, adhere to a few basic rules:</p>\n<ul>\n  <li>Use active voice. For example, instead of writing \"Luigi Client should be installed...\", write \"Install Luigi Client...\"</li>\n  <li>Do not use slang or abbreviations. This also means you should not use contractions (\"don't\" instead of \"do not\") or short forms (\"info\" instead of \"information\").</li>\n  <li>Use the present tense.</li>\n  <li>Use concise language and avoid long blocks of text. Lists, tables, or subheadings can help you with that.</li>\n  <li>Give practical examples of features instead of only using words to explain them. Additionally, link to <a href=\"https://fiddle.luigi-project.io/\" rel=\"external\" target=\"_blank\">Luigi Fiddle</a> as a tool where users can experiment with features.</li>\n</ul>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"format\">Format</h2>\n<p>This section provides you with guidelines on how to format and organize your text.</p>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"headings\">Headings</h3>\n<p>Use H1 headings only at the start of the document to indicate the document name.</p>\n<p>Only use H2 and H3 headings to organize your content into categories. Do not use H4 headings or lower.</p>\n<p>H4 can be only used as a function naming.</p>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"lists\">Lists</h3>\n<p>Lists are very useful for breaking up text and providing instructions.</p>\n<ul>\n  <li>Use bullet points (created with * or -) for lists involving general explanations.</li>\n  <li>Use numbered lists only for step-by-step instructions.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"tables\">Tables</h3>\n<p>Use tables when content needs comparison or to organize small bits of information. Avoid long sentences or paragraphs inside tables.</p>\n<p>You can find an example of a table in the <a href=\"/docs/content-guidelines#styles\" onclick=\"navigateInternal(event, this)\">Styles</a> section of this document.</p>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"code-snippets\">Code snippets</h3>\n<p>Surround code snippets with the Markdown code block tag and specify the programming language. Make sure to indent code correctly using your text editor (2 space indentation is the default).</p>\n<p>For example:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.setConfig({\n  routing: {\n    nodeParamPrefix: '~'\n  },\n</code></pre>\n</div>\n<p>is better than:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code>Luigi.setConfig({\n    routing: {\n        nodeParamPrefix: '~'\n    },\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"styles\">Styles</h3>\n<p>Depending on the type of content, use different types of text, for example, <strong>bolded</strong> or <code>code</code>.</p>\n<p>\n  | Type | Font | Example |\n  |--------------------|:------------------:|---------------|\n  | Parameters | <strong>bold</strong> | <strong>viewGroup</strong> |\n  | Attributes | <strong>bold</strong> | <strong>collapsible</strong> |\n  | Values | <code>code</code> | <code>true</code>, <code>false</code> |\n  | Dynamic parameters | <code>code</code> | <code>{userId}</code> |\n  | Folders, paths, filenames | <code>code</code> | Open <code>basicConfiguration.js</code> inside <code>assets/luigi-config</code>|\n  | Code snippets | <code>code</code> | See <a href=\"/docs/content-guidelines#code-snippets\" onclick=\"navigateInternal(event, this)\">this section</a> |\n  | Functions | <code>code</code> | <code>showLoadingIndicator()</code> |\n</p>\n</section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"links\">Links</h2>\n<p>If the link is within the same folder on GitHub, use only the relative path. For all other links, including external links, use the absolute path, starting with <code>https://</code>.</p>\n<p>To link to a section within a document, use the title of that section as an anchor. For example:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code>[Link to the \"custom messages\" section in the \"communication\" document](communication.md#custom-messages)\n</code></pre>\n</div>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"screenshots-and-diagrams\">Screenshots and diagrams</h2>\n<p>When adding screenshots or diagrams, adhere to the following rules:</p>\n<ul>\n  <li>Only use high-resolution images.</li>\n  <li>Only use screenshots or diagrams if necessary, as too many of them can create visual noise.</li>\n  <li>As an alternative to screenshots, point to <a href=\"https://fiddle.luigi-project.io/\" rel=\"external\" target=\"_blank\">Luigi Fiddle</a> or other Luigi examples when you want to illustrate a concept.</li>\n</ul>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"glossary\">Glossary</h2>\n<p>This section contains terminology frequently used in the Luigi documentation.</p>\n<ul>\n  <li><strong>Luigi Core</strong> - the main application and the settings used to configure it.</li>\n  <li><strong>Luigi Client</strong> - the micro frontend within Luigi Core and the API used to connect the two.</li>\n  <li><strong>Luigi Fiddle</strong> - a <a href=\"https://fiddle.luigi-project.io/\" rel=\"external\" target=\"_blank\">page</a> where you can configure an example Luigi application and explore Luigi functions.</li>\n  <li><strong>Parameters</strong> - the parameters that can be used to configure Luigi in the Luigi configuration file, for example <strong>category</strong>, <strong>viewUrl</strong>, and more.</li>\n  <li><strong>Dynamic parameters</strong> - the parameters that can be added to create a dynamically changeable path.</li>\n  <li><strong>Attributes</strong> - the \"sub properties\" of parameters. For example, the <strong>category</strong> parameter can have <strong>label</strong>, <strong>icon</strong>, and <strong>collapsible</strong> as attributes.</li>\n</ul>\n</section></section></section>"}},{"name":"faq.md","shortName":"faq","contents":{"data":{},"messages":[],"history":[],"cwd":"/Users/I529989/Documents/SAP/32-luigi/website/docs","value":"<section class=\"h0Wrapper headingWrapper\">\n<section class=\"h1Wrapper headingWrapper\"><h1 id=\"frequently-asked-questions-about-luigi\">Frequently asked questions about Luigi</h1><!-- add-attribute:class:success -->\n<blockquote class=\"success\">\n  <p><strong>TIP:</strong> You can go to our <a href=\"https://github.com/SAP/luigi/discussions\" rel=\"external\" target=\"_blank\">GitHub Discussions page</a> to find the answers to more questions not listed here.</p>\n</blockquote>\n<p>This page contains FAQs about Luigi in the following categories:</p>\n<ul>\n  <li><a href=\"/docs/faq#basic-questions\" onclick=\"navigateInternal(event, this)\">Basics</a></li>\n  <li><a href=\"/docs/faq#ui-questions\" onclick=\"navigateInternal(event, this)\">User interface/appearance</a></li>\n  <li><a href=\"/docs/faq#navigation-and-routing-questions\" onclick=\"navigateInternal(event, this)\">Navigation and routing</a></li>\n  <li><a href=\"/docs/faq#other-questions\" onclick=\"navigateInternal(event, this)\">Others</a></li>\n</ul>\n<section class=\"h2Wrapper headingWrapper\"><h2 id=\"basic-questions\">Basic questions</h2>\n<dl class=\"accordion-container\">\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"what-is-luigi\">What is Luigi?</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>Luigi is a micro frontend framework that helps you build modularizable, extensible, scalable and consistent UIs and web applications (for administrators and business users).</p>\n      <p>You can watch this video of a Luigi use case to understand its functions better:</p>\n      <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fRYESd-YDhA\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"what-are-micro-frontends\">What are micro frontends?</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>The term \"micro frontends\" extends the concepts of micro services to the frontend. It's an architectural style where big frontend monoliths are decomposed into smaller and simpler chunks to be developed, tested, deployed and maintained independently and rapidly (by many distributed teams), while still appearing to the customer as a one cohesive product.</p>\n      <p>This video which explains the basics of micro frontend architecture and how it can be implemented with Luigi:</p>\n      <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Bjp1_yvtR4Y\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"does-luigi-deliver-micro-frontends\">Does Luigi deliver micro frontends?</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>No, Luigi itself does not deliver any micro frontends. It is a framework that helps you develop micro frontends and connect them to web applications.</p>\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"is-luigi-only-useful-in-the-context-of-sap-or-very-large-corporate-applications\">Is Luigi only useful in the context of SAP or very large corporate applications?</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>No, Luigi can be used independently of SAP for a variety of purposes. You can find one example in <a href=\"https://medium.com/swlh/luigi-micro-fronteds-orchestrator-8c0eca710151\" rel=\"external\" target=\"_blank\">this article</a> which describes how to create a small hobby project using Luigi.</p>\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"what-is-the-difference-between-luigi-and-sapui5openui5\">What is the difference between Luigi and SAPUI5/OpenUI5?</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>You can find a detailed response to this question <a href=\"https://github.com/SAP/luigi/discussions/2809#discussioncomment-3137780\" rel=\"external\" target=\"_blank\">here</a>.</p>\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"where-can-i-download-luigi\">Where can I download Luigi?</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>The Luigi project can be found on <a href=\"https://github.com/SAP/luigi\" rel=\"external\" target=\"_blank\">GitHub</a>. Depending on the UI framework you use, there are different setups for Luigi. You can find more information here: <a href=\"/docs/application-setup\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">application setup</a>.</p>\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"does-luigi-provide-micro-frontend-to-micro-frontend-communication\">Does Luigi provide micro frontend to micro frontend communication?</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>Yes. The simplest way to configure this type of communication is unidirectional via <a href=\"/docs/luigi-client-api#linkmanager\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">linkmanager.navigate</a> where you can send additional data to the target micro frontend via <a href=\"/docs/luigi-client-api#withparams\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">withParams</a>.</p>\n      <p>Another possibility is to call <a href=\"/docs/luigi-client-api#linkmanager\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">linkmanager.navigate</a> with the <a href=\"/docs/luigi-client-api#navigate\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">preserveView</a> option set to <code>true</code>. This allows you to get a \"return value\" from the target micro frontend if it uses the <a href=\"/docs/luigi-client-api#goback\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">goBack</a> function. Lastly, you can use custom events to model your own communication functionality.</p>\n      <p>Of course, Luigi also allows you to communicate between the core application (Luigi Core) and the micro frontend (Luigi Client). See <a href=\"/docs/communication\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">custom messages</a> for more info.</p>\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"the-distributed-development-possibilities-seem-like-a-big-advantage-is-that-just-an-additional-benefit-from-using-luigi-or-was-that-a-main-factor-behind-it\">The distributed development possibilities seem like a big advantage; is that just an additional benefit from using Luigi, or was that a main factor behind it?</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>Development scalability was one of the main goals right from the beginning. There is a nice article on <a href=\"https://martinfowler.com/articles/micro-frontends.html\" rel=\"external\" target=\"_blank\">martinfowler.com</a> explaining the benefits of a micro frontend architecture in general. All the disadvantages of the iframe approach mentioned in the article are solved with Luigi.</p>\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"one-of-the-potential-issues-with-a-micro-frontend-architecture-is-styling-you-suggest-to-use-the-css-elements-of-fundamentals-to-solve-that-issue-is-that-correct\">One of the potential issues with a micro frontend architecture is styling. You suggest to use the CSS elements of Fundamentals to solve that issue. Is that correct?</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>It is crucial that all micro frontends in a solution follow the same design guidelines. Luigi's default UI styling is based on <a href=\"https://sap.github.io/fundamental-styles/\" rel=\"external\" target=\"_blank\">Fundamentals</a> but it can be customised. If you don’t want to use Fundamentals, but Bootstrap, Material, or something else instead, you need to re-style the Luigi view components according to your design guidelines or replace them with your own components completely.</p>\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"luigi-claims-to-be-technology-agnostic-are-you-referring-to-the-ui-framework-that-can-be-used-or-to-some-other-technology\">Luigi claims to be ‘technology agnostic’. Are you referring to the UI framework that can be used, or to some other technology?</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>The main point is that you can choose any base frontend technology you prefer, such as UI5, Angular, React, or Vue. You can even mix them in one solution. One micro frontend can use UI5, while another is written in Angular and Fundamentals. The only thing that matters is that HTML/JavaScript/CSS resources are provided and served via HTTPS in the end. The fact that a micro frontend is its own web application also means that you have full freedom regarding your development toolchain and CI/CD solutions, and the web server you want to use (such as Nginx, Apache, Tomcat, or Github Pages).</p>\n      <p>Last but not least, \"technology agnostic\" also means that there are no conflicts regarding any additional libraries you use, such as D3.js, Chart.js, or others. You can also avoid conflicts between different versions of the same library. Imagine a monolithic web application where a lot of teams are contributing and there has been a decision that Chart.js is the data visualization framework of choice, and then there is a need for updating the version, which potentially has breaking changes. In that case, all the teams have to be approached and asked if they use it, if their code is affected by the version update and, if so, when they can deliver the necessary changes. With Luigi, you don‘t have this management overhead at all.</p>\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"are-there-any-equivalents-of-luigi\">Are there any equivalents of Luigi?</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>Yes, there are several. Here are some of the most popular: <a href=\"https://www.mosaic9.org/\" rel=\"external\" target=\"_blank\">Mosaic</a>, <a href=\"https://github.com/CanopyTax/single-spa\" rel=\"external\" target=\"_blank\">Single-spa</a>, <a href=\"https://opencomponents.github.io/\" rel=\"external\" target=\"_blank\">OpenComponents</a>, <a href=\"https://www.piral.io\" rel=\"external\" target=\"_blank\">Piral</a>. Note that they are not 100% equivalents of Luigi!</p><!--\n      ### In what way is Luigi different from these mentioned framework/products?\n      \n      TBD\n      -->\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"is-luigi-already-being-used-within-any-products-or-is-it-still-too-new\">Is Luigi already being used within any products, or is it still too new?</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>Yes, it is already being used in production and close-to-production within SAP. For example in Kyma, SAP C/4HANA Cockpit, Context Driven Services, Konduit and Varkes. Outside of SAP, SAAS AG (partner) uses Luigi. Additionally, there are some POCs going on and we're supporting a few other customers and partners who want to start using Luigi soon.</p>\n    </dd>\n  </div>\n</dl>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"ui-questions\">UI questions</h2>\n<dl class=\"accordion-container\">\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"i-dont-want-to-use-the-default-fiori-fundamentals-style-how-can-i-style-luigi-differently-how-can-i-change-the-look-of-luigis-ui\">I don't want to use the default Fiori Fundamentals style. How can I style Luigi differently? How can I change the look of Luigi's UI?</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>There are a few options to do that at the moment:</p>\n      <ul>\n        <li>Use the Fundamental Styles theming capabilities which already allow you to achieve a lot by customizing the CSS variables. Find more info <a href=\"https://github.com/SAP/theming-base-content\" rel=\"external\" target=\"_blank\">here</a>.</li>\n        <li>Manually overwrite the styles where needed. The documentation page you are on right now can be used as an example, as it was developed with Luigi.</li>\n        <li>Turn off Luigi view components completely via the <a href=\"/docs/general-settings#hidenavigation\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">hideNavigation</a> parameter in the <code>settings:</code> section of your Luigi configuration. Then you can implement your own view components for header and navigation and use the <a href=\"/docs/luigi-core-api\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Luigi Core API</a> to set them up with Luigi.</li>\n        <li>You can use this simple example with a completely customized shell as a starting point:</li>\n      </ul>\n      <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n            <img src=\"/images/copy-clipboard-default.svg\">\n            <div class=\"popoverCopy\">Click to copy</div>\n          </div></a>\n        <pre class=\"canCopyCode\"><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n  &#x3C;head>\n    &#x3C;title>Luigi Custom UI&#x3C;/title>\n    &#x3C;link\n      rel=\"stylesheet\"\n      href=\"https://unpkg.com/@luigi-project/core/luigi.css\"\n    />\n    &#x3C;script src=\"https://unpkg.com/@luigi-project/core/luigi.js\">&#x3C;/script>\n    &#x3C;meta charset=\"utf-8\" />\n    &#x3C;meta\n      name=\"viewport\"\n      content=\"width=device-width, user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1\"\n    />\n  &#x3C;/head>\n​\n  &#x3C;body>\n    &#x3C;noscript>You need to enable JavaScript to run this app.&#x3C;/noscript>\n​\n    &#x3C;!-- CUSTOM APP LOGIC, Vanilla JS navigation implementation example -->\n    &#x3C;script>\n      /**\n       * entry function for custom app logic\n       */\n      function init() {\n        // react on route changes\n        window.onhashchange = updateNav; // there will be an abstraction on luigi side in the future, independent from routing strategy\n\n        // building up static root nodes in header\n        window.linkEl = document.querySelector(\".links\");\n        Luigi.getConfigValueAsync(\"navigation.nodes\").then((data) => {\n          data.forEach((element) => {\n            var anc = document.createElement(\"a\");\n            anc.innerHTML = Luigi.i18n().getTranslation(element.label);\n            anc.pathSegment = element.pathSegment;\n            anc.addEventListener(\"click\", () => {\n              Luigi.navigation().navigate(\"/\" + element.pathSegment);\n            });\n            linkEl.appendChild(anc);\n          });\n          updateNav();\n        });\n      }\n​\n      /**\n       * returns the currently selected branch in the navigation tree as an array, starting from root to leaf\n       * (currently this has to be done manually here, but we plan to expose that as part of luigi core api)\n       */\n      function getNodeBranch() {\n        let nodeTree = Luigi.getConfigValue(\"navigation.nodes\");\n        let segments = window.location.hash.split(\"/\");\n        console.log(segments);\n        let nodes = [];\n        let cnodes = nodeTree;\n        segments?.forEach((seg) => {\n          cnodes.forEach((node) => {\n            if (node.pathSegment === seg) {\n              cnodes = node.children;\n              nodes.push(node);\n            }\n          });\n        });\n        console.log(nodes);\n        return nodes;\n      }\n​\n      /**\n       * renders side navigation nodes\n       */\n      function renderNavNodes(container, nodes, parentPath, nodeBranch) {\n        nodes?.forEach((node) => {\n          let nodeCnt = document.createElement(\"div\");\n          nodeCnt.classList.add(\"myNode\");\n          let label = document.createElement(\"div\");\n          label.classList.add(\"myNodeLabel\");\n          if (nodeBranch?.length === 1 &#x26;&#x26; node === nodeBranch[0]) {\n            label.classList.add(\"selected\");\n          }\n          label.innerHTML = node.label;\n​\n          // possible targets\n          let path = node.link || parentPath + \"/\" + node.pathSegment;\n          let extLink = node.externalLink;\n​\n          label.onclick = (ev) => {\n            if (extLink) {\n              if (extLink.sameWindow) {\n                window.location.href = extLink.url;\n              } else {\n                window.open(extLink.url, \"_blank\");\n              }\n            } else {\n              console.log(\"nav to \", path);\n              Luigi.navigation().navigate(path);\n            }\n          };\n          nodeCnt.appendChild(label);\n          if (node.children) {\n            renderNavNodes(nodeCnt, node.children, path, nodeBranch.slice(1));\n          }\n​\n          container.appendChild(nodeCnt);\n        });\n      }\n​\n      /*\n       * updates navigation view state according to currently selected node\n       */\n      function updateNav() {\n        let nodeBranch = getNodeBranch();\n​\n        if (nodeBranch?.length > 0) {\n          // top nav selection\n          linkEl.querySelectorAll(\"a\").forEach((el) => {\n            el.classList.toggle(\n              \"selected\",\n              el.pathSegment === nodeBranch[0].pathSegment\n            );\n          });\n​\n          // left nav content\n          let sideNavCnt = document.querySelector(\".myLeftSideNav\");\n          sideNavCnt.innerHTML = \"\";\n​\n          renderNavNodes(\n            sideNavCnt,\n            nodeBranch[0].children,\n            \"/\" + nodeBranch[0].pathSegment,\n            nodeBranch.slice(1)\n          );\n​\n          document.body.classList.toggle(\n            \"leftNavHidden\",\n            !(nodeBranch[0].children?.length > 0) || !!nodeBranch[0].hideSideNav\n          );\n        }\n      }\n    &#x3C;/script>\n​\n    &#x3C;!-- CUSTOM APP LOGIC -->\n​\n    &#x3C;!-- CUSTOM STYLES -->\n    &#x3C;style>\n      .myHeader {\n        height: 50px;\n        background: linear-gradient(\n          90deg,\n          rgba(60, 69, 83, 1) 26%,\n          rgba(42, 183, 113, 1) 100%\n        );\n        padding: 10px;\n        font-size: large;\n        font-family: Arial, Helvetica, sans-serif;\n        color: white;\n        font-weight: bold;\n        position: relative;\n      }\n​\n      .myHeader img {\n        height: 32px;\n      }\n​\n      .myHeader > span {\n        vertical-align: top;\n        margin-top: 4px;\n        display: inline-block;\n        margin-left: 10px;\n      }\n​\n      .myHeader .links {\n        position: absolute;\n        right: 20px;\n        bottom: 0;\n      }\n​\n      .myHeader .links a,\n      .myHeader .links a:visited {\n        color: white;\n        margin: 5px;\n        padding: 5px;\n        text-decoration: none;\n        border: 1px solid white;\n        border-bottom: none;\n        border-top-left-radius: 5px;\n        border-top-right-radius: 5px;\n        background: #2ab771;\n      }\n​\n      .myHeader .links a.selected {\n        color: #2ab771;\n        background: white;\n      }\n​\n      html.luigi-app-in-custom-container [luigi-app-root] {\n        position: absolute;\n        top: 50px;\n        bottom: 0;\n        left: 260px;\n        right: 0;\n      }\n​\n      .leftNavHidden .myLeftSideNav {\n        display: none;\n      }\n​\n      html.luigi-app-in-custom-container .leftNavHidden [luigi-app-root] {\n        left: 0;\n      }\n​\n      .myLeftSideNav {\n        position: absolute;\n        overflow-y: auto;\n        top: 50px;\n        bottom: 0;\n        left: 0;\n        width: 259px;\n        background-color: rgba(60, 69, 83, 1);\n        color: white;\n        border-top: 1px solid #2ab771;\n      }\n​\n      .myNode {\n        margin: 15px;\n      }\n​\n      .myNodeLabel {\n        cursor: pointer;\n        font-family: Arial, Helvetica, sans-serif;\n      }\n​\n      .myNodeLabel:hover {\n        color: #2ab771;\n      }\n​\n      .myNodeLabel.selected {\n        font-weight: bold;\n        color: #2ab771;\n      }\n    &#x3C;/style>\n    &#x3C;!-- CUSTOM STYLES -->\n​\n    &#x3C;!-- LUIGI CONFIG -->\n    &#x3C;script>\n      Luigi.setConfig({\n        navigation: {\n          nodes: [\n            {\n              pathSegment: \"home\",\n              label: \"Home\",\n              hideFromNav: true,\n              children: [\n                {\n                  pathSegment: \"overview\",\n                  label: \"Overview\",\n                  icon: \"home\",\n                  viewUrl:\n                    \"https://fiddle.luigi-project.io/examples/microfrontends/multipurpose.html\",\n                  context: {\n                    title: \"Welcome to Luigi Fiddle!\",\n                    content:\n                      'Click on \"Modify Config\" at the bottom right and play around with your Luigi configuration',\n                  },\n                  children: [\n                    {\n                      pathSegment: \"l1\",\n                      label: \"L1\",\n                      icon: \"home\",\n                      viewUrl:\n                        \"https://fiddle.luigi-project.io/examples/microfrontends/multipurpose.html\",\n                      context: {\n                        title: \"L1\",\n                        content: \"\",\n                      },\n                      children: [\n                        {\n                          pathSegment: \"l2\",\n                          label: \"L2\",\n                          icon: \"home\",\n                          viewUrl:\n                            \"https://fiddle.luigi-project.io/examples/microfrontends/multipurpose.html\",\n                          context: {\n                            title: \"L2\",\n                            content: \"\",\n                          },\n                        },\n                        {\n                          pathSegment: \"empty\",\n                          label: \"Empty Page L2\",\n                          category: {\n                            label: \"Fundamental Demo Pages\",\n                            icon: \"dimension\",\n                            collapsible: true,\n                          },\n                          loadingIndicator: {\n                            enabled: false,\n                          },\n                          viewUrl:\n                            \"https://fiddle.luigi-project.io/examples/microfrontends/fundamental/empty-demo-page.html\",\n                        },\n                      ],\n                    },\n                    {\n                      pathSegment: \"empty\",\n                      label: \"Empty Page L1\",\n                      category: {\n                        label: \"Fundamental Demo Pages\",\n                        icon: \"dimension\",\n                        collapsible: true,\n                      },\n                      loadingIndicator: {\n                        enabled: false,\n                      },\n                      viewUrl:\n                        \"https://fiddle.luigi-project.io/examples/microfrontends/fundamental/empty-demo-page.html\",\n                    },\n                  ],\n                },\n                {\n                  pathSegment: \"empty\",\n                  label: \"Empty Page\",\n                  category: {\n                    label: \"Fundamental Demo Pages\",\n                    icon: \"dimension\",\n                    collapsible: true,\n                  },\n                  loadingIndicator: {\n                    enabled: false,\n                  },\n                  viewUrl:\n                    \"https://fiddle.luigi-project.io/examples/microfrontends/fundamental/empty-demo-page.html\",\n                },\n                {\n                  pathSegment: \"table\",\n                  label: \"Table\",\n                  category: \"Fundamental Demo Pages\",\n                  loadingIndicator: {\n                    enabled: false,\n                  },\n                  viewUrl:\n                    \"https://fiddle.luigi-project.io/examples/microfrontends/fundamental/table-demo-page.html\",\n                },\n                {\n                  pathSegment: \"tree\",\n                  label: \"Tree\",\n                  category: \"Fundamental Demo Pages\",\n                  loadingIndicator: {\n                    enabled: false,\n                  },\n                  viewUrl:\n                    \"https://fiddle.luigi-project.io/examples/microfrontends/fundamental/tree-demo-page.html\",\n                },\n                {\n                  pathSegment: \"ui5qs\",\n                  label: \"Quickstart\",\n                  category: {\n                    label: \"UI5 Demo Pages\",\n                    icon: \"sap-ui5\",\n                    collapsible: true,\n                  },\n                  viewUrl:\n                    \"https://fiddle.luigi-project.io/examples/microfrontends/ui5qs/\",\n                },\n                {\n                  pathSegment: \"ui5sc\",\n                  label: \"Shopping Cart\",\n                  category: \"UI5 Demo Pages\",\n                  hideSideNav: true,\n                  loadingIndicator: {\n                    enabled: false,\n                  },\n                  viewUrl:\n                    \"https://sapui5.netweaver.ondemand.com/test-resources/sap/m/demokit/cart/webapp/index.html\",\n                },\n              ],\n            },\n            {\n              pathSegment: \"foo\",\n              label: \"Some Action\",\n              icon: \"favorite-list\",\n              viewUrl:\n                \"https://fiddle.luigi-project.io/examples/microfrontends/multipurpose.html\",\n              hideSideNav: true,\n              context: {\n                title: \"Left navigation hidden\",\n                content:\n                  \"for pages needing more space or wanting to handle navigation internally\",\n              },\n            },\n            {\n              pathSegment: \"help\",\n              label: \"Help\",\n              icon: \"sys-help\",\n              viewUrl:\n                \"https://fiddle.luigi-project.io/examples/microfrontends/multipurpose.html\",\n              context: {\n                title: \"Help Section\",\n                content: \"Find some useful links on the left\",\n              },\n              children: [\n                {\n                  label: \"Back\",\n                  link: \"/\",\n                  icon: \"nav-back\",\n                },\n                {\n                  label: \"Luigi Github Page\",\n                  externalLink: {\n                    url: \"https://github.com/SAP/luigi\",\n                  },\n                },\n                {\n                  label: \"Fundamental Library\",\n                  externalLink: {\n                    url: \"https://sap.github.io/fundamental-styles\",\n                  },\n                },\n                {\n                  label: \"Fundamental Icons\",\n                  externalLink: {\n                    url:\n                      \"https://sap.github.io/fundamental-styles/components/icon.html\",\n                  },\n                },\n              ],\n            },\n          ],\n        },\n​\n        routing: {\n          useHashRouting: true,\n        },\n        settings: {\n          hideNavigation: true /* IMPORTANT, hides luigi shell */,\n        },\n        lifecycleHooks: {\n          luigiAfterInit: () => {\n            init(); /* IMPORTANT, calls init from custom app logic */\n          },\n        },\n      });\n    &#x3C;/script>\n​\n    &#x3C;!-- LUIGI CONFIG -->\n​\n    &#x3C;!-- HTML -->\n​\n    &#x3C;div class=\"myHeader\">\n      &#x3C;img src=\"https://fiddle.luigi-project.io/img/luigi.png\" />\n      &#x3C;span>ACME Corp&#x3C;/span>\n      &#x3C;div class=\"links\">&#x3C;/div>\n    &#x3C;/div>\n​\n    &#x3C;div class=\"myLeftSideNav\">&#x3C;/div>\n​\n    &#x3C;div luigi-app-root>&#x3C;/div>\n    &#x3C;!-- IMPORTANT -->\n​\n    &#x3C;!-- HTML -->\n  &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n      </div>\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"how-do-i-disable-the-luigi-loading-indicator--my-micro-frontend-page-is-stuck-on-a-loading-screen\">How do I disable the Luigi loading indicator? / My micro frontend page is stuck on a loading screen.</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>If you include micro frontends in Luigi which don't use Luigi Client, Luigi Core won't know when they are ready because there is no handshake. This can cause the page to remain loading indefinitely. In that case, you should disable the loading indicator using the <a href=\"https://docs.luigi-project.io/docs/navigation-parameters-reference/?section=loadingindicatorenabled\" rel=\"external\" target=\"_blank\">loadingIndicator.enabled</a> parameter in your configuration file.</p>\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"can-i-hide-the-luigi-default-sidetop-navigation-panel\">Can I hide the Luigi default side/top navigation panel?</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>To hide Luigi side navigation, use the <a href=\"https://docs.luigi-project.io/docs/navigation-parameters-reference/?section=hidesidenav\" rel=\"external\" target=\"_blank\">hideSideNav</a> parameter.</p>\n      <p>To hide the top navigation, you can use custom CSS, for example:</p>\n      <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n            <img src=\"/images/copy-clipboard-default.svg\">\n            <div class=\"popoverCopy\">Click to copy</div>\n          </div></a>\n        <pre class=\"canCopyCode\"><code class=\"language-css\">.fd-shellbar {\n    display: none;\n}\n.fd-app__sidebar, .iframeContainer  {\n    top: 0;\n}\n</code></pre>\n      </div>\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"can-i-have-more-than-2-levels-in-the-luigi-side-navigationcan-navigation-nodes-have-grandchildren\">Can I have more than 2 levels in the Luigi side navigation?/Can navigation nodes have grandchildren?</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>Currently, it is not possible for Luigi navigation nodes to have more than one level of children. However, the <a href=\"https://docs.luigi-project.io/docs/navigation-advanced?section=tab-navigation\" rel=\"external\" target=\"_blank\">tab navigation</a> can be used to place additional nodes on the page.</p>\n    </dd>\n  </div>\n</dl>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"navigation-and-routing-questions\">Navigation and routing questions</h2>\n<dl class=\"accordion-container\">\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"how-can-i-preserve-my-micro-frontends-routing-when-using-luigi\">How can I preserve my micro frontend's routing when using Luigi?</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>You can use <a href=\"/docs/luigi-client-setup\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Luigi Client API</a> in your micro frontend to achieve this without having to change your micro frontend's internal routing strategy. In addition you can tell Luigi to not interfere with the micro frontend's internal routing by using the <code>virtualTree</code> option on the micro frontend's node. You can find more information about it <a href=\"/docs/microfrontend-routing\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">here</a>.</p>\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"what-is-the-proper-way-for-luigi-core-to-react-to-navigation-from-luigi-client\">What is the proper way for Luigi Core to react to navigation from Luigi Client?</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>You can use the <a href=\"https://docs.luigi-project.io/docs/navigation-parameters-reference/?section=nodechangehook\" rel=\"external\" target=\"_blank\">nodeChangeHook</a> function to react to navigation inside Luigi Core.</p>\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"how-can-i-deactivate-luigi-routing\">How can I deactivate Luigi routing?</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>You can do that by using the <a href=\"https://docs.luigi-project.io/docs/navigation-parameters-reference/?section=skiproutingforurlpatterns\" rel=\"external\" target=\"_blank\">skipRoutingForUrlPatterns</a> parameter and setting it to <code>*</code>.</p>\n    </dd>\n  </div>\n</dl>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"other-questions\">Other questions</h2>\n<dl class=\"accordion-container\">\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"is-it-possible-to-have-more-than-one-micro-frontend-on-the-same-page\">Is it possible to have more than one micro frontend on the same page?</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>Yes, currently this is possible via <a href=\"https://docs.luigi-project.io/docs/luigi-client-api/?section=splitview\" rel=\"external\" target=\"_blank\">splitView</a> or <a href=\"https://docs.luigi-project.io/docs/web-component\" rel=\"external\" target=\"_blank\">Web Components</a>.</p>\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"can-i-place-a-micro-frontend-within-another-micro-frontend\">Can I place a micro frontend within another micro frontend?</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>Yes, you can use <a href=\"https://docs.luigi-project.io/docs/web-component\" rel=\"external\" target=\"_blank\">Web Components</a> in Luigi in order to achieve that. After creating a web component, you first need to enable it on the node level using the <a href=\"https://docs.luigi-project.io/docs/navigation-parameters-reference/?section=webcomponent\" rel=\"external\" target=\"_blank\">webcomponent</a> Luigi parameter. Then, you can use the <a href=\"https://docs.luigi-project.io/docs/navigation-parameters-reference/?section=compound\" rel=\"external\" target=\"_blank\">compound</a> feature to define a custom layout or configure nested web components.</p>\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"how-can-i-implement-a-custom-home-page-or-login-page-for-luigi\">How can I implement a custom home page or login page for Luigi?</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>One way would be to bind the Luigi app root to a specific <a href=\"https://docs.luigi-project.io/docs/luigi-ux-features?section=rendering-of-luigi-application-in-the-dom\" rel=\"external\" target=\"_blank\">dom element</a>. With a second dom element containing your home page views, you could control visibility of the two based on login status. For example:</p>\n      <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n            <img src=\"/images/copy-clipboard-default.svg\">\n            <div class=\"popoverCopy\">Click to copy</div>\n          </div></a>\n        <pre class=\"canCopyCode\"><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n&#x3C;head>\n\t&#x3C;title>Hello Luigi&#x3C;/title>\n    &#x3C;link rel='stylesheet' href='https://unpkg.com/@luigi-project/core@1.7.0/luigi.css'>\n    &#x3C;script src='https://unpkg.com/@luigi-project/core@1.7.0/luigi.js'>&#x3C;/script>\n    &#x3C;meta charset=\"utf-8\">\n&#x3C;/head>\n&#x3C;body>\n    &#x3C;noscript>You need to enable JavaScript to run this app.&#x3C;/noscript>\n    &#x3C;style>\n        html, body {\n            height: 100%;\n        }\n        .homepage-container {\n            text-align: center;\n            display: none;\n            width: 100%;\n            height: 100%;\n        }\n        .luigi-container {\n            width: 100%;\n            height: 100%;\n        }\n        .homepage .homepage-container {\n            display: block;\n        }\n        .homepage .luigi-container {\n            display: none;\n        }\n    &#x3C;/style>\n    &#x3C;div class=\"homepage-container\">\n        &#x3C;h1>HOMEPAGE&#x3C;/h1>\n        &#x3C;button onclick=\"window.loggedIn=true; checkLogin()\">Login&#x3C;/button>\n    &#x3C;/div>\n    &#x3C;div class=\"luigi-container\" luigi-app-root>&#x3C;/div>\n    &#x3C;script>\n        function checkLogin() {\n            document.body.classList.toggle('homepage', !window.loggedIn);\n        }\n        checkLogin();\n        Luigi.setConfig({\n        navigation: {\n            nodes: [{\n                pathSegment: 'home',\n                label: 'h',\n                hideFromNav: true,\n                children: [{\n                    pathSegment: 'overview',\n                    label: 'Overview',\n                    icon: 'home',\n                    viewUrl: 'https://fiddle.luigi-project.io/examples/microfrontends/multipurpose.html',\n                    context: {\n                        title: 'Welcome to Luigi Fiddle!',\n                        content: 'Click on \"Modify Config\" at the bottom right and play around with your Luigi configuration'\n                    }\n                }]\n            }]\n        },\n        routing: {\n            useHashRouting: true\n        },\n        settings: {\n            responsiveNavigation: 'semiCollapsible',\n            header: {\n                title: 'Luigi Example'\n            }\n        }\n    });\n    &#x3C;/script>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n      </div>\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"where-can-i-find-the-source-code-for-luigi-fiddle\">Where can I find the source code for Luigi Fiddle?</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>Luigi is an open-source project. You can find the source code on our <a href=\"https://github.com/SAP/luigi/tree/main/website/fiddle\" rel=\"external\" target=\"_blank\">GitHub repository</a>.</p>\n    </dd>\n  </div>\n</dl>\n</section></section></section>"}},{"name":"framework-support-libraries.md","shortName":"framework-support-libraries","contents":{"data":{},"messages":[],"history":[],"cwd":"/Users/I529989/Documents/SAP/32-luigi/website/docs","value":"<section class=\"h0Wrapper headingWrapper\">\n<section class=\"h1Wrapper headingWrapper\"><h1 id=\"luigi-client-framework-support-libraries\">Luigi Client framework support libraries</h1>\n<p>On this page, you can find more information about Luigi Client support libraries for web application frameworks.</p>\n<ul>\n  <li><a href=\"/docs/framework-support-libraries#angular-support-library\" onclick=\"navigateInternal(event, this)\">Angular Support Library</a>\n    <ul>\n      <li><a href=\"/docs/framework-support-libraries#how-to-use-the-library\" onclick=\"navigateInternal(event, this)\">How to use the library</a></li>\n      <li><a href=\"/docs/framework-support-libraries#features\" onclick=\"navigateInternal(event, this)\">Features</a></li>\n    </ul>\n  </li>\n  <li><a href=\"/docs/framework-support-libraries#ui5-support-library\" onclick=\"navigateInternal(event, this)\">UI5 Support Library</a>\n    <ul>\n      <li><a href=\"/docs/framework-support-libraries#how-to-use-the-library-1\" onclick=\"navigateInternal(event, this)\">How to use the library</a></li>\n      <li><a href=\"/docs/framework-support-libraries#features-1\" onclick=\"navigateInternal(event, this)\">Features</a></li>\n    </ul>\n  </li>\n</ul>\n<section class=\"h2Wrapper headingWrapper\"><h2 id=\"angular-support-library\">Angular Support Library</h2>\n<p>The <a href=\"https://github.com/SAP/luigi/tree/main/client-frameworks-support/client-support-angular/projects/client-support-angular\" rel=\"external\" target=\"_blank\">ClientSupportAngular</a> library provides several features which make it easier to run your Angular application inside the Luigi micro frontend framework.</p>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"how-to-use-the-library\">How to use the library</h3>\n<ol>\n  <li>Import the library in the <code>package.json</code>:</li>\n</ol>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">npm install @luigi-project/client-support-angular -s\n</code></pre>\n</div>\n<ol start=\"2\">\n  <li>Once the library is imported and saved in your Angular project, you need to import the module <code>LuigiAngularSupportModule</code>:</li>\n</ol>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">imports: [\n  ........\n  ,LuigiAngularSupportModule\n],\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"features\">Features</h3>\n<p>These are the features provided by the library:</p>\n<ul>\n  <li><a href=\"/docs/framework-support-libraries#luigicontextservice\" onclick=\"navigateInternal(event, this)\">LuigiContextService</a> - allows you to observe context changes in Luigi.</li>\n  <li><a href=\"/docs/framework-support-libraries#preload-component\" onclick=\"navigateInternal(event, this)\">Preload component</a> - an empty Angular component that can be used to build a preload route. See also <a href=\"https://docs.luigi-project.io/docs/navigation-parameters-reference/?section=viewgroupsettings\" rel=\"external\" target=\"_blank\">preloadUrl</a>.</li>\n  <li><a href=\"/docs/framework-support-libraries#luigiautoroutingservice\" onclick=\"navigateInternal(event, this)\">LuigiAutoRoutingService</a> - enables the synchronization of Angular routes with Luigi. It contains the following elements:\n    <ul>\n      <li><a href=\"/docs/framework-support-libraries#luigiroutestrategy\" onclick=\"navigateInternal(event, this)\">LuigiRouteStrategy</a> - Luigi's implementation of an Angular <a href=\"https://angular.io/api/router/RouteReuseStrategy\" rel=\"external\" target=\"_blank\">RouteReuseStrategy</a>.</li>\n      <li><a href=\"/docs/framework-support-libraries#autorouting-for-modals\" onclick=\"navigateInternal(event, this)\">AutoRouting for modals</a> - synchronizes Angular modals with Luigi.</li>\n    </ul>\n  </li>\n  <li><a href=\"/docs/framework-support-libraries#luigimockmodule\" onclick=\"navigateInternal(event, this)\">LuigiMockModule</a> - an Angular module that listens to Luigi Client calls and messages and sends a mocked response back. See also <a href=\"/docs/luigi-testing-utilities\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">LuigiMockUtil</a>.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"luigicontextservice\">LuigiContextService</h3>\n<p>You can inject this service inside your Angular items in order to:</p>\n<ul>\n  <li>Get the current (latest) <a href=\"/docs/navigation-parameters-reference#context\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">context</a> that we received from Luigi Core</li>\n  <li>Provide an <code>Observable&#x3C;Context></code> where through subscribing, you can get any context change</li>\n</ul>\n<p>\n  <strong>LuigiContextService</strong> is an abstract class. Its implementation is in the <strong>LuigiContextServiceImpl</strong> class.\n  If you need to change or extend the implementation, you can easily create a new class extending <strong>LuigiContextServiceImpl</strong>:\n</p>\n<p>In this class, we added the possibility to \"reuse\" a component and not initialize it every time you load it (as it could be useful to keep component state.)</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">export class YourContextService extends  LuigiContextServiceImpl {\n    ....\n}\n\n</code></pre>\n</div>\n<p>Inside your module, redefine the provider:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">providers: [\n   {\n       provide: LuigiContextService,\n       useClass: YourContextService\n   }\n]\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"preload-component\">Preload component</h3>\n<p>In your Angular route configuration, you can add in any of the following preload components:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">{path: 'luigi-client-support-preload',component: Sample1Component,data: { fromVirtualTreeRoot: true }}\n{path: 'luigi-client-support-preload',component: Sample2Component,data: { luigiRoute: '/home/sample2' }}\n{path: 'luigi-client-support-preload',component: Sample2Component,data: { luigiRoute: '/home/sample2', fromContext: true}}\n{path: 'luigi-client-support-preload',component: Sample2Component,data: { luigiRoute: '/home/sample2', fromContext: 'localContext'}}\n</code></pre>\n</div>\n<p>Under the hood, these components make use of Luigi's <a href=\"/docs/luigi-client-api#linkmanager\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">linkManager</a> in the following way:</p>\n<p>For <code>data: { fromVirtualTreeRoot: true }</code>, once we load Sample1Component, this Luigi Client API method is called:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\"> luigiClient.linkManager().fromVirtualTreeRoot().withoutSync().navigate({route url});\n</code></pre>\n</div>\n<p>For <code>data: { luigiRoute: '/home/sample2' }</code>, this Luigi Client API method is called:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\"> luigiClient.linkManager().withoutSync().navigate(data.luigiRoute);\n</code></pre>\n</div>\n<p>For <code>data: { luigiRoute: '/home/sample2', fromContext: true }</code>, this Luigi Client API method is called:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\"> luigiClient.linkManager().fromClosestContext().withoutSync().navigate(data.luigiRoute);\n</code></pre>\n</div>\n<p>For <code>data: { luigiRoute: '/home/sample2', fromContext: 'localContext' }</code>, this Luigi Client API method is called:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\"> luigiClient.linkManager().fromContext('localContext').withoutSync().navigate(data.luigiRoute);\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"luigiautoroutingservice\">LuigiAutoRoutingService</h3>\n<p>This service cannot be used directly, but it provides useful features on how to synchronize your Angular application with Luigi navigation.</p>\n<p>For example, when the user navigates through different pages within a micro frontend, you can use this feature to update Luigi accordingly. (You can also find more information about this process in the <a href=\"/docs/microfrontend-routing\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">micro frontend routing</a> document.)</p>\n<section class=\"h4Wrapper headingWrapper\"><h4 id=\"luigiroutestrategy\">LuigiRouteStrategy</h4>\n<p>\n  To use <strong>LuigiAutoRoutingService</strong>, this library defines a new <strong>RouteReuseStrategy</strong> named <strong>LuigiRouteStrategy</strong>.\n  If you need to define your own <strong>RouteReuseStrategy</strong>, you can extend <strong>LuigiRouteStrategy</strong> by overriding it in this way:\n</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">export class YourRouteStrategy extends LuigiRouteStrategy {\n\n   retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle {\n       super.retrieve(route);\n       // Your code\n   }\n\n}\n</code></pre>\n</div>\n<p>and define the provider:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">{\n     provide: RouteReuseStrategy,\n     useClass: YourRouteStrategy\n}\n</code></pre>\n</div>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"autorouting-for-modals\">AutoRouting for modals</h4>\n<p>Similarly to other components, modals which have a <a href=\"https://docs.luigi-project.io/docs/navigation-parameters-reference/?section=modalpathparam\" rel=\"external\" target=\"_blank\">modalPathParam</a> can trigger a change in the URL when navigation occurs. In the Angular router of your Luigi app, you can enable auto-routing for modals using these parameters:</p>\n<ul>\n  <li><code>updateModalDataPath</code> - if set to <code>true</code>, the URL will be updated automatically every time the user navigates within a modal.</li>\n  <li><code>addHistoryEntry</code> - if set to <code>true</code>, changes in the modal will also add a history element in the history of the tab.</li>\n</ul>\n<p>For example:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">{\n    path: 'luigi-client-support-preload',\n    component: LuigiPreloadComponent,\n    data: { updateModalDataPath: true, addHistoryEntry: true }\n  }\n</code></pre>\n</div>\n</section></section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"luigimockmodule\">LuigiMockModule</h3>\n<p>\n  In the normal Luigi workflow, messages coming from Luigi Client to Luigi Core are processed on the Core and a proper response is sent back. However, in many systems where testing of micro frontends standalone is a necessity, the absence of Luigi Core to send back needed responses to Client micro frontends becomes a case of high coupling. To remove this coupling, we introduce <strong>LuigiMockModule</strong> for <strong>Angular</strong> applications. This module is attached to the start of your application where it intercepts all the Client calls and sends a mocked Core response back. This enables users to test their micro frontends standalone without depending on the Core.\n  To use <strong>LuigiMockModule</strong>, simply add it to the list of imports of your applications entry point. A good practice is to include it in the main testing module of your application as given in the example below:\n</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">import {LuigiMockModule} from '@luigi-project/client-support-angular';\n\n/**\n* This module is used to run the application for e2e tests.\n*/\n@NgModule({\n imports: [\n   AppModule,\n   LuigiMockModule,\n ],\n bootstrap: [AppComponent]\n})\nexport class AppTestingModule {}\n\n</code></pre>\n</div>\n<p>To make mocking of Luigi Core easier, you can use a range of utility functions and assertions. Our lightweight <a href=\"/docs/luigi-testing-utilities\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Luigi Testing Utilities</a> library provides the necessary basic utility functions needed for your application.</p>\n</section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"ui5-support-library\">UI5 Support Library</h2>\n<p>\n  ​\n  The <a href=\"https://github.com/SAP/luigi/tree/main/client-frameworks-support/client-support-ui5\" rel=\"external\" target=\"_blank\">Luigi Client UI5 Support Library</a> offers a set <a href=\"/docs/framework-support-libraries#features\" onclick=\"navigateInternal(event, this)\">features</a> which make it easier to use the Luigi micro frontend framework with UI5 applications.<br>​\n</p>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"how-to-use-the-library-1\">How to use the library</h3>\n<ol>\n  <li>Include the following in your <code>index.html</code> file in order to add <code>ComponentSupport</code> and allow <code>data-sap-ui-frameOptions</code>:</li>\n</ol>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">&#x3C;script id=\"sap-ui-bootstrap\" src=\"resources/sap-ui-core.js\" data-sap-ui-resourceroots='{\n\t\t\t\t\"luigi.ui5-demoapp\": \"./\"\n\t\t\t}' data-sap-ui-oninit=\"module:sap/ui/core/ComponentSupport\" data-sap-ui-compatVersion=\"edge\"\n\t\tdata-sap-ui-async=\"true\" data-sap-ui-frameOptions=\"allow\" data-sap-ui-theme=\"sap_horizon\"\n\t\tdata-sap-ui-xx-waitForTheme=\"true\" data-sap-ui-xx-supportedLanguages=\"en,de\">\n&#x3C;/script>\n</code></pre>\n</div>\n<ol start=\"2\">\n  <li>Install the library either by using <a href=\"/docs/framework-support-libraries#installing-via-npm\" onclick=\"navigateInternal(event, this)\">npm</a> (this option requires <a href=\"https://sap.github.io/ui5-tooling/stable/\" rel=\"external\" target=\"_blank\">UI5 Tooling</a>), or <a href=\"/docs/framework-support-libraries#installing-manually\" onclick=\"navigateInternal(event, this)\">manually</a>.</li>\n</ol>\n<section class=\"h4Wrapper headingWrapper\"><h4 id=\"installing-via-npm\">Installing via npm</h4>\n<p>​</p>\n<ol>\n  <li>Import the library in your <code>package.json</code> file:</li>\n</ol>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">npm install @luigi-project/client-support-ui5\n</code></pre>\n</div>\n<ol start=\"2\">\n  <li>\n    If your project is not set up for use with the <a href=\"https://sap.github.io/ui5-tooling/stable/\" rel=\"external\" target=\"_blank\">UI5 Tooling</a> yet, you need to install it. It is required to consume the Luigi Client UI5 Support Library.\n    ​\n  </li>\n  <li>In the last step, you need to register the library in your <code>Component.js</code> file.</li>\n</ol>\n<p>Using UI5 tooling:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">sap.ui.define([\n\t\"sap/ui/core/UIComponent\",\n    ....\n\t\"@luigi-project/client-support-ui5/ui5-support-lib\",\n], function (UIComponent,...., Ui5SupportLib) {\n    return UIComponent.extend(\"com.sap.luigiclient.Component\", {\n\t\t....\n\t\tinit: function () {\n\t\t\t.....\t\t\t\n\t\t\t// connect client-support-ui5 lib to the application\n\t\t\tUi5SupportLib.connectTo(this);\n            \n            this.LuigiClient = Ui5SupportLib.LuigiClient;\n​\n\t\t\tthis.getRouter().initialize();\n\t\t},\n</code></pre>\n</div>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"installing-manually\">Installing manually</h4>\n<ol>\n  <li>\n    <p>Create a <code>lib</code> folder under the <code>webapp</code> directory and put the <a href=\"https://www.npmjs.com/package/@luigi-project/client?activeTab=code\" rel=\"external\" target=\"_blank\">luigi-client.js</a> and <a href=\"https://www.npmjs.com/package/@luigi-project/client-support-ui5?activeTab=code\" rel=\"external\" target=\"_blank\">ui5-support-lib.js</a> into it.</p>\n  </li>\n  <li>\n    <p>Use the <a href=\"https://openui5.hana.ondemand.com/#/api/sap.ui.loader/methods/sap.ui.loader.config\" rel=\"external\" target=\"_blank\">shim mechanism</a> to make Luigi Client available in your UI5 application using <code>sap.ui.loader.config</code> (the Luigi Client UI5 Support Library consumes Luigi Client via the name <code>@luigi-project/client/luigi-client</code>):</p>\n  </li>\n</ol>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">sap.ui.loader.config({\n\t// provide dependency and export metadata for non-UI5 modules\n\tpaths: {\n\t\t\"@luigi-project/client/luigi-client\": \"lib/luigi-client\"\n\t},\n    shim:{\n        \"@luigi-project/client/luigi-client\": {\n            amd: false,\n            exports: 'LuigiClient'\n        }\n    }\n});\nsap.ui.define([\n\t\"sap/ui/core/UIComponent\",\n\t...\n\t\"./lib/LuigiUI5SupportLib\"\n], function (UIComponent, ..., LuigiUI5SupportLib) {\n\t\"use strict\";\n    return UIComponent.extend(\"com.sap.luigiclient.Component\", {\n\t\t....\n\t\tinit: function () {\n\t\t\t.....\t\t\t\n\t\t\t// connect client-support-ui5 lib to the application\n\t\t\tUi5SupportLib.connectTo(this);\n            \n            this.LuigiClient = Ui5SupportLib.LuigiClient;\n​\n\t\t\tthis.getRouter().initialize();\n\t\t},\n</code></pre>\n</div>\n<p>In addition, the <a href=\"https://docs.luigi-project.io/docs/luigi-client-api\" rel=\"external\" target=\"_blank\">Luigi Client API</a> is available through the Luigi Client UI5 Support Library. Luigi Client can be used in a controller in this way:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">const alertSettings = {\n    ....\n}\nthis.getOwnerComponent().LuigiClient.uxManager().showAlert(alertSettings).then(() => {\n          // Logic to execute when the alert is dismissed\n        });\n</code></pre>\n</div>\n<p>​</p>\n</section></section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"features-1\">Features</h3>\n<p>\n  ​\n  The main features offered by the Luigi Client UI5 support library are:\n</p>\n<ul>\n  <li><a href=\"/docs/framework-support-libraries#context\" onclick=\"navigateInternal(event, this)\">Context</a> - allows you to receive a context object from Luigi</li>\n  <li><a href=\"/docs/framework-support-libraries#auto-routing\" onclick=\"navigateInternal(event, this)\">Auto routing</a> - provides an easier way to keep your UI5 app and Luigi routing in sync</li>\n  <li><a href=\"/docs/framework-support-libraries#auto-routing-for-modals\" onclick=\"navigateInternal(event, this)\">Auto routing for modals</a> - enables synchronization of routing between Luigi Core and a modal</li>\n  <li>\n    <a href=\"/docs/framework-support-libraries#preload\" onclick=\"navigateInternal(event, this)\">Preload</a> - special view that can help you when using Luigi's <a href=\"https://docs.luigi-project.io/docs/navigation-advanced?section=view-groups\" rel=\"external\" target=\"_blank\">viewGroups</a> feature\n    ​\n  </li>\n</ul>\n<section class=\"h4Wrapper headingWrapper\"><h4 id=\"context\">Context</h4>\n<p>\n  ​\n  The current (latest) context object that the UI5 application receives from Luigi Core is available on the UI5 model.\n  ​\n  The context object is accessible in the controller by calling:\n</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">this.getView().getModel('$luigiCtx').getData()\n</code></pre>\n</div>\n<p>\n  ​\n  In a view file, it can be used like this:\n</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">&#x3C;Button\n    text=\"{$luigiCtx>/&#x3C;CONTEXT_PROPERTY_KEY>}\"/>\n</code></pre>\n</div>\n<p>​</p>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"auto-routing\">Auto routing</h4>\n<p>\n  ​\n  With the auto routing feature, we provide an easy way of synchronizing UI5 application routes with Luigi navigation. In the <code>routes</code> definition of the manifest file, you can add these attributes in the <code>data</code> object:\n  ​\n</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">{\n    \"pattern\": \"\",\n    \"name\": \"products\",\n    \"target\": \"products\",\n    \"data\": {\n        \"luigiRoute\": \"/app1/products\"\n    }\n},\n{\n    \"pattern\": \"settings/userSettings/developer\",\n    \"name\": \"developer\",\n    \"target\": \"developer\",\n    \"data\": {\n        \"fromContext\": \"usersettings\",\n        \"luigiRoute\": \"developer\"\n    }\n},\n{\n    \"pattern\": \"settings\",\n    \"name\": \"settings\",\n    \"target\": \"settings\",\n    \"data\": {\n        \"fromVirtualTreeRoot\": true\n    }\n},\n{\n    \"pattern\": \"products/{productId}/sites/{siteId}\",\n    \"name\": \"site\",\n    \"target\": \"site\",\n    \"data\": {\n        \"fromVirtualTreeRoot\": {\n            \"truncate\": \"*/sites\"\n        }\n    }\n}\n</code></pre>\n</div>\n<p>\n  ​\n  If data <code>\"data\": {\"luigiRoute\": \"/app1/products\"}</code> is defined on a route, Luigi Client will be called with:\n</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">    luigiClient.linkManager().withoutSync().navigate(data.luigiRoute);\n</code></pre>\n</div>\n<p>with <code>data: { fromVirtualTreeRoot: true }</code>, Luigi Client API will be called in this way:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">    luigiClient.linkManager().fromVirtualTreeRoot().withoutSync().navigate({route url});\n</code></pre>\n</div>\n<p>\n  Additionally, it is possible to truncate the URL. Everything before and including the specified value is truncated from the URL.\n  For example, all but <code>/{sitesId}</code> are removed from the URL with the above configuration.\n  ​\n  More information about Luigi's linkManager can be found <a href=\"https://docs.luigi-project.io/docs/luigi-client-api/?section=linkmanager\" rel=\"external\" target=\"_blank\">here</a>.\n  ​\n  ​\n  ​\n</p>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"auto-routing-for-modals\">Auto routing for modals</h4>\n<p>\n  ​\n  Similarly to other views, modals which have a <a href=\"https://docs.luigi-project.io/docs/navigation-parameters-reference/?section=modalpathparam\" rel=\"external\" target=\"_blank\">modalPathParam</a> which can trigger a change in the URL when navigation occurs. In the UI5 router of your Luigi app, you can enable auto-routing for modals using these parameters:\n</p>\n<ul>\n  <li><code>updateModalDataPath</code> - if set to <code>true</code>, the URL will be updated automatically every time the user navigates within a modal.</li>\n  <li>\n    <code>addHistoryEntry</code> - if set to <code>true</code>, changes in the modal will also add a history element in the history of the tab.\n    ​\n    For example:\n  </li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">{\n    \"pattern\": \"products/{productId}\",\n    \"name\": \"product\",\n    \"target\": \"product\",\n    \"data\": {\n        \"updateModalDataPath\": true,\n        \"addHistoryEntry\": true,\n        \"luigiRoute\":'/products/:productId'\n    }\n}\n</code></pre>\n</div>\n<p>​</p>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"preload\">Preload</h4>\n<p>\n  ​\n  If you are using <a href=\"https://docs.luigi-project.io/docs/navigation-advanced/?section=viewgroupsettings\" rel=\"external\" target=\"_blank\">view groups</a> in your Luigi configuration, this library provides a view which you can use as a Luigi <code>preloadUrl</code> attribute in your configuration.\n  The route to this view is <code>https://your.domain.name/__luigi_preload_view__</code>\n</p>\n</section></section></section></section></section>"}},{"name":"general-settings.md","shortName":"general-settings","contents":{"data":{},"messages":[],"history":[],"cwd":"/Users/I529989/Documents/SAP/32-luigi/website/docs","value":"<section class=\"h0Wrapper headingWrapper\">\n<section class=\"h1Wrapper headingWrapper\"><h1 id=\"general-settings\">General settings</h1><!-- add-attribute:class:success -->\n<blockquote class=\"success\">\n  <p><strong>TIP:</strong> For learning and testing purposes, use the <a href=\"https://fiddle.luigi-project.io\" rel=\"external\" target=\"_blank\">Luigi Fiddle</a> page where you can configure a sample Luigi application.</p>\n</blockquote>\n<p>The configuration file contains a section called <strong>Settings</strong> where you can configure additional Luigi options.</p>\n<dl class=\"accordion-container\">\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"settings-code-example\">Settings code example</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>This is an example of how settings parameters can be used:</p>\n      <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n            <img src=\"/images/copy-clipboard-default.svg\">\n            <div class=\"popoverCopy\">Click to copy</div>\n          </div></a>\n        <pre class=\"canCopyCode\"><code class=\"language-javascript\">settings: {\n  hideNavigation: false\n  backdropDisabled : false,\n  header: {  object / function / Promise\n    logo: 'path/to/image.png',\n    title: 'Luigi Demo',\n    favicon: 'path/to/favicon.ico'\n  },\n  featureToggles : {\n    queryStringParam: 'ft'\n  },\n  sideNavFooterText: 'MyLovelyApp 1.0.0',\n  sideNavCompactMode: false,\n  customTranslationImplementation: () => {\n    return {\n      getTranslation: (key, interpolations, locale) => {\n        return translatedText;\n      }\n    };\n  },\n  customSandboxRules: ['allow-downloads-without-user-activation'],\n  allowRules: ['microphone'],\n  appLoadingIndicator: {\n    hideAutomatically: true\n  },\n  thirdPartyCookieCheck = {\n    //thirdPartyCookieScriptLocation: 'https://domain/init.html',\n    thirdPartyCookieErrorHandling: () => {\n      const alert = {\n        text: 'Third Party Cookies are not enabled. Please check your browser settings.',\n        type: 'warning'\n      };\n      Luigi.ux().showAlert(alert);\n    }\n  },\n  theming = {\n    themes: () => [\n      { id: 'light', name: 'Light Theme' },\n      { id: 'dark', name: 'Dark Theme' }\n    ],\n    defaultTheme: 'light'\n  }\n}\n</code></pre>\n      </div>\n    </dd>\n  </div>\n</dl>\n<p>Below is a list of the parameters you can use in the <code>settings:</code> Luigi configuration section.</p>\n<ul>\n  <li><a href=\"/docs/general-settings#general-parameters\" onclick=\"navigateInternal(event, this)\">General parameters</a></li>\n  <li><a href=\"/docs/general-settings#third-party-cookies-support-check\" onclick=\"navigateInternal(event, this)\">Third-party cookies support check</a></li>\n</ul>\n<section class=\"h2Wrapper headingWrapper\"><h2 id=\"general-parameters\">General parameters</h2>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"backdropdisabled\">backdropDisabled</h3>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: prevents the backdrop layer from covering the top and left navigation when showing modal windows.</li>\n  <li><strong>default</strong>: by default, the backdrop is set to <code>true</code>.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"burgertooltip\">burgerTooltip</h3>\n<ul>\n  <li><strong>type</strong>: boolean/string</li>\n  <li>\n    <strong>description</strong>: allows to set and customize a tooltip for the burger, which will be rendered if <strong>responsiveNavigation</strong> is set to <code>simple</code> or <code>Fiori3</code>. You can set it to <code>true</code>. In that case, the default values <code>Expand navigation</code> and <code>Collapse navigation</code> will be rendered.\n    It is also possible to customize the values. In that case <strong>burgerTooltip</strong> will be an object with definable properties.\n  </li>\n  <li><strong>example</strong>:</li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">burgerTooltip = {\n    navExpanded: 'Collapse navigation',\n    navCollapsed: 'Expand navigation'\n  };\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"customsandboxrules\">customSandboxRules</h3>\n<ul>\n  <li><strong>type</strong>: array</li>\n  <li><strong>description</strong>: an array of custom rules for the content in the iframe. You can extend the <a href=\"https://github.com/SAP/luigi/blob/af1deebb392dcec6490f72576e32eb5853a894bc/core/src/utilities/helpers/iframe-helpers.js#L140\" rel=\"external\" target=\"_blank\">Luigi default sandbox rules</a> by adding further rules.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"customtranslationimplementation\">customTranslationImplementation</h3>\n<ul>\n  <li><strong>type</strong>: object/function returning an object</li>\n  <li><strong>description</strong>: provides a custom localization implementation. It can be an object or a function returning an object. This object must provide the <strong>getTranslation</strong> function as property:</li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">{\n  getTranslation: (key, interpolations, locale) => {\n    // should return translation of the 'key' in the 'locale' or current locale\n  }\n}\n</code></pre>\n</div>\n<p>Take a look at our <a href=\"/docs/i18n\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">i18n</a> section for an implementation suggestion.</p><!-- add-attribute:class:warning -->\n<blockquote class=\"warning\">\n  <p><strong>NOTE:</strong> You can translate Luigi internal messages by providing translation for <a href=\"https://github.com/SAP/luigi/blob/main/core/src/utilities/defaultLuigiTranslationTable.js\" rel=\"external\" target=\"_blank\">these keys</a>.</p>\n</blockquote>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"hidenavigation\">hideNavigation</h3>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: disables Luigi's default out-of-the-box navigation when set to <code>true</code>. This means that top, side, and tab navigation is no longer visible and you can implement your own navigation UI.</li>\n  <li><strong>default</strong>: by default, the parameter is set to <code>false</code>, which means the navigation is enabled.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"headerlogo\">header.logo</h3>\n<ul>\n  <li><strong>type</strong>: icon</li>\n  <li><strong>description</strong>: defines the top left navigation logo. It has a fixed height of 28px.</li>\n  <li><strong>example</strong>:</li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code> header: {  object / function / Promise\n    logo: 'path/to/image.png'\n  },\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"headeralttext\">header.altText</h3>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: adds the HTML <code>alt</code> attribute to the logo image.</li>\n  <li><strong>example</strong>:</li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code> header: {  object / function / Promise\n    logo: 'path/to/image.png', \n    altText: 'alternative text'\n  },\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"headertitle\">header.title</h3>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: defines the top left navigation title.</li>\n  <li><strong>example</strong>:</li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code> header: {  object / function / Promise\n    title: 'Luigi Demo'\n  },\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"headerfavicon\">header.favicon</h3>\n<ul>\n  <li><strong>type</strong>: icon</li>\n  <li><strong>description</strong>: defines the favicon. It requires a standard favicon file with the <code>.ico</code> extension, and 16x16px or 32x32px dimensions.</li>\n  <li><strong>example</strong>:</li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code> header: {  object / function / Promise\n    favicon: 'path/to/favicon.ico'\n  },\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"headerresponsiveshellbarpaddings\">header.responsiveShellbarPaddings</h3>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: based on the browser window size, a responsive padding will be applied to the Shellbar Component when set to <code>true</code>.</li>\n  <li><strong>default</strong>: by default, the parameter is set to <code>false</code>, meaning that padding for the Shellbar Component will stay the same as inherited from the <code>.fd-shellbar</code> class.</li>\n  <li><strong>example</strong>:</li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code> header: {  object / function / Promise\n   responsiveShellbarPaddings: true\n  },\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"headerdisabled\">header.disabled</h3>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: disables Luigi's default out-of-the-box top navigation when set to <code>true</code>. This means that top navigation is hidden and only the left-side navigation is visible.</li>\n  <li><strong>default</strong>: by default, the parameter is set to <code>false</code>, which means the navigation is enabled.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"responsivenavigation\">responsiveNavigation</h3>\n<ul>\n  <li>\n    <strong>description</strong>: allows customizing the navigation display settings. For example, you can define a button which shows or completely hides the left navigation, or a button which collapses the navigation to only show the icons.\n    You can set the following values:\n    <ul>\n      <li><code>simple</code> displays the button on the left side of the top navigation regardless of the browser window´s size.</li>\n      <li><code>simpleMobileOnly</code> displays the button on the left side of the top navigation when the browser window is narrower than <code>600px</code>.</li>\n      <li><code>semiCollapsible</code> displays the arrow button at the bottom of the left side navigation. Once you click the button, the navigation shows up or collapses.</li>\n      <li><code>Fiori3</code> displays the button on the left side of the top navigation. Once you click the button, the navigation shows up or collapses.</li>\n    </ul>\n  </li>\n  <li><strong>default</strong>: if you don't specify any value for <strong>responsiveNavigation</strong>, the buttons remain hidden. The same applies when you enable <strong>hideSideNav</strong> for the currently active navigation node.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"semicollapsiblebuttonstyle\">semiCollapsibleButtonStyle</h3>\n<ul>\n  <li>\n    <strong>description</strong>: allows you to customize the rendering of the expand/collapse control in the left side navigation, if <a href=\"https://docs.luigi-project.io/docs/general-settings/?section=responsivenavigation\" rel=\"external\" target=\"_blank\">responsiveNavigation</a> is set to <strong>semiCollapsible</strong>.\n    You can set the following values:\n    <ul>\n      <li><code>button</code> renders a <strong>button</strong> tag.</li>\n    </ul>\n  </li>\n  <li><strong>default</strong>: if you don't specify any value for <strong>semiCollapsibleButtonStyle</strong>, the control is rendered as an <strong>i</strong> tag.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"profiletype\">profileType</h3>\n<ul>\n  <li>\n    <strong>description</strong>: allows applying different layouts of Profile Menu in the shellbar once a user is authorized.\n    You can set the following values:\n    <ul>\n      <li><code>simple</code> displays basic profile menu list of entities.</li>\n      <li><code>Fiori3</code> displays renewed profile menu layout according to the Fiori 3 styleguides. It contains the avatar of a user, if applicable, and additional description. <strong>since</strong>: v1.14.0</li>\n    </ul>\n  </li>\n  <li><strong>default</strong>: if you don't specify any value for <strong>profileType</strong>, the <code>simple</code> layout will be used as a default one.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"sidenavfootertext\">sideNavFooterText</h3>\n<ul>\n  <li><strong>description</strong>: is a string displayed in a sticky footer inside the side navigation. It is a good place to display the version of your application.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"getnavfootercontainer\">getNavFooterContainer</h3>\n<ul>\n  <li><strong>description</strong>: in addition to <strong>sideNavFooterText</strong> a client can insert custom HTML under the footer section.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"sidenavcompactmode\">sideNavCompactMode</h3>\n<ul>\n  <li><strong>description</strong>: reduces the dimensions of the side navigation and allows you to display more information.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"iframecreationinterceptor\">iframeCreationInterceptor</h3>\n<ul>\n  <li><strong>type</strong>: function</li>\n  <li>\n    <strong>description</strong>: called on iframe creation, it gives you full control over the created iframe DOM element. You can modify it to your needs just before it is added to the DOM tree.\n    This function is called with these parameters:\n    <ul>\n      <li><code>iframe</code> is the iframe DOM element. It is not yet added to the DOM tree, but all attributes are already set.</li>\n      <li><code>viewGroup</code> is the view group associated with this iframe, if applicable.</li>\n      <li><code>navigationNode</code> is the navigation node associated with this iframe. NOTE: the interceptor is called only once per iframe creation. If two or more navigation nodes share the same iframe (because they belong to the same view group) the interceptor is called with the first navigated node only.</li>\n      <li><code>microFrontendType</code>, which is <code>main</code>, <code>modal</code>, <code>split-view</code>, <code>drawer</code> or <code>usersettings</code> depending on where it is going to be rendered.</li>\n    </ul>\n  </li>\n  <li>\n    <strong>example</strong>:\n    For example, to allow 'fullscreen' for non-modal iframes:\n  </li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">{\n  iframeCreationInterceptor: (iframe, viewGroup, navigationNode, microFrontendType) => {\n    if (microFrontendType !== 'modal')\n      iframe.allowFullscreen = true;\n  }\n}\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"allowrules\">allowRules</h3>\n<ul>\n  <li><strong>type</strong>: array</li>\n  <li><strong>description</strong>: an array of rules for the content in the iframe, managed by the HTML <strong>allow</strong> attribute. You can use one or more rules by adding them to the array, for example <code>allowRules: ['microphone', 'camera']</code>. Be aware that this mechanism requires the browser to support <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Feature_Policy\" rel=\"external\" target=\"_blank\">Feature Policy</a>.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"apploadingindicatorhideautomatically\">appLoadingIndicator.hideAutomatically</h3>\n<ul>\n  <li><strong>description</strong>: allows you to disable automatic hiding of the app loading indicator, which is enabled by default in case the app loading indicator is being used. Take a look at the <a href=\"/docs/luigi-ux-features#app-loading-indicator\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">App loading indicator</a> section on how to use this feature.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"featuretogglesquerystringparam\">featureToggles.queryStringParam</h3>\n<ul>\n  <li><strong>description</strong>: allows you to set the query parameter name for the feature toggles. This parameter is then used when setting feature toggles via appending to the URL like <code>?ft=name</code>. You will need this value set before using the feature toggle functionality.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"theming\">theming</h3>\n<ul>\n  <li><strong>description</strong>: a configuration element that allows you to specify a list of themes that are available on the website. The children elements are:\n    <ul>\n      <li><strong>themes</strong> (mandatory) is an array of available themes, for example <code>themes: ['light', 'dark']</code>.</li>\n      <li><strong>defaultTheme</strong> (mandatory) the default theme used by the application.</li>\n      <li><strong>nodeViewURLDecorator</strong> (optional) you can add an internal Luigi View URL decorator (an example is below). This object adds a query parameter where you can add a current theme used by the application when micro-frontends are loaded.</li>\n      <li><strong>useFioriScrollbars</strong> (optional) if set to <code>true</code>, Fiori theming variables are applied to all scrollbars in luigi core app.</li>\n    </ul>\n  </li>\n  <li><strong>example</strong>:</li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">theming : {\n    themes: () => [\n      { id: 'light', name: 'Fiori3 Light' },\n      { id: 'dark', name: 'Fiori3 Dark' }\n    ],\n    defaultTheme: 'light'\n    nodeViewURLDecorator: {\n       queryStringParameter: {\n         keyName: 'sap-theme'\n         // optional\n          value: themeId => {\n            return themeId;\n         }\n       }\n     }\n  }\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"customalerthandler\">customAlertHandler</h3>\n<ul>\n  <li><strong>type</strong>: function</li>\n  <li><strong>description</strong>: with this function, Luigi alerts will be disabled and you can implement your own alerts. This function gets <code>settings</code> and <code>openFromClient</code> as parameters. It must either return a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"external\" target=\"_blank\">promise</a> which gets resolved when the alert is dismissed, or <code>false</code> if the default Luigi alert should be shown.</li>\n  <li><strong>example</strong>:</li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.setConfig({\n  ...,\n  settings: {\n    customAlertHandler: ()=>{\n     return new Promise((resolve, reject) => {\n       //custom alert implementation\n     });\n    }\n  }\n})\n</code></pre>\n</div>\n</section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"third-party-cookies-support-check\">Third-party cookies support check</h2>\n<p>You can check whether the user's browser supports third-party cookies by defining a <strong>thirdPartyCookieCheck</strong> object which expects a function called <strong>thirdPartyCookieErrorHandling</strong> and an optional <strong>thirdPartyCookiesScriptLocation</strong> parameter. When <strong>thirdPartyCookiesScriptLocation</strong> is set, the Luigi Core application checks third-party cookie support only once and not on every micro frontend call. If it is <em>not</em> set, the Luigi Core application checks third-party cookie support whenever a micro frontend is loaded.</p>\n<p>To detect whether the user's browser supports the mechanism, use the script in the <a href=\"https://github.com/SAP/luigi/tree/main/core/third-party-cookies\" rel=\"external\" target=\"_blank\"><code>third-party-cookies</code></a> catalog. Deploy this file on a domain different from your main application's and set <strong>thirdPartyCookieScriptLocation</strong> to the <code>init.html</code> file. During initialization, Luigi detects cookies support and produces an alert if cookies are disabled in the user's browser.</p>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"parameters\">Parameters</h3>\n<section class=\"h4Wrapper headingWrapper\"><h4 id=\"thirdpartycookiecheck\">thirdPartyCookieCheck</h4>\n<ul>\n  <li><strong>type</strong>: object</li>\n  <li><strong>description</strong>: object defined in the general settings part of the Luigi configuration file, containing the <strong>thirdPartyCookieErrorHandling</strong> function and an optional <strong>thirdPartyCookiesScriptLocation</strong> parameter.</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"thirdpartycookieerrorhandling\">thirdPartyCookieErrorHandling</h4>\n<ul>\n  <li><strong>type</strong>: function</li>\n  <li><strong>description</strong>: a function where you could call an alert like <code>Luigi.ux().showAlert({})</code>.</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"thirdpartycookiescriptlocation\">thirdPartyCookieScriptLocation**</h4>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: the URL to the page containing third-party cookies support check.</li>\n</ul><!-- document the schema-->\n</section></section></section></section></section>"}},{"name":"getting-started.md","shortName":"getting-started","contents":{"data":{},"messages":[],"history":[],"cwd":"/Users/I529989/Documents/SAP/32-luigi/website/docs","value":"<section class=\"h0Wrapper headingWrapper\">\n<section class=\"h1Wrapper headingWrapper\"><h1 id=\"getting-started\">Getting started</h1>\n<p>This document contains the following sections:</p>\n<ul>\n  <li><a href=\"/docs/getting-started#overview\" onclick=\"navigateInternal(event, this)\">Overview</a></li>\n  <li><a href=\"/docs/getting-started#quick-setup\" onclick=\"navigateInternal(event, this)\">Quick setup</a></li>\n  <li><a href=\"/docs/getting-started#examples\" onclick=\"navigateInternal(event, this)\">Examples</a></li>\n  <li><a href=\"/docs/getting-started#how-to-obtain-support\" onclick=\"navigateInternal(event, this)\">How to obtain support</a></li>\n</ul>\n<section class=\"h2Wrapper headingWrapper\"><h2 id=\"overview\">Overview</h2>\n<p>Luigi is an open source JavaScript framework for <strong>micro frontends</strong>. Micro frontend architecture breaks down big frontend monoliths into smaller and simpler chunks which can be developed by independent teams.</p>\n<p>The Luigi framework provides configuration options, API functions, and out-of-the-box features which make migrating to a micro frontend architecture easier. Luigi provides a consistent user navigation for all your micro frontends, ensuring a better user experience.</p>\n<p>Most importantly, Luigi is <strong>technology-agnostic</strong>, which means you can use virtually any toolkit (including, but not limited to: Angular, React, Vue, or UI5) to create your frontend.</p>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"benefits\">Benefits</h3>\n<p>Some benefits of a micro frontend architecture include:</p>\n<ul>\n  <li>Future-proof and scalable</li>\n  <li>Multiple technologies can co-exist in the same app</li>\n  <li>Can be managed by independent teams</li>\n  <li>Fast deployment of new features and bugfixes</li>\n  <li>Smaller, more manageable codebase</li>\n  <li>Reduced maintenance cost</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"main-features\">Main features</h3>\n<img src=\"https://github.com/SAP/luigi/blob/main/docs/assets/luigi-overview-diagram.jpg?raw=true\" alt=\"Graphic showing main Luigi components\" width=\"600\">\n<p>Luigi consists of two main parts:</p>\n<p><strong>Luigi Core</strong> - refers to the \"main app\", in which your micro frontends (a.k.a. views) will be embedded. It offers some of the following configurable features:</p>\n<ul>\n  <li><a href=\"/docs/navigation-configuration\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Navigation</a> - consistent user navigation created using specific Luigi <a href=\"/docs/navigation-parameters-reference\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">parameters</a>.</li>\n  <li><a href=\"/docs/authorization-configuration\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Authorization</a> - integration with an authentication provider, allowing users to log in.</li>\n  <li><a href=\"/docs/i18n\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Localization</a> - displaying an application in multiple languages.</li>\n  <li><a href=\"/docs/general-settings\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">General settings</a> - other settings that can be configured in Luigi, such as HTML attributes, third-party cookie configuration and more.</li>\n  <li><a href=\"/docs/luigi-core-api\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">API</a> - functions to help with almost every part of your app: navigation, authorization, adding a <a href=\"/docs/luigi-core-api#globalsearch\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">search box</a>, configuring a light/dark <a href=\"/docs/luigi-core-api#theming\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">theme</a> and others.</li>\n</ul>\n<p><strong>Luigi Client</strong> - refers to Luigi options related to micro frontends:</p>\n<ul>\n  <li><a href=\"/docs/luigi-client-api\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">API</a> - diverse API functions which can be used on the micro frontend side.</li>\n  <li><a href=\"/docs/communication\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Communication</a> - sending messages between the micro frontend and the main application (Luigi Core module).</li>\n</ul>\n</section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"quick-setup\">Quick setup</h2>\n<p>If you want to begin developing your own app with Luigi, start here:</p>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"luigi-core\">Luigi Core</h3>\n<p>Follow these steps to create a global user interface and host a <strong>full web application</strong> in Luigi:</p>\n<ol>\n  <li>Set up a Luigi Core application on one of the following frameworks:</li>\n</ol>\n<ul>\n  <li><a href=\"/docs/application-setup#application-setup-without-a-framework\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">No framework</a></li>\n  <li><a href=\"/docs/application-setup#application-setup-for-angular\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Angular</a></li>\n  <li><a href=\"/docs/application-setup#application-setup-for-sapui5openui5\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">SAPUI5/OpenUI5</a></li>\n  <li><a href=\"/docs/application-setup#application-setup-for-vuejs\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">VUE.JS</a></li>\n  <li><a href=\"/docs/application-setup#application-setup-for-react\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">React</a></li>\n</ul>\n<ol start=\"2\">\n  <li>Configure the application according to your needs. For example, you can begin by configuring the <a href=\"/docs/navigation-configuration\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">basic navigation</a> of your application.</li>\n</ol>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"luigi-client\">Luigi Client</h3>\n<p>Follow these steps to add Luigi Client features to your existing <strong>micro frontends</strong>:</p>\n<ol>\n  <li><a href=\"/docs/luigi-client-setup\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Install Luigi Client</a>.</li>\n  <li>Use the functions and parameters provided by the Luigi Client API. You can find them in the <a href=\"/docs/luigi-client-api\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Luigi Client API documentation</a>.</li>\n</ol>\n</section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"examples\">Examples</h2>\n<p>Here you can find some Luigi example applications and scenarios, starting from simple to more complex:</p>\n<dl class=\"accordion-container\">\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"html-file\">HTML file</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>This is a simple example of a Luigi application inside a single HTML file. It is not intended for any real-life use.</p>\n      <p>You can run it by copying and pasting this code in a text editor, then saving it as an HTML file:</p>\n      <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n            <img src=\"/images/copy-clipboard-default.svg\">\n            <div class=\"popoverCopy\">Click to copy</div>\n          </div></a>\n        <pre class=\"canCopyCode\"><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n\n&#x3C;head>\n\t  &#x3C;title>Hello Luigi&#x3C;/title>\n\t  &#x3C;link rel='stylesheet' href='https://unpkg.com/@luigi-project/core/luigi.css'>\n      &#x3C;meta charset=\"utf-8\">\n&#x3C;/head>\n\n&#x3C;body>\n    &#x3C;noscript>You need to enable JavaScript to run this app.&#x3C;/noscript>\n    &#x3C;script src=\"https://unpkg.com/@luigi-project/core/luigi.js\">&#x3C;/script>\n\t&#x3C;script>\n        Luigi.setConfig({\n            navigation: {\n                nodes: [{\n                    pathSegment: 'home',\n                    hideFromNav: true,\n                    children: [{\n                        pathSegment: 'hello',\n                        label: 'Hello Luigi',\n                        viewUrl: 'https://fiddle.luigi-project.io/examples/microfrontends/multipurpose.html',\n                        isolateView: true,\n                        context: {\n                            title: 'Hello Luigi!',\n                            content: \" \",\n                            imgUrl: \"https://fiddle.luigi-project.io/img/logos/Luigi-logo_rgb.svg\",\n                            imgWidth: \"300\",\n                            imgTopMargin: true\n                        }\n                    },{\n                        pathSegment: 'hello2',\n                        label: 'Hello Maryna',\n                        viewUrl: 'https://fiddle.luigi-project.io/examples/microfrontends/multipurpose.html',\n                        isolateView: true,\n                        context: {\n                            title: 'Hello Maryna!',\n                            content: \" \",\n                            imgUrl: \"https://fiddle.luigi-project.io/img/logos/Luigi-logo_rgb.svg\",\n                            imgWidth: \"300\",\n                            imgTopMargin: true\n                        }\n                    }]\n                }]\n            },\n            routing: {\n                useHashRouting: true\n            },\n            settings: {\n                responsiveNavigation: 'semiCollapsible',\n                header: {\n                    title: 'Hello Luigi',\n                    logo: 'https://fiddle.luigi-project.io/img/luigi.png'\n                }\n            }\n        });\n    &#x3C;/script>\n&#x3C;/body>\n\n&#x3C;/html>\n</code></pre>\n      </div>\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"luigi-fiddle\">Luigi Fiddle</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>The <a href=\"https://fiddle.luigi-project.io/\" rel=\"external\" target=\"_blank\">Luigi Fiddle</a> website is a sandbox playground where you can test Luigi. Simply click on <strong>Modify Config</strong> at the bottom right of the page to make changes to the Luigi application.</p>\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"hello-world-examples\">\"Hello World\" examples</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>In the <strong>Examples</strong> section of our documentation, you can find links to several \"Hello World\" example applications which can help you explore Luigi's functions:</p>\n      <ul>\n        <li><a href=\"https://github.com/SAP/luigi/tree/main/core/examples/luigi-example-angular\" rel=\"external\" target=\"_blank\">Angular</a></li>\n        <li><a href=\"https://github.com/SAP/luigi/tree/main/core/examples/luigi-example-react\" rel=\"external\" target=\"_blank\">React</a></li>\n        <li><a href=\"https://github.com/SAP/luigi/tree/main/core/examples/luigi-example-vue\" rel=\"external\" target=\"_blank\">Vue</a></li>\n        <li><a href=\"https://github.com/SAP/luigi/tree/main/core/examples/luigi-example-openui5\" rel=\"external\" target=\"_blank\">OpenUI5</a></li>\n        <li><a href=\"https://github.com/SAP/luigi/tree/main/core/examples/luigi-example-svelte\" rel=\"external\" target=\"_blank\">Svelte</a></li>\n        <li><a href=\"https://github.com/SAP/luigi/tree/main/core/examples/luigi-example-js\" rel=\"external\" target=\"_blank\">Plain JavaScript</a></li>\n        <li><a href=\"https://github.com/SAP/luigi/tree/main/core/examples/luigi-example-next\" rel=\"external\" target=\"_blank\">NextJS</a></li>\n      </ul>\n      <p>You can install them by following the instructions in the <code>README</code> file of each example.</p>\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"luigi-shopping-app-tutorial\">Luigi shopping app (tutorial)</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>Our <a href=\"https://developers.sap.com/group.luigi-app.html\" rel=\"external\" target=\"_blank\">tutorial</a> on how to create a React and UI5 web-shopping application is intended for beginners, but it still delves deeper into Luigi's functions. It covers topics such as:</p>\n      <ul>\n        <li>how to create a Luigi app from scratch</li>\n        <li>how to use the Luigi Core and Client APIs</li>\n        <li>how to create a micro frontend</li>\n        <li>how to add localization to your app and display it in multiple languages</li>\n      </ul>\n      <p>Alternatively, the tutorial app can be installed directly by following the <code>README</code> file of <a href=\"https://github.com/SAP-samples/luigi-micro-frontend-application\" rel=\"external\" target=\"_blank\">this GitHub repository</a>.</p>\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"e2e-example\">e2e example</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>This example application was created for testing purposes and it includes all possible Luigi features in one place. It is useful if you want to explore our framework in more detail or <a href=\"https://github.com/SAP/luigi/blob/main/CONTRIBUTING.md\" rel=\"external\" target=\"_blank\">contribute</a> to the Luigi project.</p>\n      <p>You can find the e2e test application and instructions on how to install it <a href=\"https://github.com/SAP/luigi/tree/main/test/e2e-test-application#luigi-sample-and-e2e-test-application-written-in-angular\" rel=\"external\" target=\"_blank\">here</a>.</p>\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"advanced-scenarios\">Advanced scenarios</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>In the <a href=\"/docs/advanced-scenarios\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">expert scenarios</a> section of the documentation, you can find implementations of more complex Luigi use cases, such as using feature toggles or authenticating with Google Cloud Identity.</p>\n    </dd>\n  </div>\n</dl>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"how-to-obtain-support\">How to obtain support</h2>\n<ul>\n  <li>\n    <p><a href=\"https://github.com/SAP/luigi/discussions\" rel=\"external\" target=\"_blank\">GitHub Discussions</a> - ask (or answer) questions related to Luigi, search for previously answered questions, and rate the answers for helpfulness.</p>\n  </li>\n  <li>\n    <p><a href=\"https://luigi-project.slack.com\" rel=\"external\" target=\"_blank\">Slack Channel</a> - get Luigi updates, contact the Luigi team on Slack, and explore previous discussions.</p>\n  </li>\n  <li>\n    <p><a href=\"https://github.com/SAP/luigi\" rel=\"external\" target=\"_blank\">GitHub contribution</a> - if you have a specific improvement idea or want to contribute to Luigi, you can create an <a href=\"https://docs.github.com/en/issues/tracking-your-work-with-issues/about-issues\" rel=\"external\" target=\"_blank\">issue</a> and <a href=\"https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests\" rel=\"external\" target=\"_blank\">pull request</a>. Please follow our <a href=\"https://github.com/SAP/luigi/blob/main/CONTRIBUTING.md\" rel=\"external\" target=\"_blank\">contribution guidelines</a> when doing so.</p>\n  </li>\n</ul>\n</section></section></section>"}},{"name":"global-search.md","shortName":"global-search","contents":{"data":{},"messages":[],"history":[],"cwd":"/Users/I529989/Documents/SAP/32-luigi/website/docs","value":"<section class=\"h0Wrapper headingWrapper\">\n<section class=\"h1Wrapper headingWrapper\"><h1 id=\"global-search\">Global search</h1>\n<p>\n  <img src=\"/assets/globalsearch.jpg\" alt=\"Global Search\">\n</p>\n<p>\n  The global search element can be used to trigger a search. In your configuration, you can implement a custom search provider and some action events like <a href=\"/docs/navigation-parameters-reference#searchProvider\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">onEnter</a>, <a href=\"/docs/navigation-parameters-reference#searchProvider\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">onEscape</a>, <a href=\"/docs/navigation-parameters-reference#searchProvider\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">onInput</a> and <a href=\"/docs/navigation-parameters-reference#searchProvider\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">onSearchResultItemSelected</a>.\n  By default, the search result will be rendered in a popup.\n</p>\n<p>Example:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">searchProvider = {\n  onInput: () => {\n    let searchString = Luigi.globalSearch().getSearchString();\n    //searchProvider does a search\n  },\n  onEnter: () => {\n    Luigi.globalSearch().showSearchResult(searchResults)\n  },\n  onEscape: () => {\n    Luigi.globalSearch().closeSearchResult();\n    Luigi.globalSearch().clearSearchField();\n  },\n  customSearchResultRenderer: (searchResults, slot, searchApiObj) => {\n    //If this function is implemented, the default search result popover will not be displayed.\n    let div = document.createElement('div');\n    div.setAttribute(\n      'class',\n      'fd-popover__body fd-popover__body--right luigi-search__popover__body'\n    );\n    let nav = document.createElement('nav');\n    nav.setAttribute('class', 'fd-menu');\n    let ul = document.createElement('ul');\n    ul.setAttribute('class', 'fd-menu__list fd-menu__list--top');\n    for (let i = 0; i &#x3C; searchResults.length; i++) {\n      let li = document.createElement('li');\n      li.setAttribute('class', 'fd-menu__item');\n      let a = document.createElement('a');\n      a.addEventListener('click', e => {\n        searchApiObj.fireItemSelected(searchResults[i]);\n      });\n      a.setAttribute('class', 'fd-menu__link');\n      let span = document.createElement('span');\n      span.setAttribute('class', 'fd-menu__title');\n      span.innerHTML = searchResults[i].label;\n      a.appendChild(span);\n      li.appendChild(a);\n      ul.appendChild(li);\n    }\n    nav.appendChild(ul);\n    div.appendChild(nav);\n    slot.appendChild(div);\n  },\n  customSearchResultItemRenderer: (searchResultItem, slot, searchApiObj) => {\n      let a = document.createElement('a');\n    a.setAttribute('class', 'fd-menu__link');\n    a.setAttribute('style', 'fd-menu__link');\n    a.addEventListener('click', () => {\n      searchApiObj.fireItemSelected(searchResultItem);\n    })\n    let span = document.createElement('span');\n    span.setAttribute('class', \"fd-menu__title\");\n    span.innerHTML = searchResultItem.label;\n    a.appendChild(span);\n    slot.appendChild(a);\n  },\n  onSearchResultItemSelected: searchResultItem => {\n    Luigi.navigation().withParams(searchResultItem.pathObject.params).navigate(searchResultItem.pathObject.link);\n  }\n}\n</code></pre>\n</div>\n</section></section>"}},{"name":"i18n.md","shortName":"i18n","contents":{"data":{},"messages":[],"history":[],"cwd":"/Users/I529989/Documents/SAP/32-luigi/website/docs","value":"<section class=\"h0Wrapper headingWrapper\">\n<section class=\"h1Wrapper headingWrapper\"><h1 id=\"internationalization-i18n\">Internationalization (i18n)</h1>\n<p>This example shows you how to implement a central translation dictionary in Luigi Core.</p>\n<p>Luigi Core provides a generic <a href=\"/docs/luigi-core-api#luigii18n\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">API for i18n</a>. We will write a custom translation provider that gathers translation strings from static files hosted either on Luigi Core or on the micro-frontend side.</p>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"steps\">Steps</h3>\n<section class=\"h4Wrapper headingWrapper\"><h4 id=\"1-create-a-custom-translation-function\">1. Create a custom translation function</h4>\n<p>Create a internationalization provider that will expose the <code>getTranslation</code> method for <code>settings.customTranslationImplementation</code> configuration.</p>\n<p>File <code>i18n-provider.js</code>:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">class I18nProvider {\n  init() {\n    // Could also be an Ajax based implementation.\n    this.translationTable = {\n      \"en\": {\n        \"COMMON\": {\n          \"SELECT_ENVIRONMENT\": \"Select EN Environment ...\"\n        },\n        \"LABEL1\": 'Label EN',\n        \"ENVIRONMENT_NUM\": \"Environment {num} EN\"\n      },\n      \"de\": {\n        \"COMMON\": {\n          \"SELECT_ENVIRONMENT\": \"Select DE Environment ...\"\n        },\n        \"LABEL1\": \"Label DE\",\n        \"ENVIRONMENT_NUM\": \"Environment {num} DE\"\n      },\n    };\n    return Promise.resolve();\n  }\n\n  afterInit() {\n    this.currentLanguage = Luigi.i18n().getCurrentLocale();\n    Luigi.i18n().addCurrentLocaleChangeListener((locale) => {\n      this.currentLanguage = locale;\n    });\n  }\n\n  // This function will be used by Luigi Core for translation\n  getTranslation(key, interpolations = undefined, locale = undefined) {\n    if (!key) return '';\n    this.currentLanguage = locale || this.currentLanguage || Luigi.i18n().getCurrentLocale();\n    const result = this.findTranslation(\n      key,\n      this.translationTable[this.currentLanguage],\n      interpolations\n    );\n    return result ? result : key;\n  }\n\n  /**\n   * @private\n   * Finds the translated value based on given key.\n   * @param {string} key key to be translated\n   * @param {*} obj translation table\n   */\n  findTranslation(key, obj, interpolations) {\n    let splitted = key.split('.');\n    for (let i = 0; i &#x3C; splitted.length; i++) {\n      let key = splitted[i];\n      if (obj.hasOwnProperty(key) &#x26;&#x26; typeof obj[key] === 'object') {\n        obj = obj[key];\n      } else {\n        if (interpolations)\n          return this.findInterpolations(obj[key], interpolations);\n        return obj[key];\n      }\n    }\n  }\n\n  /**\n   * @private\n   * Replaces values that are defiend in translation strings\n   * @param {string} key key to be translated\n   * @param {*} interpolations translation table\n   * @example\n   * findInterpolations('Environment {num}', {num: 1})\n   */\n  findInterpolations(value, interpolations) {\n    Object.keys(interpolations).forEach(item => {\n      value = value.replace(\n        new RegExp('{' + EscapingHelpers.escapeKeyForRegexp(item) + '}', 'gi'),\n        interpolations[item]\n      );\n    });\n    return value;\n  }\n}\n\nexport const i18nProvider = new I18nProvider();\n</code></pre>\n</div>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"2-configure-customtranslationimplementation\">2. Configure <code>customTranslationImplementation</code></h4>\n<p>Specify <code>settings.customTranslationImplementation</code>:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">import { i18nProvider } from './i18n-provider';\nconst coreConfig = {\n  // ... partial setting ...\n  settings: {\n    customTranslationImplementation = i18nProvider\n  }\n}\n</code></pre>\n</div>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"3-load-translations-before-luigisetconfig\">3. Load translations before <code>Luigi.setConfig()</code></h4>\n<p>Since translations may come from external sources, loaded asynchronously, you should load them ahead before <code>Luigi.setConfig</code> is triggered. Be aware that other Luigi Core API functionality is only available after initialization.</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">import { i18nProvider } from './i18n-provider';\nconst coreConfig = { /* the whole configuration */ }\n\ni18nProvider.init().then(() => {\n  Luigi.setConfig(coreConfig);\n})\n</code></pre>\n</div>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"4-add-locale-change-listener-after-luigi-initialization\">4. Add locale change listener after Luigi initialization</h4>\n<p>Specify <code>customTranslationImplementation</code>:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">import { i18nProvider } from './i18n-provider';\nconst coreConfig = {\n  // ... partial setting ...\n  lifecycleHooks: {\n    luigiAfterInit: () => {\n      i18nProvider.afterInit();\n    }\n  }\n}\n</code></pre>\n</div>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"5-use-translation-as-a-node-label\">5. Use translation as a node label</h4>\n<p>You can use the translation keys as <code>node.label</code>, on other labels in the configuration or programmatically.</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">const coreConfig = {\n  navigation: {\n    nodes: [{\n      label: 'MF1.LABEL1',\n      pathSegment: 'overview',\n      // ...\n    }],\n    contextSwitcher: {\n      defaultLabel: 'COMMON.SELECT_ENVIRONMENT',\n      options: () => [1,2,3,4,5].map(num => ({\n        label: Luigi.i18n().getTranslation('ENVIRONMENT_NUM', {num}),\n        pathValue: 'env' + num\n      }))\n    },\n  }\n}\n</code></pre>\n</div>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"6-change-locale-from-client-side\">6. Change locale from Client side</h4>\n<p>\n  Most of the time, the language selection will be done in a micro-frontend, like user profile.\n  To be able to use <a href=\"/docs/luigi-client-api#setcurrentlocale\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">LuigiClient.uxManager().setCurrentLocale</a> function, we need to add locale change permissions on the node level.\n</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">const coreConfig = {\n  navigation: {\n    nodes: [{\n      label: 'User Profile',\n      pathSegment: 'profile',\n      viewUrl: '/profile',\n      clientPermissions: {\n        changeCurrentLocale: true\n      }\n    }],\n</code></pre>\n</div>\n<p>In the profile micro-frontend we can then set the desired language:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.uxManager().setCurrentLocale('en');\n</code></pre>\n</div>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"7-read-current-language-in-the-micro-frontends\">7. Read current language in the micro-frontends</h4>\n<p>To read the current active language, use <a href=\"/docs/luigi-client-api#getcurrentlocale\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">LuigiClient.uxManager().getCurrentLocale</a>. Like all state related functions, it should not be called before Luigi initialization.</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">function updateCurrentLanguage() {\n  currentLanguage = LuigiClient.uxManager().getCurrentLocale();\n}\nLuigiClient.addInitListener(updateCurrentLanguage);\nLuigiClient.addContextUpdateListener(updateCurrentLanguage);\n</code></pre>\n</div><!-- accordion:end -->\n</section></section></section></section>"}},{"name":"lifecycle-hooks.md","shortName":"lifecycle-hooks","contents":{"data":{},"messages":[],"history":[],"cwd":"/Users/I529989/Documents/SAP/32-luigi/website/docs","value":"<section class=\"h0Wrapper headingWrapper\">\n<section class=\"h1Wrapper headingWrapper\"><h1 id=\"lifecycle-hooks\">Lifecycle hooks</h1>\n<p>You can use any of the Luigi lifecycle hooks by adding additional setup to the root of the Luigi configuration object. Here is an example:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">{\n  ...\n  lifecycleHooks: {\n    luigiAfterInit: () => {\n      // initializing with a different language\n      myGeoLocationService.getLanguage().then(lang => {\n        Luigi.i18n().setCurrentLocale(lang);\n      })\n    }\n  }\n  ...\n}\n</code></pre>\n</div>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"luigiafterinit\">luigiAfterInit()</h3>\n<p>This method will be called after <a href=\"/docs/luigi-core-api#setconfig\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Luigi.setConfig({})</a> is executed.</p>\n<p>Keep in mind that <code>luigiAfterInit</code>is only triggered after the first <code>setConfig</code> instance. If you need it to be fired again, you can use <a href=\"/docs/luigi-core-api#reset\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Luigi.reset()</a> to trigger a new Luigi re-initialization.</p>\n</section></section></section>"}},{"name":"luigi-architecture.md","shortName":"luigi-architecture","contents":{"data":{},"messages":[],"history":[],"cwd":"/Users/I529989/Documents/SAP/32-luigi/website/docs","value":"<section class=\"h0Wrapper headingWrapper\">\n<section class=\"h1Wrapper headingWrapper\"><h1 id=\"luigi-architecture\">Luigi Architecture</h1>\n<p>This diagram represents an overview of Luigi's architecture. It shows the relationship between the Luigi framework, the web application, and the external micro frontends and authorization providers:</p>\n<p>\n  <img src=\"/assets/architecture.png\" alt=\"Luigi architecture diagram\">\n</p>\n</section></section>"}},{"name":"luigi-client-api.md","shortName":"luigi-client-api","contents":{"data":{},"messages":[],"history":[],"cwd":"/Users/I529989/Documents/SAP/32-luigi/website/docs","value":"<section class=\"h0Wrapper headingWrapper\">\n<section class=\"h1Wrapper headingWrapper\"><h1 id=\"luigi-client\">Luigi Client</h1>\n<p>This document outlines the features provided by the Luigi Client API. It covers these topics:</p>\n<ul>\n  <li><a href=\"/docs/luigi-client-api#lifecycle\" onclick=\"navigateInternal(event, this)\">Lifecycle</a> - functions that define the lifecycle of different Luigi elements</li>\n  <li><a href=\"/docs/luigi-client-api#lifecycleinitlistenercallback\" onclick=\"navigateInternal(event, this)\">Callbacks</a> - callback functions for initListener and customMessageListener</li>\n  <li><a href=\"/docs/luigi-client-api#linkmanager\" onclick=\"navigateInternal(event, this)\">Link manager</a> - you can use the linkManager instead of an internal router</li>\n  <li><a href=\"/docs/luigi-client-api#splitview\" onclick=\"navigateInternal(event, this)\">Split view</a> - allows you to open a micro frontend in the lower part of the content area in a \"split screen\" view</li>\n  <li><a href=\"/docs/luigi-client-api#uxmanager\" onclick=\"navigateInternal(event, this)\">uxManager</a> - functions related to user interface</li>\n  <li><a href=\"/docs/luigi-client-api#storagemanager\" onclick=\"navigateInternal(event, this)\">storageManager</a> - Storage Manager API to store/retrieve objects from Luigi Core local storage</li>\n</ul>\n<section class=\"h2Wrapper headingWrapper\"><h2 id=\"api-reference\">API Reference</h2><!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"lifecycle\">Lifecycle</h3>\n<p>Use the functions and parameters to define the Lifecycle of listeners, navigation nodes, and Event data.</p>\n<section class=\"h4Wrapper headingWrapper\"><h4 id=\"isluigiclientinitialized\">isLuigiClientInitialized</h4>\n<p>Check if LuigiClient is initialized</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">const init = LuigiClient.isLuigiClientInitialized()\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> client initialized state</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.12.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"luigiclientinit\">luigiClientInit</h4>\n<p>Starts the handshake with Luigi Core and thereafter results in initialization of Luigi Client. It is always ran by default when importing the Luigi Client package in your micro frontend. Note that when using <code>defer-luigi-init</code> to defer default initialization, you will need to initialize the handshake using this function manually wherever needed.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-1\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.luigiClientInit()\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.12.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"addinitlistener\">addInitListener</h4>\n<p>Registers a listener called with the context object and the Luigi Core domain as soon as Luigi is instantiated. Defer your application bootstrap if you depend on authentication data coming from Luigi.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters\">Parameters</h5>\n<ul>\n  <li><code>initFn</code> <strong><a href=\"/docs/luigi-client-api#lifecycleinitlistenercallback\" onclick=\"navigateInternal(event, this)\">Lifecycle~initListenerCallback</a></strong> the function that is called once Luigi is initialized, receives current context and origin as parameters</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-2\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">const initListenerId = LuigiClient.addInitListener((context) => storeContextToMF(context))\n</code></pre>\n</div>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"removeinitlistener\">removeInitListener</h4>\n<p>Removes an init listener.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-1\">Parameters</h5>\n<ul>\n  <li><code>id</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> the id that was returned by the <code>addInitListener</code> function.</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-3\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.removeInitListener(initListenerId)\n</code></pre>\n</div>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"addcontextupdatelistener\">addContextUpdateListener</h4>\n<p>Registers a listener called with the context object when the URL is changed. For example, you can use this when changing environments in a context switcher in order for the micro frontend to do an API call to the environment picked.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-2\">Parameters</h5>\n<ul>\n  <li><code>contextUpdatedFn</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\" rel=\"external\" target=\"_blank\">function</a></strong> the listener function called each time Luigi context changes</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-4\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">const updateListenerId = LuigiClient.addContextUpdateListener((context) => storeContextToMF(context))\n</code></pre>\n</div>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"removecontextupdatelistener\">removeContextUpdateListener</h4>\n<p>Removes a context update listener.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-3\">Parameters</h5>\n<ul>\n  <li><code>id</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> the id that was returned by the <code>addContextUpdateListener</code> function</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-5\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.removeContextUpdateListener(updateListenerId)\n</code></pre>\n</div>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"addinactivelistener\">addInactiveListener</h4>\n<p>\n  Registers a listener called upon micro frontend inactivity. This happens when a new micro frontend gets shown while keeping the old one cached.\n  Gets called when:\n</p>\n<ul>\n  <li>navigating with <strong>preserveView</strong></li>\n  <li>navigating from or to a <strong>viewGroup</strong></li>\n</ul>\n<p>\n  Does not get called when navigating normally, or when <code>openAsModal</code> or <code>openAsSplitView</code> are used.\n  Once the micro frontend turns back into active state, the <code>addContextUpdateListener</code> receives an updated context.\n</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-4\">Parameters</h5>\n<ul>\n  <li><code>inactiveFn</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\" rel=\"external\" target=\"_blank\">function</a></strong> the listener function called each time a micro frontend turns into an inactive state</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-6\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.addInactiveListener(() => mfIsInactive = true)\nconst inactiveListenerId = LuigiClient.addInactiveListener(() => mfIsInactive = true)\n</code></pre>\n</div>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"removeinactivelistener\">removeInactiveListener</h4>\n<p>Removes a listener for inactive micro frontends.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-5\">Parameters</h5>\n<ul>\n  <li><code>id</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> the id that was returned by the <code>addInactiveListener</code> function</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-7\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.removeInactiveListener(inactiveListenerId)\n</code></pre>\n</div>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"addcustommessagelistener\">addCustomMessageListener</h4>\n<p>Registers a listener called when the micro frontend receives a custom message.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-6\">Parameters</h5>\n<ul>\n  <li><code>customMessageId</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> the custom message id</li>\n  <li><code>customMessageListener</code> <strong><a href=\"/docs/luigi-client-api#lifecyclecustommessagelistenercallback\" onclick=\"navigateInternal(event, this)\">Lifecycle~customMessageListenerCallback</a></strong> the function that is called when the micro frontend receives the corresponding event</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-8\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">const customMsgId = LuigiClient.addCustomMessageListener('myapp.project-updated', (data) => doSomething(data))\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.6.2</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"removecustommessagelistener\">removeCustomMessageListener</h4>\n<p>Removes a custom message listener.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-7\">Parameters</h5>\n<ul>\n  <li><code>id</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> the id that was returned by the <code>addInitListener</code> function</li>\n</ul>\n<p><strong>Meta</strong></p>\n<ul>\n  <li>\n    <strong>since</strong>: 0.6.2\n    LuigiClient.removeCustomMessageListener(customMsgId)\n  </li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"gettoken\">getToken</h4>\n<p>Returns the currently valid access token.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-9\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">const accessToken = LuigiClient.getToken()\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> current access token</p>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getcontext\">getContext</h4>\n<p>Returns the context object. Typically it is not required as the <a href=\"/docs/luigi-client-api#addcontextupdatelistener\" onclick=\"navigateInternal(event, this)\">addContextUpdateListener()</a> receives the same values.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-10\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">const context = LuigiClient.getContext()\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> current context data</p>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"geteventdata\">getEventData</h4>\n<p>Returns the context object. It is an alias function for getContext().</p>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> current context data</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>deprecated</strong>: This is deprecated.</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getactivefeaturetoggles\">getActiveFeatureToggles</h4>\n<p>Returns a list of active feature toggles</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-11\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">const activeFeatureToggleList = LuigiClient.getActiveFeatureToggles()\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array\" rel=\"external\" target=\"_blank\">Array</a></strong> a list of feature toggle names</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.4.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"addnodeparams\">addNodeParams</h4>\n<p>Sets node parameters in Luigi Core. The parameters will be added to the URL.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-8\">Parameters</h5>\n<ul>\n  <li><code>params</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong></li>\n  <li><code>keepBrowserHistory</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> (optional, default <code>true</code>)</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-12\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.addNodeParams({luigi:'rocks'}, true);\n</code></pre>\n</div>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getnodeparams\">getNodeParams</h4>\n<p>\n  Returns the node parameters of the active URL.\n  Node parameters are defined like URL query parameters but with a specific prefix allowing Luigi to pass them to the micro frontend view. The default prefix is <strong>~</strong> and you can use it in the following way: <code>https://my.luigi.app/home/products?~sort=asc&#x26;~page=3</code>.\n</p><!-- add-attribute:class:warning -->\n<blockquote class=\"warning\">\n  <p><strong>NOTE:</strong> some special characters (<code>&#x3C;</code>, <code>></code>, <code>\"</code>, <code>'</code>, <code>/</code>) in node parameters are HTML-encoded.</p>\n</blockquote>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-9\">Parameters</h5>\n<ul>\n  <li><code>shouldDesanitise</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> defines whether the specially encoded characters should be desanitised (optional, default <code>false</code>)</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-13\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">const nodeParams = LuigiClient.getNodeParams()\nconst nodeParams = LuigiClient.getNodeParams(true)\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> node parameters, where the object property name is the node parameter name without the prefix, and its value is the value of the node parameter. For example <code>{sort: 'asc', page: 3}</code></p>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getpathparams\">getPathParams</h4>\n<p>\n  Returns the dynamic path parameters of the active URL.\n  Path parameters are defined by navigation nodes with a dynamic <strong>pathSegment</strong> value starting with <strong>:</strong>, such as <strong>productId</strong>.\n  All path parameters in the current navigation path (as defined by the active URL) are returned.\n</p><!-- add-attribute:class:warning -->\n<blockquote class=\"warning\">\n  <p><strong>NOTE:</strong> some special characters (<code>&#x3C;</code>, <code>></code>, <code>\"</code>, <code>'</code>, <code>/</code>) in path parameters are HTML-encoded.</p>\n</blockquote>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-14\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">const pathParams = LuigiClient.getPathParams()\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> path parameters, where the object property name is the path parameter name without the prefix, and its value is the actual value of the path parameter. For example <code>{productId: 1234, ...}</code></p>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getcoresearchparams\">getCoreSearchParams</h4>\n<p>Read search query parameters which are sent from Luigi Core</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-15\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.getCoreSearchParams();\n</code></pre>\n</div>\n<p>Returns <strong>any</strong> Core search query parameters</p>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"addcoresearchparams\">addCoreSearchParams</h4>\n<p>Sends search query parameters to Luigi Core. The search parameters will be added to the URL if they are first allowed on a node level using <a href=\"/docs/navigation-parameters-reference#clientpermissionsurlparameters\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">clientPermissions.urlParameters</a>.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-10\">Parameters</h5>\n<ul>\n  <li><code>searchParams</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong></li>\n  <li><code>keepBrowserHistory</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> (optional, default <code>true</code>)</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-16\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.addCoreSearchParams({luigi:'rocks'}, false);\n</code></pre>\n</div>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getclientpermissions\">getClientPermissions</h4>\n<p>Returns the current client permissions as specified in the navigation node or an empty object. For details, see <a href=\"/docs/navigation-parameters-reference\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Node parameters</a>.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-17\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">const permissions = LuigiClient.getClientPermissions()\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> client permissions as specified in the navigation node</p>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"settargetorigin\">setTargetOrigin</h4>\n<p>When the micro frontend is not embedded in the Luigi Core application and there is no init handshake you can set the target origin that is used in postMessage function calls by Luigi Client. Typically used only in custom micro-frontend frameworks that are compatible with LuigiClient API.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-11\">Parameters</h5>\n<ul>\n  <li><code>origin</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> target origin</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-18\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.setTargetOrigin(window.location.origin)\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.7.3</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"sendcustommessage\">sendCustomMessage</h4>\n<p>Sends a custom message to the Luigi Core application.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-12\">Parameters</h5>\n<ul>\n  <li><code>message</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> an object containing data to be sent to the Luigi Core to process it further. This object is set as an input parameter of the custom message listener on the Luigi Core side\n    <ul>\n      <li><code>message.id</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> a string containing the message id</li>\n      <li><code>message.MY_DATA_FIELD</code> <strong>any</strong> any other message data field</li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-19\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.sendCustomMessage({id: 'environment.created', production: false})\nLuigiClient.sendCustomMessage({id: 'environment.created', data: environmentDataObj})\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.6.2</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getusersettings\">getUserSettings</h4>\n<p>Returns the current user settings based on the selected node.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-20\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">const userSettings = LuigiClient.getUserSettings()\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> current user settings</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.7.1</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getanchor\">getAnchor</h4>\n<p>Returns the current anchor based on active URL.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-21\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.getAnchor();\n</code></pre>\n</div>\n<p>Returns <strong>any</strong> anchor of URL</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.21.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"setanchor\">setAnchor</h4>\n<p>Sends anchor to Luigi Core. The anchor will be added to the URL.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-13\">Parameters</h5>\n<ul>\n  <li><code>anchor</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong></li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-22\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.setAnchor('luigi');\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.21.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"setviewgroupdata\">setViewGroupData</h4>\n<p>This function allows you to change node labels within the same <a href=\"/docs/navigation-advanced#view-groups\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">view group</a>, e.g. in your node config: <code>label: 'my Node {viewGroupData.vg1}'</code>.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-14\">Parameters</h5>\n<ul>\n  <li><code>data</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> a data object containing the view group name and desired label</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-23\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.setViewGroupData({'vg1':' Luigi rocks!'})\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 2.2.0</li>\n</ul>\n</section></section></section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"lifecycleinitlistenercallback\">Lifecycle~initListenerCallback</h3>\n<p>Callback of the addInitListener</p>\n<p>Type: <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\" rel=\"external\" target=\"_blank\">Function</a></p>\n<section class=\"h4Wrapper headingWrapper\"><h4 id=\"parameters-15\">Parameters</h4>\n<ul>\n  <li><code>context</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> current context data</li>\n  <li><code>origin</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> Luigi Core URL</li>\n</ul>\n</section></section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"lifecyclecustommessagelistenercallback\">Lifecycle~customMessageListenerCallback</h3>\n<p>Callback of the customMessageListener</p>\n<p>Type: <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\" rel=\"external\" target=\"_blank\">Function</a></p>\n<section class=\"h4Wrapper headingWrapper\"><h4 id=\"parameters-16\">Parameters</h4>\n<ul>\n  <li><code>customMessage</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> custom message object\n    <ul>\n      <li><code>customMessage.id</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> message id</li>\n      <li><code>customMessage.MY_DATA_FIELD</code> <strong>any</strong> any other message data field</li>\n    </ul>\n  </li>\n  <li><code>listenerId</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> custom message listener id to be used for unsubscription</li>\n</ul>\n</section></section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"linkmanager\">linkManager</h3>\n<p>The Link Manager allows you to navigate to another route. Use it instead of an internal router to:</p>\n<ul>\n  <li>Provide routing inside micro frontends.</li>\n  <li>Reflect the route.</li>\n  <li>Keep the navigation state in Luigi.</li>\n</ul>\n<section class=\"h4Wrapper headingWrapper\"><h4 id=\"navigatetointent\">navigateToIntent</h4>\n<p>\n  Offers an alternative way of navigating with intents. This involves specifying a semanticSlug and an object containing\n  parameters.\n  This method internally generates a URL of the form <code>#?intent=&#x3C;semantic object>-&#x3C;action>?&#x3C;param_name>=&#x3C;param_value></code> through the given\n  input arguments. This then follows a call to the original <code>linkManager.navigate(...)</code> function.\n  Consequently, the following calls shall have the exact same effect:\n</p>\n<ul>\n  <li>linkManager().navigateToIntent('Sales-settings', {project: 'pr2', user: 'john'})</li>\n  <li>linkManager().navigate('/#?intent=Sales-settings?project=pr2&#x26;user=john')</li>\n</ul>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-17\">Parameters</h5>\n<ul>\n  <li><code>semanticSlug</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> concatenation of semantic object and action connected with a dash (-), i.e.: <code>&#x3C;semanticObject>-&#x3C;action></code></li>\n  <li><code>params</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> an object representing all the parameters passed, i.e.: <code>{param1: '1', param2: 2, param3: 'value3'}</code>. (optional, default <code>{}</code>)</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-24\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.linkManager().navigateToIntent('Sales-settings', {project: 'pr2', user: 'john'})\nLuigiClient.linkManager().navigateToIntent('Sales-settings')\n</code></pre>\n</div>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"withoutsync\">withoutSync</h4>\n<p>\n  Disables the navigation handling for a single navigation request.\n  It prevents Luigi Core from handling the URL change after <code>navigate()</code>.\n  Used for auto-navigation.\n</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-25\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.linkManager().withoutSync().navigate('/projects/xy/foobar');\nLuigiClient.linkManager().withoutSync().fromClosestContext().navigate('settings');\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.7.7</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"newtab\">newTab</h4>\n<p>Enables navigating to a new tab.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-26\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.linkManager().newTab().navigate('/projects/xy/foobar');\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.16.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"preservequeryparams\">preserveQueryParams</h4>\n<p>Keeps the URL's query parameters for a navigation request.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-18\">Parameters</h5>\n<ul>\n  <li><code>preserve</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> By default, it is set to <code>false</code>. If it is set to <code>true</code>, the URL's query parameters will be kept after navigation. (optional, default <code>false</code>)</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-27\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.linkManager().preserveQueryParams(true).navigate('/projects/xy/foobar');\nLuigiClient.linkManager().preserveQueryParams(false).navigate('/projects/xy/foobar');\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.19.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getcurrentroute\">getCurrentRoute</h4>\n<p>Gets the luigi route associated with the current micro frontend.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-28\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.linkManager().getCurrentRoute();\nLuigiClient.linkManager().fromContext('project').getCurrentRoute();\nLuigiClient.linkManager().fromVirtualTreeRoot().getCurrentRoute();\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"external\" target=\"_blank\">promise</a></strong> a promise which resolves to a String value specifying the current luigi route</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.23.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"navigate\">navigate</h4>\n<p>Navigates to the given path in the application hosted by Luigi. It contains either a full absolute path or a relative path without a leading slash that uses the active route as a base. This is the standard navigation.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-19\">Parameters</h5>\n<ul>\n  <li><code>path</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> path to be navigated to</li>\n  <li><code>sessionId</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> current Luigi <strong>sessionId</strong></li>\n  <li><code>preserveView</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> preserve a view by setting it to <code>true</code>. It keeps the current view opened in the background and opens the new route in a new frame. Use the <a href=\"/docs/luigi-client-api#goback\" onclick=\"navigateInternal(event, this)\">goBack()</a> function to navigate back. You can use this feature across different levels. Preserved views are discarded as soon as you use the standard <a href=\"/docs/luigi-client-api#navigate\" onclick=\"navigateInternal(event, this)\">navigate()</a> function instead of <a href=\"/docs/luigi-client-api#goback\" onclick=\"navigateInternal(event, this)\">goBack()</a></li>\n  <li><code>modalSettings</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> opens a view in a modal. Use these settings to configure the modal's title and size\n    <ul>\n      <li><code>modalSettings.title</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> modal title. By default, it is the node label. If there is no label, it is left empty</li>\n      <li><code>modalSettings.size</code> <strong>(<code>\"fullscreen\"</code> | <code>\"l\"</code> | <code>\"m\"</code> | <code>\"s\"</code>)</strong> size of the modal (optional, default <code>\"l\"</code>)</li>\n      <li><code>modalSettings.width</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> lets you specify a precise width for the modal. Allowed units are 'px', '%', 'rem', 'em', 'vh' and 'vw'.</li>\n      <li><code>modalSettings.height</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> lets you specify a precise height for the modal. Allowed units are 'px', '%', 'rem', 'em', 'vh' and 'vw'.</li>\n    </ul>\n  </li>\n  <li><code>splitViewSettings</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> opens a view in a split view. Use these settings to configure the split view's behaviour\n    <ul>\n      <li><code>splitViewSettings.title</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> split view title. By default, it is the node label. If there is no label, it is left empty</li>\n      <li><code>splitViewSettings.size</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\" rel=\"external\" target=\"_blank\">number</a></strong> height of the split view in percent (optional, default <code>40</code>)</li>\n      <li><code>splitViewSettings.collapsed</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> creates split view but leaves it closed initially (optional, default <code>false</code>)</li>\n    </ul>\n  </li>\n  <li><code>drawerSettings</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> opens a view in a drawer. Use these settings to configure if the drawer has a header, backdrop and size.\n    <ul>\n      <li><code>drawerSettings.header</code> <strong>any</strong> By default, the header is visible. The default title is the node label, but the header could also be an object with a <code>title</code> attribute allowing you to specify your own title. An 'x' icon is displayed to close the drawer view.</li>\n      <li><code>drawerSettings.backdrop</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> By default, it is set to <code>false</code>. If it is set to <code>true</code> the rest of the screen has a backdrop.</li>\n      <li><code>drawerSettings.size</code> <strong>(<code>\"l\"</code> | <code>\"m\"</code> | <code>\"s\"</code> | <code>\"xs\"</code>)</strong> size of the drawer (optional, default <code>\"s\"</code>)</li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-29\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.linkManager().navigate('/overview')\nLuigiClient.linkManager().navigate('users/groups/stakeholders')\nLuigiClient.linkManager().navigate('/settings', null, true) // preserve view\nLuigiClient.linkManager().navigate('#?Intent=Sales-order?id=13') // intent navigation\n</code></pre>\n</div>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"updatemodalpathinternalnavigation\">updateModalPathInternalNavigation</h4>\n<p>Updates path of the modalPathParam when internal navigation occurs.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-20\">Parameters</h5>\n<ul>\n  <li><code>path</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong></li>\n  <li><code>modalSettings</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a>?</strong> opens a view in a modal. Use these settings to configure the modal's title and size (optional, default <code>{}</code>)</li>\n  <li><code>addHistoryEntry</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> adds an entry in the history (optional, default <code>false</code>)</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-30\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.linkManager().updateModalPathInternalNavigation('microfrontend')\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.21.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"openasmodal\">openAsModal</h4>\n<p>Opens a view in a modal. You can specify the modal's title and size. If you don't specify the title, it is the node label. If there is no node label, the title remains empty. The default size of the modal is <code>l</code>, which means 80%. You can also use <code>m</code> (60%) and <code>s</code> (40%) to set the modal size. Optionally, use it in combination with any of the navigation functions.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-21\">Parameters</h5>\n<ul>\n  <li><code>path</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> navigation path</li>\n  <li><code>modalSettings</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a>?</strong> opens a view in a modal. Use these settings to configure the modal's title and size (optional, default <code>{}</code>)\n    <ul>\n      <li><code>modalSettings.title</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> modal title. By default, it is the node label. If there is no label, it is left empty</li>\n      <li><code>modalSettings.size</code> <strong>(<code>\"fullscreen\"</code> | <code>\"l\"</code> | <code>\"m\"</code> | <code>\"s\"</code>)</strong> size of the modal (optional, default <code>\"l\"</code>)</li>\n      <li><code>modalSettings.width</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> lets you specify a precise width for the modal. Allowed units are 'px', '%', 'rem', 'em', 'vh' and 'vw'.</li>\n      <li><code>modalSettings.height</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> lets you specify a precise height for the modal. Allowed units are 'px', '%', 'rem', 'em', 'vh' and 'vw'.</li>\n      <li><code>modalSettings.keepPrevious</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> Lets you open multiple modals. Keeps the previously opened modal and allows to open another modal on top of the previous one. By default the previous modals are discarded.</li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-31\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.linkManager().openAsModal('projects/pr1/users', {title:'Users', size:'m'});\n</code></pre>\n</div>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"updatemodalsettings\">updateModalSettings</h4>\n<p>Update current title and size of a modal.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-22\">Parameters</h5>\n<ul>\n  <li><code>updatedModalSettings</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> possibility to update the active modal. (optional, default <code>{}</code>)\n    <ul>\n      <li><code>updatedModalSettings.title</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> update the <code>title</code> of the active modal.</li>\n      <li><code>updatedModalSettings.size</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> update the <code>size</code> of the active modal.</li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-32\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.linkManager().updateModalSettings({title:'LuigiModal', size:'l'});\n</code></pre>\n</div>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"openassplitview\">openAsSplitView</h4>\n<ul>\n  <li><strong>See: <a href=\"/docs/luigi-client-api#splitview\" onclick=\"navigateInternal(event, this)\">splitView</a> for further documentation about the returned instance</strong></li>\n</ul>\n<p>Opens a view in a split view. You can specify the split view's title and size. If you don't specify the title, it is the node label. If there is no node label, the title remains empty. The default size of the split view is <code>40</code>, which means 40% height of the split view.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-23\">Parameters</h5>\n<ul>\n  <li><code>path</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> navigation path</li>\n  <li><code>splitViewSettings</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> opens a view in a split view. Use these settings to configure the split view's behaviour (optional, default <code>{}</code>)\n    <ul>\n      <li><code>splitViewSettings.title</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> split view title. By default, it is the node label. If there is no label, it is left empty</li>\n      <li><code>splitViewSettings.size</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\" rel=\"external\" target=\"_blank\">number</a></strong> height of the split view in percent (optional, default <code>40</code>)</li>\n      <li><code>splitViewSettings.collapsed</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> opens split view in collapsed state (optional, default <code>false</code>)</li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-33\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">const splitViewHandle = LuigiClient.linkManager().openAsSplitView('projects/pr1/logs', {title: 'Logs', size: 40, collapsed: true});\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> instance of the SplitView. It provides Event listeners and you can use the available functions to control its behavior.</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.6.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"openasdrawer\">openAsDrawer</h4>\n<p>Opens a view in a drawer. You can specify the size of the drawer, whether the drawer has a header, and whether a backdrop is active in the background. By default, the header is shown. The backdrop is not visible and has to be activated. The size of the drawer is set to <code>s</code> by default, which means 25% of the micro frontend size. You can also use <code>l</code>(75%), <code>m</code>(50%) or <code>xs</code>(15.5%). Optionally, use it in combination with any of the navigation functions.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-24\">Parameters</h5>\n<ul>\n  <li><code>path</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> navigation path</li>\n  <li><code>drawerSettings</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> opens a view in a drawer. Use these settings to configure if the drawer has a header, backdrop and size. (optional, default <code>{}</code>)\n    <ul>\n      <li><code>drawerSettings.header</code> <strong>any</strong> By default, the header is visible. The default title is the node label, but the header could also be an object with a <code>title</code> attribute allowing you to specify your own title. An 'x' icon is displayed to close the drawer view.</li>\n      <li><code>drawerSettings.backdrop</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> By default, it is set to <code>false</code>. If it is set to <code>true</code> the rest of the screen has a backdrop.</li>\n      <li><code>drawerSettings.size</code> <strong>(<code>\"l\"</code> | <code>\"m\"</code> | <code>\"s\"</code> | <code>\"xs\"</code>)</strong> size of the drawer (optional, default <code>\"s\"</code>)</li>\n      <li><code>drawerSettings.overlap</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> enable resizing of main microfrontend iFrame after drawer open (optional, default <code>true</code>)</li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-34\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.linkManager().openAsDrawer('projects/pr1/drawer', {header:true, backdrop:true, size:'s'});\nLuigiClient.linkManager().openAsDrawer('projects/pr1/drawer', {header:{title:'My drawer component'}, backdrop:true, size:'xs'});\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.6.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"fromcontext\">fromContext</h4>\n<p>Sets the current navigation context to that of a specific parent node which has the <a href=\"/docs/navigation-configuration\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">navigationContext</a> field declared in the navigation configuration. This navigation context is then used by the <code>navigate</code> function.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-25\">Parameters</h5>\n<ul>\n  <li><code>navigationContext</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong></li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-35\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.linkManager().fromContext('project').navigate('/settings')\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"/docs/luigi-client-api#linkmanager\" onclick=\"navigateInternal(event, this)\">linkManager</a></strong> link manager instance</p>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"fromclosestcontext\">fromClosestContext</h4>\n<p>Sets the current navigation context which is then used by the <code>navigate</code> function. This has to be a parent navigation context, it is not possible to use the child navigation contexts.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-36\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.linkManager().fromClosestContext().navigate('/users/groups/stakeholders')\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"/docs/luigi-client-api#linkmanager\" onclick=\"navigateInternal(event, this)\">linkManager</a></strong> link manager instance</p>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"fromvirtualtreeroot\">fromVirtualTreeRoot</h4>\n<p>Sets the current navigation base to the parent node that is defined as virtualTree. This method works only when the currently active micro frontend is inside a virtualTree.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-37\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.linkManager().fromVirtualTreeRoot().navigate('/users/groups/stakeholders')\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"/docs/luigi-client-api#linkmanager\" onclick=\"navigateInternal(event, this)\">linkManager</a></strong> link manager instance</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.0.1</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"fromparent\">fromParent</h4>\n<p>Enables navigating to sibling nodes without knowing the absolute path.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-38\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.linkManager().fromParent().navigate('/sibling')\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"/docs/luigi-client-api#linkmanager\" onclick=\"navigateInternal(event, this)\">linkManager</a></strong> link manager instance</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.0.1</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"withparams\">withParams</h4>\n<p>Sends node parameters to the route. The parameters are used by the <code>navigate</code> function. Use it optionally in combination with any of the navigation functions and receive it as part of the context object in Luigi Client.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-26\">Parameters</h5>\n<ul>\n  <li><code>nodeParams</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong></li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-39\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.linkManager().withParams({foo: \"bar\"}).navigate(\"path\")\n\n// Can be chained with context setting functions such as:\nLuigiClient.linkManager().fromContext(\"currentTeam\").withParams({foo: \"bar\"}).navigate(\"path\")\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"/docs/luigi-client-api#linkmanager\" onclick=\"navigateInternal(event, this)\">linkManager</a></strong> link manager instance</p>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"withoptions\">withOptions</h4>\n<p>Sets options to customise route changing behaviour. The parameters are used by the <code>navigate</code> function. Use it optionally in combination with any of the navigation functions and receive it as part of the context object in Luigi Client.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-27\">Parameters</h5>\n<ul>\n  <li><code>options</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> navigation options\n    <ul>\n      <li><code>options.preventHistoryEntry</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> By default, it is set to <code>false</code>. If it is set to <code>true</code>, there is no browser history being kept.</li>\n      <li><code>options.preventContextUpdate</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> By default, it is set to <code>false</code>. If it is set to <code>true</code>, there is no context update being triggered.</li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-40\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.linkManager().withOptions(\n{ preventContextUpdate:true, preventHistoryEntry: true }\n).navigate('/overview')\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"/docs/luigi-client-api#linkmanager\" onclick=\"navigateInternal(event, this)\">linkManager</a></strong> link manager instance</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.25.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"pathexists\">pathExists</h4>\n<p>Checks if the path you can navigate to exists in the main application. For example, you can use this helper method conditionally to display a DOM element like a button.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-28\">Parameters</h5>\n<ul>\n  <li><code>path</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> path which existence you want to check</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-41\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">let pathExists;\n LuigiClient\n .linkManager()\n .pathExists('projects/pr2')\n .then(\n   (pathExists) => {  }\n );\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"external\" target=\"_blank\">promise</a></strong> a promise which resolves to a Boolean variable specifying whether the path exists or not</p>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"hasback\">hasBack</h4>\n<p>Checks if there is one or more preserved views. You can use it to show a <strong>back</strong> button.</p>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> indicating if there is a preserved view you can return to</p>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"goback\">goBack</h4>\n<p>Discards the active view and navigates back to the last visited view. Works with preserved views, and also acts as the substitute of the browser <strong>back</strong> button. <strong>goBackContext</strong> is only available when using preserved views.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-29\">Parameters</h5>\n<ul>\n  <li><code>goBackValue</code> <strong>any</strong> data that is passed in the <strong>goBackContext</strong> field to the last visited view when using preserved views</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-42\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.linkManager().goBack({ foo: 'bar' });\nLuigiClient.linkManager().goBack(true);\n</code></pre>\n</div>\n</section></section></section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"splitview\">splitView</h3>\n<p>\n  Split view\n  Allows to open a micro frontend in a split screen in the lower part of the content area. Open it by calling <code>const splitViewHandle = LuigiClient.linkManager().openAsSplitView</code>.\n  At a given time, you can open only one split view. It closes automatically when you navigate to a different route.\n  When you call <code>handle.collapse()</code>, the split view gets destroyed. It recreates when you use <code>handle.expand()</code>.\n  <code>openAsSplitView</code> returns an instance of the split view handle. The functions, actions, and event handlers listed below allow you to control and manage the split view.\n</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.6.0</li>\n</ul>\n<section class=\"h4Wrapper headingWrapper\"><h4 id=\"collapse\">collapse</h4>\n<p>Collapses the split view</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-43\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">splitViewHandle.collapse();\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.6.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"expand\">expand</h4>\n<p>Expands the split view</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-44\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">splitViewHandle.expand();\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.6.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"close\">close</h4>\n<p>Closes and destroys the split view</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-45\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">splitViewHandle.close();\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.6.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"setsize\">setSize</h4>\n<p>Sets the height of the split view</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-30\">Parameters</h5>\n<ul>\n  <li><code>value</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\" rel=\"external\" target=\"_blank\">number</a></strong> lower height in percent</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-46\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">splitViewHandle.setSize(60);\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.6.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"on\">on</h4>\n<p>Registers a listener for split view events</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-31\">Parameters</h5>\n<ul>\n  <li><code>name</code> <strong>(<code>\"expand\"</code> | <code>\"collapse\"</code> | <code>\"resize\"</code> | <code>\"close\"</code>)</strong> event name</li>\n  <li><code>callback</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\" rel=\"external\" target=\"_blank\">function</a></strong> gets called when this event gets triggered by Luigi</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-47\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">const listenerId = splitViewHandle.on('expand', () => {});\nconst listenerId = splitViewHandle.on('collapse', () => {});\nconst listenerId = splitViewHandle.on('resize', () => {});\nconst listenerId = splitViewHandle.on('close', () => {});\n*\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> listener id</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.6.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"removeeventlistener\">removeEventListener</h4>\n<p>Unregisters a split view listener</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-32\">Parameters</h5>\n<ul>\n  <li><code>id</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> listener id</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-48\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">splitViewHandle.removeEventListener(listenerId);\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.6.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"exists\">exists</h4>\n<p>Gets the split view status</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-49\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">splitViewHandle.exists();\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> true if a split view is loaded</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.6.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getsize\">getSize</h4>\n<p>Reads the size of the split view</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-50\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">splitViewHandle.getSize();\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\" rel=\"external\" target=\"_blank\">number</a></strong> height in percent</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.6.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"iscollapsed\">isCollapsed</h4>\n<p>Reads the collapse status</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-51\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">splitViewHandle.isCollapsed();\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> true if the split view is currently collapsed</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.6.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"isexpanded\">isExpanded</h4>\n<p>Reads the expand status</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-52\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">splitViewHandle.isExpanded();\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> true if the split view is currently expanded</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.6.0</li>\n</ul>\n</section></section></section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"uxmanager\">uxManager</h3>\n<p>Use the UX Manager to manage the appearance features in Luigi.</p>\n<section class=\"h4Wrapper headingWrapper\"><h4 id=\"showloadingindicator\">showLoadingIndicator</h4>\n<p>Adds a backdrop with a loading indicator for the micro frontend frame. This overrides the <a href=\"/docs/navigation-parameters-reference#node-parameters\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">loadingIndicator.enabled</a> setting.</p>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"hideloadingindicator\">hideLoadingIndicator</h4>\n<p>Removes the loading indicator. Use it after calling <a href=\"/docs/luigi-client-api#showloadingindicator\" onclick=\"navigateInternal(event, this)\">showLoadingIndicator()</a> or to hide the indicator when you use the <a href=\"/docs/navigation-parameters-reference#node-parameters\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">loadingIndicator.hideAutomatically: false</a> node configuration.</p>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"closecurrentmodal\">closeCurrentModal</h4>\n<p>Closes the currently opened micro frontend modal.</p>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"addbackdrop\">addBackdrop</h4>\n<p>Adds a backdrop to block the top and side navigation. It is based on the Fundamental UI Modal, which you can use in your micro frontend to achieve the same behavior.</p>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"removebackdrop\">removeBackdrop</h4>\n<p>Removes the backdrop.</p>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"setdirtystatus\">setDirtyStatus</h4>\n<p>This method informs the main application that there are unsaved changes in the current view in the iframe. It can be used to prevent navigation away from the current view, for example with form fields which were edited but not submitted. However, this functionality is not restricted to forms. If you use <code>withoutSync()</code> together with <code>setDirtyStatus()</code>, this is a special case in which the dirty state logic needs to be handled by the micro frontend. For example, if the user navigates with an Angular router, which would trigger <code>withoutSync()</code>, Angular needs to take care about dirty state, prevent the navigation and ask for permission to navigate away, through <code>uxManager().showConfirmationModal(settings)</code>.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-33\">Parameters</h5>\n<ul>\n  <li><code>isDirty</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> indicates if there are any unsaved changes on the current page or in the component</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"showconfirmationmodal\">showConfirmationModal</h4>\n<p>Shows a confirmation modal.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-34\">Parameters</h5>\n<ul>\n  <li><code>settings</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> the settings of the confirmation modal. If you don't provide any value for any of the fields, a default value is used\n    <ul>\n      <li><code>settings.type</code> <strong>(<code>\"confirmation\"</code> | <code>\"success\"</code> | <code>\"warning\"</code> | <code>\"error\"</code> | <code>\"information\"</code>)</strong> the content of the modal type. (Optional)</li>\n      <li><code>settings.header</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> the content of the modal header (optional, default <code>\"Confirmation\"</code>)</li>\n      <li><code>settings.body</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> the content of the modal body. It supports HTML formatting elements such as <code>&#x3C;br></code>, <code>&#x3C;b></code>, <code>&#x3C;strong></code>, <code>&#x3C;i></code>, <code>&#x3C;em></code>, <code>&#x3C;mark></code>, <code>&#x3C;small></code>, <code>&#x3C;del></code>, <code>&#x3C;ins></code>, <code>&#x3C;sub></code>, <code>&#x3C;sup></code>. (optional, default <code>\"Are you sure you want to do this?\"</code>)</li>\n      <li><code>settings.buttonConfirm</code> <strong>(<a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a> | <code>false</code>)</strong> the label for the modal confirmation button. If set to <code>false</code>, the button will not be shown. (optional, default <code>\"Yes\"</code>)</li>\n      <li><code>settings.buttonDismiss</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> the label for the modal dismiss button (optional, default <code>\"No\"</code>)</li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-53\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">import LuigiClient from '@luigi-project/client';\nconst settings = {\n type: \"confirmation\",\n header: \"Confirmation\",\n body: \"Are you sure you want to do this?\",\n buttonConfirm: \"Yes\",\n buttonDismiss: \"No\"\n}\nLuigiClient\n .uxManager()\n .showConfirmationModal(settings)\n .then(() => {\n    // Logic to execute when the confirmation modal is dismissed\n });\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"external\" target=\"_blank\">promise</a></strong> which is resolved when accepting the confirmation modal and rejected when dismissing it</p>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"showalert\">showAlert</h4>\n<p>Shows an alert.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-35\">Parameters</h5>\n<ul>\n  <li><code>settings</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> the settings for the alert\n    <ul>\n      <li><code>settings.text</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> the content of the alert. To add a link to the content, you have to set up the link in the <code>links</code> object. The key(s) in the <code>links</code> object must be used in the text to reference the links, wrapped in curly brackets with no spaces. If you don't specify any text, the alert is not displayed</li>\n      <li><code>settings.type</code> <strong>(<code>\"info\"</code> | <code>\"success\"</code> | <code>\"warning\"</code> | <code>\"error\"</code>)</strong> sets the type of alert</li>\n      <li><code>settings.links</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> provides links data\n        <ul>\n          <li><code>settings.links.LINK_KEY</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> object containing the data for a particular link. To properly render the link in the alert message refer to the description of the <strong>settings.text</strong> parameter\n            <ul>\n              <li><code>settings.links.LINK_KEY.text</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> text which replaces the link identifier in the alert content</li>\n              <li><code>settings.links.LINK_KEY.url</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> URL to navigate when you click the link. Currently, only internal links are supported in the form of relative or absolute paths</li>\n              <li><code>settings.links.LINK_KEY.dismissKey</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> dismissKey which represents the key of the link.</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li><code>settings.closeAfter</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\" rel=\"external\" target=\"_blank\">number</a></strong> (optional) time in milliseconds that tells Luigi when to close the Alert automatically. If not provided, the Alert will stay on until closed manually. It has to be greater than <code>100</code></li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-54\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">import LuigiClient from '@luigi-project/client';\nconst settings = {\n text: \"Ut enim ad minim veniam, {goToHome} quis nostrud exercitation ullamco {relativePath}. Duis aute irure dolor {goToOtherProject}\",\n type: 'info',\n links: {\n   goToHome: { text: 'homepage', url: '/overview' },\n   goToOtherProject: { text: 'other project', url: '/projects/pr2' },\n   relativePath: { text: 'relative hide side nav', url: 'hideSideNav' },\n   neverShowItAgain: { text: 'Never show it again', dismissKey: 'neverShowItAgain' }\n },\n closeAfter: 3000\n}\nLuigiClient\n .uxManager()\n .showAlert(settings)\n .then(() => {\n    // Logic to execute when the alert is dismissed\n });\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"external\" target=\"_blank\">promise</a></strong> which is resolved when the alert is dismissed</p>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getcurrentlocale\">getCurrentLocale</h4>\n<p>Gets the current locale.</p>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> current locale</p>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"setcurrentlocale\">setCurrentLocale</h4>\n<p>Sets current locale to the specified one.</p>\n<p><strong>NOTE:</strong> this must be explicitly allowed on the navigation node level by setting <code>clientPermissions.changeCurrentLocale</code> to <code>true</code>. (See <a href=\"/docs/navigation-parameters-reference\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Node parameters</a>.)</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-36\">Parameters</h5>\n<ul>\n  <li><code>locale</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> locale to be set as the current locale</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"issplitview\">isSplitView</h4>\n<p>Checks if the current micro frontend is displayed inside a split view</p>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> indicating if it is loaded inside a split view</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.6.0</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"ismodal\">isModal</h4>\n<p>Checks if the current micro frontend is displayed inside a modal</p>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> indicating if it is loaded inside a modal</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.6.0</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"isdrawer\">isDrawer</h4>\n<p>Checks if the current micro frontend is displayed inside a drawer</p>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> indicating if it is loaded inside a drawer</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.26.0</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getcurrenttheme\">getCurrentTheme</h4>\n<p>Gets the current theme.</p>\n<p>Returns <strong>any</strong> current themeObj</p>\n</section></section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"storagemanager\">storageManager</h3>\n<p>\n  StorageManager allows you to use browser local storage of key/values. Every storage operation is sent to be managed by Luigi Core.\n  The idea is that different micro frontends can share or persist items using local storage, as long as they come from the same domain and follow the <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\" rel=\"external\" target=\"_blank\">same-origin policy</a>.\n  Since all storage operations are asynchronous (sending an event to Luigi Core that will reply once operation is finished), all the methods return Promises.\n</p>\n<section class=\"h4Wrapper headingWrapper\"><h4 id=\"setitem\">setItem</h4>\n<p>Stores an item for a specific key.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-37\">Parameters</h5>\n<ul>\n  <li><code>key</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> key used to identify the value</li>\n  <li><code>value</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> item to store; object must be stringifyable</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-55\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.storageManager().setItem('keyExample','valueExample').then(() => console.log('Value stored'))\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"external\" target=\"_blank\">Promise</a>&#x3C;void></strong> resolves an empty value when the storage operation is over. It will launch an error if storage is not supported, the value cannot be stringified, or if you are using a Luigi reserved key.</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.6.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getitem\">getItem</h4>\n<p>Retrieves an item for a specific key.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-38\">Parameters</h5>\n<ul>\n  <li><code>key</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> used to identify the value</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-56\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.storageManager().getItem('keyExample').then((value) => console.log);\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"external\" target=\"_blank\">Promise</a>&#x3C;<a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a>></strong> resolves an item retrieved from storage. It will launch an error if storage is not supported.</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.6.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"removeitem\">removeItem</h4>\n<p>Removes an item for a specific key.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-39\">Parameters</h5>\n<ul>\n  <li><code>key</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> used to identify the value</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-57\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.storageManager().removeItem('keyExample').then((value) => console.log(value + ' just removed')\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"external\" target=\"_blank\">Promise</a>&#x3C;<a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a>></strong> resolves an item just removed from storage. It will launch an error if storage is not supported or if you are using a Luigi reserved key.</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.6.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"clear\">clear</h4>\n<p>Clears all the storage key/values.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-58\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.storageManager().clear().then(() => console.log('storage cleared'))\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"external\" target=\"_blank\">Promise</a>&#x3C;void></strong> resolves when storage clear is over.</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.6.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"has\">has</h4>\n<p>Checks if a key is present in storage.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-40\">Parameters</h5>\n<ul>\n  <li><code>key</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> key in the storage</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-59\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.storageManager().has(key).then((present) => console.log('item is present '+present))\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"external\" target=\"_blank\">Promise</a>&#x3C;<a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a>></strong> <code>true</code> if key is present, <code>false</code> if it is not</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.6.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getallkeys\">getAllKeys</h4>\n<p>Gets all the keys used in the storage.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-60\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">LuigiClient.storageManager().getAllKeys().then((keys) => console.log('keys are '+keys))\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"external\" target=\"_blank\">Promise</a>&#x3C;<a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array\" rel=\"external\" target=\"_blank\">Array</a>&#x3C;<a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a>>></strong> keys currently present in the storage</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.6.0</li>\n</ul>\n</section></section></section></section></section></section>"}},{"name":"luigi-client-setup.md","shortName":"luigi-client-setup","contents":{"data":{},"messages":[],"history":[],"cwd":"/Users/I529989/Documents/SAP/32-luigi/website/docs","value":"<section class=\"h0Wrapper headingWrapper\">\n<section class=\"h1Wrapper headingWrapper\"><h1 id=\"luigi-client-installation\">Luigi Client Installation</h1>\n<p>Luigi Client contains a library that allows your application to use all features of the Luigi framework.</p>\n<section class=\"h2Wrapper headingWrapper\"><h2 id=\"installation\">Installation</h2>\n<p>Install the client in your project using npm:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-bash\">npm install @luigi-project/client\n</code></pre>\n</div>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"configuration\">Configuration</h2>\n<p>Import the client in places where you want to use it, depending on the environment of your choice:</p>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"no-frameworksvelte\">No framework/Svelte</h3>\n<p>Add this line to the imports section of the <code>src/main.js</code> file:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">import LuigiClient from '@luigi-project/client';\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"angular\">Angular</h3>\n<p>Add this line to the imports section of the <code>src/app/app.component.ts</code> file:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">import LuigiClient from '@luigi-project/client';\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"sapui5openui5\">SAPUI5/OpenUI5</h3>\n<p>Add this to the <code>webapp/home/Home.controller.js</code> file:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-js\">sap.ui.define(\n  [\n    'sap/ui/core/mvc/Controller',\n    'sap/ui/core/UIComponent',\n    'luigi/demo/libs/luigi-client/luigi-client'\n  ],\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"vue\">Vue</h3>\n<p>Add this line to the imports section of the <code>src/main.js</code> file:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-js\">import LuigiClient from '@luigi-project/client';\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"react\">React</h3>\n<p>Add this line to the imports section of the <code>src/App.js</code> file:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">import LuigiClient from '@luigi-project/client';\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"nextjs\">Next.JS</h3><!-- add-attribute:class:success -->\n<blockquote class=\"success\">\n  <p><strong>TIP:</strong> You can find an Next.JS example using Luigi Client <a href=\"https://github.com/SAP/luigi/blob/main/core/examples/luigi-example-next/pages/sample1.js\" rel=\"external\" target=\"_blank\">here</a>.</p>\n</blockquote>\n<ol>\n  <li>Add this line to the imports section of the <code>src/App.js</code> file:</li>\n</ol>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">import LuigiClient from '@luigi-project/client';\n</code></pre>\n</div>\n<ol start=\"2\">\n  <li>Add the <code>useEffect</code> function:</li>\n</ol>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">import { useEffect } from 'react'\n \n export default function Home() {\n  // recommended by https://nextjs.org/docs/migrating/from-create-react-app#safely-accessing-web-apis\n  useEffect(() => {\n    var luigiClient = require('@luigi-project/client');\n    console.log(\"Load LuigiClient in useEffect: \" + luigiClient);\n  }, [])\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"other\">Other</h3>\n<p>If you are not using any bundler, Luigi is also available as a global object:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">window.LuigiClient\n</code></pre>\n</div><!-- add-attribute:class:success -->\n<blockquote class=\"success\">\n  <p><strong>TIP:</strong> You can see Luigi Client in action by running the <a href=\"https://github.com/SAP/luigi/blob/main/test/e2e-test-application\" rel=\"external\" target=\"_blank\">Angular example application</a>.</p>\n</blockquote>\n</section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"usage\">Usage</h2>\n<p>This section contains additional instructions and guidelines you can use to work with Luigi Client.</p>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"luigi-client-api\">Luigi Client API</h3>\n<p>In the <a href=\"/docs/luigi-client-api\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Luigi Client API</a>, you will find functions that will allow you to configure your micro frontend in the context of the main Luigi Core app.</p>\n<p>For example, if you want to use the function <code>addInitListener</code> in order to display a Luigi <a href=\"/docs/luigi-client-api#showalert\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">alert</a> in the micro frontend, it can look like this:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-js\">useEffect(() => {\n    const LuigiClient = require('@luigi-project/client');\n    LuigiClient.addInitListener(function(context) {\n        LuigiClient.showAlert({text: 'Hello'});\n    });\n  }, []);\n</code></pre>\n</div>\n</section></section></section></section>"}},{"name":"luigi-core-api.md","shortName":"luigi-core-api","contents":{"data":{},"messages":[],"history":[],"cwd":"/Users/I529989/Documents/SAP/32-luigi/website/docs","value":"<section class=\"h0Wrapper headingWrapper\">\n<section class=\"h1Wrapper headingWrapper\"><h1 id=\"luigi-core-api\">Luigi Core API</h1>\n<p>This document outlines the features provided by the Luigi Core API. It covers these topics:</p>\n<ul>\n  <li><a href=\"/docs/luigi-core-api#luigi-config\" onclick=\"navigateInternal(event, this)\">Configuration</a> - functions related to Luigi configuration</li>\n  <li><a href=\"/docs/luigi-core-api#elements\" onclick=\"navigateInternal(event, this)\">Elements</a> - functions related to DOM elements</li>\n  <li><a href=\"/docs/luigi-core-api#authorization\" onclick=\"navigateInternal(event, this)\">Authorization</a> - authorization options for Luigi</li>\n  <li><a href=\"/docs/luigi-core-api#luiginavigation\" onclick=\"navigateInternal(event, this)\">Navigation</a> - functions related to Luigi navigation</li>\n  <li><a href=\"/docs/luigi-core-api#luigii18n\" onclick=\"navigateInternal(event, this)\">Localization</a> - options related to language, translation, and localization</li>\n  <li><a href=\"/docs/luigi-core-api#custommessages\" onclick=\"navigateInternal(event, this)\">Custom messages</a> - custom messages between Luigi Core and micro frontends</li>\n  <li><a href=\"/docs/luigi-core-api#ux\" onclick=\"navigateInternal(event, this)\">UX</a> - functions related to Luigi's appearance and user interface</li>\n  <li><a href=\"/docs/luigi-core-api#globalsearch\" onclick=\"navigateInternal(event, this)\">Global search</a> - functions related to Luigi's global search</li>\n  <li><a href=\"/docs/luigi-core-api#theming\" onclick=\"navigateInternal(event, this)\">Theming</a> - functions related to Luigi theming capabilties</li>\n  <li><a href=\"/docs/luigi-core-api#featuretoggles\" onclick=\"navigateInternal(event, this)\">Feature toggles</a> - functions related to Luigi's feature toggle mechanism</li>\n  <li><a href=\"/docs/luigi-core-api#routing\" onclick=\"navigateInternal(event, this)\">Routing</a> - functions to get and set search query parameters</li>\n</ul>\n<section class=\"h2Wrapper headingWrapper\"><h2 id=\"luigi-config\">Luigi Config</h2><!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"configuration\">Configuration</h3>\n<section class=\"h4Wrapper headingWrapper\"><h4 id=\"setconfig\">setConfig</h4>\n<p>Sets the configuration for Luigi initially. Can also be called at a later point in time again to update the configuration.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters\">Parameters</h5>\n<ul>\n  <li><code>configInput</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> the Luigi Core configuration object</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.setConfig({\n  navigation: {\n    nodes: () => [\n      {\n        pathSegment: 'home',\n        label: 'Home',\n        children: [\n          {\n            pathSegment: 'hello',\n            label: 'Hello Luigi!',\n            viewUrl: '/assets/basicexternal.html'\n          }\n        ]\n      }\n    ]\n  },\n  routing: {\n    useHashRouting: true\n  }\n})\n</code></pre>\n</div>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getconfig\">getConfig</h4>\n<p>Returns the current active configuration</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-1\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.getConfig()\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> configuration object</p>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"configchanged\">configChanged</h4>\n<p>Tells Luigi that the configuration has been changed. Luigi will update the application or parts of it based on the specified scope.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-1\">Parameters</h5>\n<ul>\n  <li><code>scope</code> <strong>...<a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> one or more scope selectors specifying what parts of the configuration were changed. If no scope selector is provided, the whole configuration is considered changed.\n    <p>The supported scope selectors are:</p>\n    <p></p>\n    <ul>\n      <li><code>navigation</code>: the navigation part of the configuration was changed. This includes navigation nodes, the context switcher, the product switcher and the profile menu.</li>\n      <li><code>navigation.nodes</code>: navigation nodes were changed.</li>\n      <li><code>navigation.contextSwitcher</code>: context switcher related data were changed.</li>\n      <li><code>navigation.productSwitcher</code>: product switcher related data were changed.</li>\n      <li><code>navigation.profile</code>: profile menu was changed.</li>\n      <li><code>settings</code>: settings were changed.</li>\n      <li><code>settings.header</code>: header settings (title, icon) were changed.</li>\n      <li><code>settings.footer</code>: left navigation footer settings were changed.</li>\n    </ul>\n  </li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getconfigvalue\">getConfigValue</h4>\n<p>Gets value of the given property on Luigi config object. Target can be a value or a synchronous function.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-2\">Parameters</h5>\n<ul>\n  <li><code>property</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> the object traversal path</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-2\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.getConfigValue('auth.use')\nLuigi.getConfigValue('settings.sideNavFooterText')\n</code></pre>\n</div>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getconfigbooleanvalue\">getConfigBooleanValue</h4>\n<p>\n  Gets boolean value of the given property on Luigi config object.\n  Function return true if the property value is equal true or 'true'. Otherwise the function returns false.\n</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-3\">Parameters</h5>\n<ul>\n  <li><code>property</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> the object traversal path</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-3\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.getConfigBooleanValue('settings.hideNavigation')\n</code></pre>\n</div>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getconfigvalueasync\">getConfigValueAsync</h4>\n<p>\n  Gets value of the given property on the Luigi config object.\n  If the value is a Function it is called (with the given parameters) and the result of that call is the value.\n  If the value is not a Promise it is wrapped to a Promise so that the returned value is definitely a Promise.\n</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-4\">Parameters</h5>\n<ul>\n  <li><code>property</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> the object traversal path</li>\n  <li><code>parameters</code> <strong>any</strong> optional parameters that are used if the target is a function</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-4\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.getConfigValueAsync('navigation.nodes')\nLuigi.getConfigValueAsync('navigation.profile.items')\nLuigi.getConfigValueAsync('navigation.contextSwitcher.options')\n</code></pre>\n</div>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"isauthorizationenabled\">isAuthorizationEnabled</h4>\n<p>Detects if authorization is enabled via configuration.</p>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> returns true if authorization is enabled. Otherwise returns false.</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>deprecated</strong>: now located in Luigi.auth() instead of Luigi</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"unload\">unload</h4>\n<p>Unloads the current Luigi instance, which can be initialized later again by using <code>Luigi.setConfig({...})</code></p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-5\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.unload()\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.2.2</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"readusersettings\">readUserSettings</h4>\n<p>\n  Reads the user settings object.\n  You can choose a custom storage to read the user settings by implementing the <code>userSetting.readUserSettings</code> function in the settings section of the Luigi configuration.\n  By default, the user settings will be read from the <strong>localStorage</strong>\n</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-6\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.readUserSettings();\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"external\" target=\"_blank\">promise</a></strong> a promise when a custom <code>readUserSettings</code> function in the settings.userSettings section of the Luigi configuration is implemented. It resolves a stored user settings object. If the promise is rejected the user settings dialog will also closed if the error object has a <code>closeDialog</code> property, e.g <code>reject({ closeDialog: true, message: 'some error' })</code>. In addition a custom error message can be logged to the browser console.</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.7.1</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"storeusersettings\">storeUserSettings</h4>\n<p>\n  Stores the user settings object.\n  You can choose a custom storage to write the user settings by implementing the <code>userSetting.storeUserSettings</code> function in the settings section of the Luigi configuration\n  By default, the user settings will be written from the <strong>localStorage</strong>\n</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-5\">Parameters</h5>\n<ul>\n  <li><code>userSettingsObj</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> to store in the storage.</li>\n  <li><code>previousUserSettingsObj</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> the previous object from storage.</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-7\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.storeUserSettings(userSettingsobject, previousUserSettingsObj);\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"external\" target=\"_blank\">promise</a></strong> a promise when a custom <code>storeUserSettings</code> function in the settings.userSettings section of the Luigi configuration is implemented. If it is resolved the user settings dialog will be closed. If the promise is rejected the user settings dialog will also closed if the error object has a <code>closeDialog</code> property, e.g <code>reject({ closeDialog: true, message: 'some error' })</code>. In addition a custom error message can be logged to the browser console.</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.7.1</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"reset\">reset</h4>\n<p>Reset the current Luigi instance and initialize Luigi with the latest Luigi config.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-8\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.reset();\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.14.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"clearnavigationcache\">clearNavigationCache</h4>\n<p>Clear navigation node related caches.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-9\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.clearNavigationCache();\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.19.0</li>\n</ul>\n</section></section></section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"luigielements\">Luigi.elements()</h2><!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"elements\">Elements</h3>\n<p>Use these functions to get DOM elements.</p>\n<section class=\"h4Wrapper headingWrapper\"><h4 id=\"getluigicontainer\">getLuigiContainer</h4>\n<p>Returns the container of the Luigi content.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-10\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.elements().getLuigiContainer();\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/HTML/Element\" rel=\"external\" target=\"_blank\">HTMLElement</a></strong> the DOM element that wraps the Luigi content</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.6.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getshellbar\">getShellbar</h4>\n<p>Returns the shellbar component.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-11\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.elements().getShellbar();\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/HTML/Element\" rel=\"external\" target=\"_blank\">HTMLElement</a></strong> the shellbar DOM element</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.4.12</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getshellbaractions\">getShellbarActions</h4>\n<p>Returns the shellbar actions component.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-12\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.elements().getShellbarActions();\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/HTML/Element\" rel=\"external\" target=\"_blank\">HTMLElement</a></strong> the shellbar actions DOM element</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.4.12</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getmicrofrontends\">getMicrofrontends</h4>\n<p>Returns a list of all available micro frontends.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-13\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.elements().getMicrofrontends();\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array\" rel=\"external\" target=\"_blank\">Array</a>&#x3C;{id: <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a>, active: <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a>, container: <a href=\"https://developer.mozilla.org/docs/Web/HTML/Element\" rel=\"external\" target=\"_blank\">HTMLElement</a>, type: (<code>\"main\"</code> | <code>\"split-view\"</code> | <code>\"modal\"</code>)}></strong> list of objects defining all micro frontends from the DOM</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.6.2</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getmicrofrontendiframes\">getMicrofrontendIframes</h4>\n<p>Returns all micro frontend iframes including the iframe from the modal if it exists.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-14\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.elements().getMicrofrontendIframes();\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array\" rel=\"external\" target=\"_blank\">Array</a>&#x3C;<a href=\"https://developer.mozilla.org/docs/Web/HTML/Element\" rel=\"external\" target=\"_blank\">HTMLElement</a>></strong> an array of all micro frontend iframes from the DOM</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.4.12</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getcurrentmicrofrontendiframe\">getCurrentMicrofrontendIframe</h4>\n<p>\n  Returns the active micro frontend iframe.\n  If there is a modal, which includes the micro frontend iframe, the function returns this iframe.\n</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-15\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.elements().getCurrentMicrofrontendIframe();\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/HTML/Element\" rel=\"external\" target=\"_blank\">HTMLElement</a></strong> the active micro frontend iframe DOM element</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.4.12</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getnavfootercontainer\">getNavFooterContainer</h4>\n<p>Returns a navigation footer container.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-16\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.elements().getNavFooterContainer();\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/HTML/Element\" rel=\"external\" target=\"_blank\">HTMLElement</a></strong> the navigation footer DOM element</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.21.0</li>\n</ul>\n</section></section></section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"luigiauth\">Luigi.auth()</h2><!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"authorization\">Authorization</h3>\n<p>Authorization helpers</p>\n<section class=\"h4Wrapper headingWrapper\"><h4 id=\"isauthorizationenabled-1\">isAuthorizationEnabled</h4>\n<p>\n  Detects if authorization is enabled via configuration.\n  Read more about <a href=\"/docs/authorization-configuration\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">custom authorization providers</a>.\n</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-17\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.auth().isAuthorizationEnabled();\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> <code>true</code> if authorization is enabled. Otherwise returns <code>false</code>.</p>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"login\">login</h4>\n<p>\n  Login the user dynamically.\n  This will run the same functionality as though the user clicked the login button.\n</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-18\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.auth().login();\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.5.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"logout\">logout</h4>\n<p>\n  Logout the user dynamically.\n  This will run the same functionality as though the user clicked the logout button.\n</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-19\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.auth().logout();\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.5.0</li>\n</ul>\n</section></section></section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"authorizationstore\">AuthorizationStore</h3>\n<p>\n  Authorization Storage helpers, to be used in your custom authorization provider.\n  Read more about custom authorization providers <a href=\"/docs/authorization-configuration#implement-a-custom-authorization-provider\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">here</a>.\n</p>\n<section class=\"h4Wrapper headingWrapper\"><h4 id=\"getstoragekey\">getStorageKey</h4>\n<p>Retrieves the key name that is used to store the auth data.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-20\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.auth().store.getStorageKey()\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> name of the store key</p>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getstoragetype\">getStorageType</h4>\n<p>Retrieves the storage type that is used to store the auth data. To set it, use the <code>storage</code> property of the <code>auth</code> Luigi configuration object. Find out more <a href=\"https://docs.luigi-project.io/docs/authorization-configuration?section=general-authorization-options\" rel=\"external\" target=\"_blank\">here</a>.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-21\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.auth().store.getStorageType()\n</code></pre>\n</div>\n<p>Returns <strong>(<code>\"localStorage\"</code> | <code>\"sessionStorage\"</code> | <code>\"none\"</code>)</strong> storage type</p>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getauthdata\">getAuthData</h4>\n<p>Retrieves the current auth object.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-22\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.auth().store.getAuthData()\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"/docs/luigi-core-api#authdata\" onclick=\"navigateInternal(event, this)\">AuthData</a></strong> the current auth data object</p>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"setauthdata\">setAuthData</h4>\n<p>Sets authorization data</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-6\">Parameters</h5>\n<ul>\n  <li><code>data</code> <strong><a href=\"/docs/luigi-core-api#authdata\" onclick=\"navigateInternal(event, this)\">AuthData</a></strong> new auth data object</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-23\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.auth().store.setAuthData(data)\n</code></pre>\n</div>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"removeauthdata\">removeAuthData</h4>\n<p>Clears authorization data from store</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-24\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.auth().store.removeAuthData()\n</code></pre>\n</div>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"setnewlyauthorized\">setNewlyAuthorized</h4>\n<p>Defines a new authorization session. Must be triggered after initial <code>setAuthData()</code> in order to trigger <strong>onAuthSuccessful</strong> event after login.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-25\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.auth().store.setNewlyAuthorized()\n</code></pre>\n</div>\n</section></section></section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"authdata\">AuthData</h3>\n<p>Authorization object that is stored in auth store and used within Luigi. It is then available in <a href=\"/docs/luigi-client-api#addInitListener\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">LuigiClient.addInitListener</a> and can also be used in the Core configuration.</p>\n<p>Type: <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></p>\n<section class=\"h4Wrapper headingWrapper\"><h4 id=\"properties\">Properties</h4>\n<ul>\n  <li><code>accessToken</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> access token value</li>\n  <li><code>accessTokenExpirationDate</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> timestamp value</li>\n  <li><code>scope</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> scope, can be empty if it is not required</li>\n  <li><code>idToken</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> id token, used for renewing authentication</li>\n</ul>\n</section></section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"luiginavigation\">Luigi.navigation()</h2><!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"luiginavigation-1\">LuigiNavigation</h3>\n<p>Use these functions for navigation-related features.</p>\n<section class=\"h4Wrapper headingWrapper\"><h4 id=\"updatetopnavigation\">updateTopNavigation</h4>\n<p>Refreshes top navigation badge counters by rendering the navigation again.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-26\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.navigation().updateTopNavigation();\n</code></pre>\n</div>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"navigate\">navigate</h4>\n<p>Navigates to the given path in the application. It contains either a full absolute path or a relative path without a leading slash that uses the active route as a base. This is the standard navigation.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-7\">Parameters</h5>\n<ul>\n  <li><code>path</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> path to be navigated to</li>\n  <li><code>preserveView</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> preserve a view by setting it to <code>true</code>. It keeps the current view opened in the background and opens the new route in a new frame. Use the <a href=\"/docs/luigi-core-api#goback\" onclick=\"navigateInternal(event, this)\">goBack()</a> function to navigate back. You can use this feature across different levels. Preserved views are discarded as soon as you use the standard <a href=\"/docs/luigi-core-api#navigate\" onclick=\"navigateInternal(event, this)\">navigate()</a> function instead of <a href=\"/docs/luigi-core-api#goback\" onclick=\"navigateInternal(event, this)\">goBack()</a></li>\n  <li><code>modalSettings</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> opens a view in a modal. Use these settings to configure the modal's title and size\n    <ul>\n      <li><code>modalSettings.title</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> modal title. By default, it is the node label. If there is no label, it is left empty</li>\n      <li><code>modalSettings.size</code> <strong>(<code>\"fullscreen\"</code> | <code>\"l\"</code> | <code>\"m\"</code> | <code>\"s\"</code>)</strong> size of the modal (optional, default <code>\"l\"</code>)</li>\n      <li><code>modalSettings.width</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> lets you specify a precise width for the modal. Allowed units are 'px', '%', 'rem', 'em', 'vh' and 'vw'.</li>\n      <li><code>modalSettings.height</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> lets you specify a precise height for the modal. Allowed units are 'px', '%', 'rem', 'em', 'vh' and 'vw'.</li>\n    </ul>\n  </li>\n  <li><code>splitViewSettings</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> opens a view in a split view. Use these settings to configure the split view's behaviour\n    <ul>\n      <li><code>splitViewSettings.title</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> split view title. By default, it is the node label. If there is no label, it is left empty</li>\n      <li><code>splitViewSettings.size</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\" rel=\"external\" target=\"_blank\">number</a></strong> height of the split view in percent (optional, default <code>40</code>)</li>\n      <li><code>splitViewSettings.collapsed</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> opens split view in collapsed state (optional, default <code>false</code>)</li>\n    </ul>\n  </li>\n  <li><code>drawerSettings</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> opens a view in a drawer. Use these settings to configure if the drawer has a header, backdrop and size.\n    <ul>\n      <li><code>drawerSettings.header</code> <strong>any</strong> By default, the header is visible. The default title is the node label, but the header could also be an object with a <code>title</code> attribute allowing you to specify your own title. An 'x' icon is displayed to close the drawer view.</li>\n      <li><code>drawerSettings.backdrop</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> By default, it is set to <code>false</code>. If it is set to <code>true</code> the rest of the screen has a backdrop.</li>\n      <li><code>drawerSettings.size</code> <strong>(<code>\"l\"</code> | <code>\"m\"</code> | <code>\"s\"</code> | <code>\"xs\"</code>)</strong> size of the drawer (optional, default <code>\"s\"</code>)</li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-27\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.navigation().navigate('/overview')\nLuigi.navigation().navigate('users/groups/stakeholders')\nLuigi.navigation().navigate('/settings', null, true) // preserve view\n</code></pre>\n</div>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"openasmodal\">openAsModal</h4>\n<p>Opens a view in a modal. You can specify the modal's title and size. If you do not specify the title, it is the node label. If there is no node label, the title remains empty. The default size of the modal is <code>l</code>, which means 80%. You can also use <code>m</code> (60%) and <code>s</code> (40%) to set the modal size. Optionally, use it in combination with any of the navigation functions.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-8\">Parameters</h5>\n<ul>\n  <li><code>path</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> navigation path</li>\n  <li><code>modalSettings</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a>?</strong> opens a view in a modal. Use these settings to configure the modal's title and size\n    <ul>\n      <li><code>modalSettings.title</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> modal title. By default, it is the node label. If there is no label, it is left empty</li>\n      <li><code>modalSettings.size</code> <strong>(<code>\"fullscreen\"</code> | <code>\"l\"</code> | <code>\"m\"</code> | <code>\"s\"</code>)</strong> size of the modal (optional, default <code>\"l\"</code>)</li>\n      <li><code>modalSettings.width</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> lets you specify a precise width for the modal. Allowed units are 'px', '%', 'rem', 'em', 'vh' and 'vw'.</li>\n      <li><code>modalSettings.height</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> lets you specify a precise height for the modal. Allowed units are 'px', '%', 'rem', 'em', 'vh' and 'vw'.</li>\n    </ul>\n  </li>\n  <li><code>onCloseCallback</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\" rel=\"external\" target=\"_blank\">Function</a></strong> callback function called upon closing the opened modal</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-28\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.navigation().openAsModal('projects/pr1/users', {title:'Users', size:'m'});\n</code></pre>\n</div>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"openassplitview\">openAsSplitView</h4>\n<ul>\n  <li><strong>See: <a href=\"https://docs.luigi-project.io/docs/luigi-client-api?section=splitview\" rel=\"external\" target=\"_blank\">SplitView Client</a> for further documentation. These methods from the Client SplitView are also implemented for Luigi Core: <code>close</code>, <code>collapse</code>, <code>expand</code>, <code>isCollapsed</code>, <code>isExpanded</code>, <code>exists</code></strong></li>\n</ul>\n<p>Opens a view in a split view. You can specify the split view's title and size. If you don't specify the title, it is the node label. If there is no node label, the title remains empty. The default size of the split view is 40, which means 40% height of the split view.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-9\">Parameters</h5>\n<ul>\n  <li><code>path</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> navigation path</li>\n  <li><code>splitViewSettings</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> opens a view in a split view. Use these settings to configure the split view's behaviour (optional, default <code>{}</code>)\n    <ul>\n      <li><code>splitViewSettings.title</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> split view title. By default, it is the node label. If there is no label, it is left empty</li>\n      <li><code>splitViewSettings.size</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\" rel=\"external\" target=\"_blank\">number</a></strong> height of the split view in percent (optional, default <code>40</code>)</li>\n      <li><code>splitViewSettings.collapsed</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> opens split view in collapsed state (optional, default <code>false</code>)</li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-29\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.navigation().openAsSplitView('projects/pr1/users', {title:'Users', size:'40'});\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> an instance of the SplitView. It provides functions to control its behavior.</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.7.6</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"openasdrawer\">openAsDrawer</h4>\n<p>Opens a view in a drawer. You can specify if the drawer has a header, if a backdrop is active in the background and configure the size of the drawer. By default the header is shown. The backdrop is not visible and has to be activated. The size of the drawer is by default set to <code>s</code> which means 25% of the micro frontend size. You can also use <code>l</code>(75%), <code>m</code>(50%) or <code>xs</code>(15.5%). Optionally, use it in combination with any of the navigation functions.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-10\">Parameters</h5>\n<ul>\n  <li><code>path</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> navigation path</li>\n  <li><code>drawerSettings</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a>?</strong> opens a view in a drawer. Use these settings to configure if the drawer has a header, backdrop and size.\n    <ul>\n      <li><code>drawerSettings.header</code> <strong>any</strong> By default, the header is visible. Title is node label and 'x' is displayed to close the drawer view. The header could also be an object with a <code>title</code> attribute to specify an own title for the drawer component.</li>\n      <li><code>drawerSettings.backdrop</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> By default, it is set to <code>false</code>. If it is set to <code>true</code> the rest of the screen has a backdrop.</li>\n      <li><code>drawerSettings.size</code> <strong>(<code>\"l\"</code> | <code>\"m\"</code> | <code>\"s\"</code> | <code>\"xs\"</code>)</strong> size of the drawer (optional, default <code>\"s\"</code>)</li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-30\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.navigation().openAsDrawer('projects/pr1/drawer', {header:true, backdrop:true, size:'s'});\nLuigi.navigation().openAsDrawer('projects/pr1/drawer', {header:{title:'My drawer component'}, backdrop:true, size:'xs'});\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.6.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"fromcontext\">fromContext</h4>\n<p>Sets the current navigation context to that of a specific parent node which has the <a href=\"/docs/navigation-configuration\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">navigationContext</a> field declared in the navigation configuration. This navigation context is then used by the <code>navigate</code> function.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-11\">Parameters</h5>\n<ul>\n  <li><code>navigationContext</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong></li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-31\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.navigation().fromContext('project').navigate('/settings')\n</code></pre>\n</div>\n<p>Returns <strong>linkManager</strong> link manager instance</p>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"fromclosestcontext\">fromClosestContext</h4>\n<p>Sets the current navigation context which is then used by the <code>navigate</code> function. This has to be a parent navigation context, it is not possible to use the child navigation contexts.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-32\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.navigation().fromClosestContext().navigate('/users/groups/stakeholders')\n</code></pre>\n</div>\n<p>Returns <strong>linkManager</strong> link manager instance</p>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"fromvirtualtreeroot\">fromVirtualTreeRoot</h4>\n<p>Sets the current navigation base to the parent node that is defined as virtualTree. This method works only when the currently active micro frontend is inside a virtualTree.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-33\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.navigation().fromVirtualTreeRoot().navigate('/users/groups/stakeholders')\n</code></pre>\n</div>\n<p>Returns <strong>linkManager</strong> link manager instance</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.0.1</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"withparams\">withParams</h4>\n<p>Sends node parameters to the route. The parameters are used by the <code>navigate</code> function. Use it optionally in combination with any of the navigation functions and receive it as part of the context object in Luigi Client.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-12\">Parameters</h5>\n<ul>\n  <li><code>nodeParams</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong></li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-34\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.navigation().withParams({foo: \"bar\"}).navigate(\"path\")\n\n// Can be chained with context setting functions such as:\nLuigi.navigation().fromContext(\"currentTeam\").withParams({foo: \"bar\"}).navigate(\"path\")\n</code></pre>\n</div>\n<p>Returns <strong>linkManager</strong> link manager instance</p>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"pathexists\">pathExists</h4>\n<p>Checks if the path you can navigate to exists in the main application. For example, you can use this helper method conditionally to display a DOM element like a button.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-13\">Parameters</h5>\n<ul>\n  <li><code>path</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> path which existence you want to check</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-35\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">let pathExists;\n Luigi\n .navigation()\n .pathExists('projects/pr2')\n .then(\n   (pathExists) => {  }\n );\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"external\" target=\"_blank\">promise</a></strong> a promise which resolves to a Boolean variable specifying whether the path exists or not</p>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"hasback\">hasBack</h4>\n<p>Checks if there is one or more preserved views. You can use it to show a <strong>back</strong> button.</p>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> indicating if there is a preserved view you can return to</p>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"goback\">goBack</h4>\n<p>Discards the active view and navigates back to the last visited view. Works with preserved views, and also acts as the substitute of the browser <strong>back</strong> button. <strong>goBackContext</strong> is only available when using preserved views.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-14\">Parameters</h5>\n<ul>\n  <li><code>goBackValue</code> <strong>any</strong> data that is passed in the <strong>goBackContext</strong> field to the last visited view when using preserved views</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-36\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.navigation().goBack({ foo: 'bar' });\nLuigi.navigation().goBack(true);\n</code></pre>\n</div>\n</section></section></section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"luigii18n\">Luigi.i18n()</h2><!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"luigii18n-1\">LuigiI18N</h3>\n<p>Localization-related functions.</p>\n<section class=\"h4Wrapper headingWrapper\"><h4 id=\"getcurrentlocale\">getCurrentLocale</h4>\n<p>Gets the current locale.</p>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> current locale</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.5.3</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"setcurrentlocale\">setCurrentLocale</h4>\n<p>Sets current locale to the specified one.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-15\">Parameters</h5>\n<ul>\n  <li><code>locale</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> locale to be set as the current locale</li>\n</ul>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.5.3</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"addcurrentlocalechangelistener\">addCurrentLocaleChangeListener</h4>\n<p>Registers a listener for locale changes.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-16\">Parameters</h5>\n<ul>\n  <li><code>listener</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\" rel=\"external\" target=\"_blank\">Function</a></strong> function called on every locale change with the new locale as argument</li>\n</ul>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\" rel=\"external\" target=\"_blank\">number</a></strong> listener ID associated with the given listener; use it when removing the listener</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.5.3</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"removecurrentlocalechangelistener\">removeCurrentLocaleChangeListener</h4>\n<p>Unregisters a listener for locale changes.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-17\">Parameters</h5>\n<ul>\n  <li><code>listenerId</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\" rel=\"external\" target=\"_blank\">number</a></strong> listener ID associated with the listener to be removed, returned by addCurrentLocaleChangeListener</li>\n</ul>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.5.3</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"gettranslation\">getTranslation</h4>\n<p>\n  Gets translated text for the specified key in the current locale or in the specified one.\n  Property values for token replacement in the localization key will be taken from the specified interpolations object.\n</p><!-- add-attribute:class:success -->\n<blockquote class=\"success\">\n  <p>\n    <strong>TIP</strong>: Be aware that this function is not asynchronous and therefore the translation table must be existing already at initialization.\n    Take a look at our <a href=\"/docs/i18n\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">i18n</a> section for an implementation suggestion.\n  </p>\n</blockquote>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-18\">Parameters</h5>\n<ul>\n  <li><code>key</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> key to be translated</li>\n  <li><code>interpolations</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> objects with properties that will be used for token replacements in the localization key (optional, default <code>undefined</code>)</li>\n  <li><code>locale</code> <strong>locale</strong> optional locale to get the translation for; default is the current locale (optional, default <code>undefined</code>)</li>\n</ul>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.5.3</li>\n</ul>\n</section></section></section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"luigicustommessages\">Luigi.customMessages()</h2><!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"custommessages\">CustomMessages</h3>\n<p>Functions related to custom messages.</p>\n<section class=\"h4Wrapper headingWrapper\"><h4 id=\"sendtoall\">sendToAll</h4>\n<p>Sends a custom message to all opened micro frontends.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-19\">Parameters</h5>\n<ul>\n  <li><code>message</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> an object containing data to be sent to the micro frontend to process it further. This object is set as an input parameter of the custom message listener on the micro frontend side.\n    <ul>\n      <li><code>message.id</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> the id of the message</li>\n      <li><code>message.MY_DATA_FIELD</code> <strong>any</strong> any other message data field</li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-37\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.customMessages().sendToAll({\n    id: 'myprefix.my-custom-message-for-client',\n    dataField1: 'here goes some data',\n    moreData: 'here goes some more'\n});\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.6.2</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"send\">send</h4>\n<p>\n  Sends a message to specific micro frontend identified with an id.\n  Use Luigi.elements().getMicrofrontends() to get the iframe id.\n</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-20\">Parameters</h5>\n<ul>\n  <li><code>microfrontendId</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\" rel=\"external\" target=\"_blank\">number</a></strong> the id of the micro frontend</li>\n  <li><code>message</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> an object containing data to be sent to the micro frontend to process it further. This object is set as an input parameter of the custom message listener on the micro frontend side\n    <ul>\n      <li><code>message.id</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\" rel=\"external\" target=\"_blank\">number</a></strong> the id of the message</li>\n      <li><code>message.MY_DATA_FIELD</code> <strong>any</strong> any other message data field</li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-38\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.customMessages().send(microfrontend.id, {\n    id: 'myprefix.my-custom-message-for-client',\n    dataField1: 'here goes some data',\n    moreData: 'here goes some more'\n});\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.6.2</li>\n</ul>\n</section></section></section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"luigiux\">Luigi.ux()</h2><!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"ux\">UX</h3>\n<p>Functions to use Luigi Core UX features.</p>\n<section class=\"h4Wrapper headingWrapper\"><h4 id=\"hideapploadingindicator\">hideAppLoadingIndicator</h4>\n<p>Hides the app loading indicator.</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.6.4</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"showalert\">showAlert</h4>\n<p>Shows an alert.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-21\">Parameters</h5>\n<ul>\n  <li><code>settings</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> the settings for the alert\n    <ul>\n      <li><code>settings.text</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> the content of the alert. To add a link to the content, you have to set up the link in the <code>links</code> object. The key(s) in the <code>links</code> object must be used in the text to reference the links, wrapped in curly brackets with no spaces. If you do not specify any text, the alert is not displayed</li>\n      <li><code>settings.type</code> <strong>(<code>\"info\"</code> | <code>\"success\"</code> | <code>\"warning\"</code> | <code>\"error\"</code>)</strong> sets the type of alert</li>\n      <li><code>settings.links</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> provides links data\n        <ul>\n          <li><code>settings.links.LINK_KEY</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> object containing the data for a particular link. To properly render the link in the alert message refer to the description of the <strong>settings.text</strong> parameter\n            <ul>\n              <li><code>settings.links.LINK_KEY.text</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> text which replaces the link identifier in the alert content</li>\n              <li><code>settings.links.LINK_KEY.url</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> URL to navigate when you click the link. Currently, only internal links are supported in the form of relative or absolute paths</li>\n              <li><code>settings.links.LINK_KEY.dismissKey</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> dismissKey which represents the key of the link.</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li><code>settings.closeAfter</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\" rel=\"external\" target=\"_blank\">number</a></strong> (optional) time in milliseconds that tells Luigi when to close the Alert automatically. If not provided, the Alert will stay on until closed manually. It has to be greater than <code>100</code></li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-39\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">const settings = {\n text: \"Ut enim ad minim veniam, {goToHome} quis nostrud exercitation ullamco {relativePath}. Duis aute irure dolor {goToOtherProject}\",\n type: 'info',\n links: {\n   goToHome: { text: 'homepage', url: '/overview' },\n   goToOtherProject: { text: 'other project', url: '/projects/pr2' },\n   relativePath: { text: 'relative hide side nav', url: 'hideSideNav' },\n   neverShowItAgain: { text: 'Never show it again', dismissKey: 'neverShowItAgain' }\n },\n closeAfter: 3000\n}\nLuigi\n .ux()\n .showAlert(settings)\n .then(() => {\n    // Logic to execute when the alert is dismissed\n });\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"external\" target=\"_blank\">promise</a></strong> which is resolved when the alert is dismissed</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.6.4</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"showconfirmationmodal\">showConfirmationModal</h4>\n<p>Shows a confirmation modal.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-22\">Parameters</h5>\n<ul>\n  <li><code>settings</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong> the settings of the confirmation modal. If you do not provide any value for any of the fields, a default value is used\n    <ul>\n      <li><code>settings.type</code> <strong>(<code>\"confirmation\"</code> | <code>\"success\"</code> | <code>\"warning\"</code> | <code>\"error\"</code> | <code>\"information\"</code>)</strong> the content of the modal type. (Optional)</li>\n      <li><code>settings.header</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> the content of the modal header (optional, default <code>\"Confirmation\"</code>)</li>\n      <li><code>settings.body</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> the content of the modal body. It supports HTML formatting elements such as <code>&#x3C;br></code>, <code>&#x3C;b></code>, <code>&#x3C;strong></code>, <code>&#x3C;i></code>, <code>&#x3C;em></code>, <code>&#x3C;mark></code>, <code>&#x3C;small></code>, <code>&#x3C;del></code>, <code>&#x3C;ins></code>, <code>&#x3C;sub></code>, <code>&#x3C;sup></code>. (optional, default <code>\"Are you sure you want to do this?\"</code>)</li>\n      <li><code>settings.buttonConfirm</code> <strong>(<a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a> | <code>false</code>)</strong> the label for the modal confirmation button. If set to <code>false</code>, the button will not be shown. (optional, default <code>\"Yes\"</code>)</li>\n      <li><code>settings.buttonDismiss</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> the label for the modal dismiss button (optional, default <code>\"No\"</code>)</li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-40\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">const settings = {\n header: \"Confirmation\",\n body: \"Are you sure you want to do this?\",\n buttonConfirm: \"Yes\",\n buttonDismiss: \"No\"\n}\nLuigi\n .ux()\n .showConfirmationModal(settings)\n .then(() => {\n    // Logic to execute when the confirmation modal is dismissed\n });\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"external\" target=\"_blank\">promise</a></strong> which is resolved when accepting the confirmation modal and rejected when dismissing it</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 0.6.4</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"setdocumenttitle\">setDocumentTitle</h4>\n<p>Set the document title</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-23\">Parameters</h5>\n<ul>\n  <li><code>documentTitle</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong></li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-41\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.ux().setDocumentTitle('Luigi');\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.4.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getdocumenttitle\">getDocumentTitle</h4>\n<p>Get the document title</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-42\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.ux().getDocumentTitle();\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> a string, which is displayed in the tab.</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.4.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"collapseleftsidenav\">collapseLeftSideNav</h4>\n<p>Set the collapsed state of the left side navigation</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-24\">Parameters</h5>\n<ul>\n  <li><code>state</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong></li>\n</ul>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.5.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"openusersettings\">openUserSettings</h4>\n<p>Open user settings dialog</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.7.1</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"closeusersettings\">closeUserSettings</h4>\n<p>Close user settings dialog</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.7.1</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getdirtystatus\">getDirtyStatus</h4>\n<p>Returns the dirty status, which is set by the Client via <a href=\"/docs/luigi-client-api#setdirtystatus\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">setDirtyStatus</a>. By default, the dirty status is <code>false</code>.</p>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong></p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 2.1.0</li>\n</ul>\n</section></section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"luigiglobalsearch\">Luigi.globalSearch()</h2><!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"globalsearch\">GlobalSearch</h3>\n<p>Functions to use Luigi Global Search</p>\n<section class=\"h4Wrapper headingWrapper\"><h4 id=\"opensearchfield\">openSearchField</h4>\n<p>Opens the global search field.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-43\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.globalSearch().openSearchField();\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.3.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"closesearchfield\">closeSearchField</h4>\n<p>Closes the global search field.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-44\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.globalSearch().closeSearchField();\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.3.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"clearsearchfield\">clearSearchField</h4>\n<p>Clears the global search field.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-45\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.globalSearch().clearSearchField();\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.3.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"showsearchresult\">showSearchResult</h4>\n<p>Opens the global search result. By standard it is a popover.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-25\">Parameters</h5>\n<ul>\n  <li><code>searchResultItems</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array\" rel=\"external\" target=\"_blank\">Array</a></strong></li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-46\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">let searchResultItem = {\n  pathObject: {\n    link,\n    params: {}\n  },\n  label,\n  description\n}\n\nLuigi.globalSearch().showSearchResult([searchResultItem1, searchResultItem2]);\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.3.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"closesearchresult\">closeSearchResult</h4>\n<p>Closes the global search result. By standard it is rendered as a popover.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-47\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.globalSearch().closeSearchResult();\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.3.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getsearchstring\">getSearchString</h4>\n<p>Gets the value of the search input field.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-48\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.globalSearch().getSearchString();\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.3.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"setsearchstring\">setSearchString</h4>\n<p>Sets the value of the search input field.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-26\">Parameters</h5>\n<ul>\n  <li><code>searchString</code> search value</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-49\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.globalSearch().setSearchString('searchString');\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.3.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"setsearchinputplaceholder\">setSearchInputPlaceholder</h4>\n<p>Sets the value of the Placeholder search input field.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-27\">Parameters</h5>\n<ul>\n  <li><code>searchString</code> search value</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-50\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.globalSearch().setSearchInputPlaceholder('HERE input Placeholder');\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.7.1</li>\n</ul>\n</section></section></section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"luigitheming\">Luigi.theming()</h2><!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"theming\">Theming</h3>\n<p>Functions to use Luigi Core Theming features.</p>\n<section class=\"h4Wrapper headingWrapper\"><h4 id=\"getavailablethemes\">getAvailableThemes</h4>\n<p>Retrieves the available themes</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-51\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi\n .theming()\n .getAvailableThemes()\n .then((themes) => {\n    // Logic to generate theme selector\n });\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"external\" target=\"_blank\">promise</a></strong> resolves an array of theming objects</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.4.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"setcurrenttheme\">setCurrentTheme</h4>\n<p>Sets the current theme id</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-28\">Parameters</h5>\n<ul>\n  <li><code>id</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> of a theme object</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-52\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.theming().setCurrentTheme('light')\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.4.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getthemeobject\">getThemeObject</h4>\n<p>Retrieves a theme object by name.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-29\">Parameters</h5>\n<ul>\n  <li><code>id</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> a theme id</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-53\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi\n .theming()\n .getThemeObject('light')\n .then((id => {\n   // Logic\n }))\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"external\" target=\"_blank\">promise</a></strong> resolves a theme object</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.4.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getcurrenttheme\">getCurrentTheme</h4>\n<p>Retrieves the current active theme. Falls back to <strong>defaultTheme</strong> if none explicitly specified before.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-54\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.theming().getCurrentTheme()\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> theme id</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.4.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"isthemingavailable\">isThemingAvailable</h4>\n<p>The general status about the Theming configuration.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-55\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.theming().isThemingAvailable()\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong> <code>true</code> if <strong>settings.theming</strong> configuration object is defined</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.4.0</li>\n</ul>\n</section></section></section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"luigifeaturetoggles\">Luigi.featureToggles()</h2><!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"featuretoggles\">FeatureToggles</h3>\n<p>Functions to use feature toggles in Luigi</p>\n<section class=\"h4Wrapper headingWrapper\"><h4 id=\"setfeaturetoggle\">setFeatureToggle</h4>\n<p>Add a feature toggle to an active feature toggles list</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-30\">Parameters</h5>\n<ul>\n  <li><code>featureToggleName</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"external\" target=\"_blank\">string</a></strong> the name of the feature toggle</li>\n  <li><code>fromUrlQuery</code> (optional, default <code>false</code>)</li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-56\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.featureToggles().setFeatureToggle('featureToggleName');\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.4.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"unsetfeaturetoggle\">unsetFeatureToggle</h4>\n<p>Remove a feature toggle from the list</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-31\">Parameters</h5>\n<ul>\n  <li><code>featureToggleName</code></li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-57\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.featureToggles().unsetFeatureToggle('featureToggleName');\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.4.0</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"getactivefeaturetogglelist\">getActiveFeatureToggleList</h4>\n<p>Get a list of active feature toggles</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-58\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.featureToggles().getActiveFeatureToggleList();\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array\" rel=\"external\" target=\"_blank\">Array</a></strong> of active feature toggles</p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.4.0</li>\n</ul>\n</section></section></section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"luigirouting\">Luigi.routing()</h2><!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"routing\">Routing</h3>\n<section class=\"h4Wrapper headingWrapper\"><h4 id=\"getsearchparams\">getSearchParams</h4>\n<p>Get search parameter from URL as an object.</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-59\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.routing().getSearchParams();\n</code></pre>\n</div>\n<p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong></p>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.16.1</li>\n</ul>\n</section></section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"addsearchparams\">addSearchParams</h4>\n<p>\n  Add search parameters to the URL.\n  If <a href=\"/docs/navigation-parameters-reference#usehashrouting\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">hash routing</a> is enabled, the search parameters will be set after the hash.\n  In order to delete a search query param you can set the value of the param to undefined.\n</p>\n<section class=\"h5Wrapper headingWrapper\"><h5 id=\"parameters-32\">Parameters</h5>\n<ul>\n  <li><code>params</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"external\" target=\"_blank\">Object</a></strong></li>\n  <li><code>keepBrowserHistory</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"external\" target=\"_blank\">boolean</a></strong></li>\n</ul>\n</section><section class=\"h5Wrapper headingWrapper\"><h5 id=\"examples-60\">Examples</h5>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.routing().addSearchParams({luigi:'rocks', mario:undefined}, false);\n</code></pre>\n</div>\n<p><strong>Meta</strong></p>\n<ul>\n  <li><strong>since</strong>: 1.16.1</li>\n</ul>\n</section></section></section></section></section></section>"}},{"name":"luigi-testing-utilities.md","shortName":"luigi-testing-utilities","contents":{"data":{},"messages":[],"history":[],"cwd":"/Users/I529989/Documents/SAP/32-luigi/website/docs","value":"<section class=\"h0Wrapper headingWrapper\">\n<section class=\"h1Wrapper headingWrapper\"><h1 id=\"luigi-testing-utilities\">Luigi Testing Utilities</h1>\n<p>The <a href=\"https://github.com/SAP/luigi/tree/main/client-frameworks-support/testing-utilities\" rel=\"external\" target=\"_blank\">Luigi Testing Utilities</a> are a set of auxiliary functions used to enhance the user experience while testing Luigi-based micro frontends. The functions abstract away Luigi-specific logic from the tester so that it is easier for them to mock and assert Luigi functionality.</p>\n<section class=\"h2Wrapper headingWrapper\"><h2 id=\"luigimockutil\">LuigiMockUtil</h2>\n<p>This class contains certain utility helper functions needed when writing <a href=\"https://www.npmjs.com/package/protractor\" rel=\"external\" target=\"_blank\">protractor-based</a> e2e tests. You can simply import this module into you project and then use an instance of it to test micro frontend functionality.</p>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"how-to-use-the-library\">How to use the library</h2>\n<p><strong>Prerequisites:</strong></p>\n<p><em>In order to use this utility library, you need to import LuigiMockModule into your Angular application's entry point. See more <a href=\"https://docs.luigi-project.io/docs/framework-support-libraries/?section=luigicontextservice\" rel=\"external\" target=\"_blank\">here</a>.</em></p>\n<ol>\n  <li>Import the library in the <code>package.json</code>:</li>\n</ol>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">npm install @luigi-project/testing-utilities -s\n</code></pre>\n</div>\n<ol start=\"2\">\n  <li>Once the library is imported and saved in your Angular project, you can now import the module <code>LuigiMockUtil</code> into your test:</li>\n</ol>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">import { LuigiMockUtil } from \"@luigi-project/testing-utilities\";\n</code></pre>\n</div>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"example\">Example</h3>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">import { browser } from 'protractor'; // &#x3C;-- target e2e testing library\nimport { LuigiMockUtil } from \"@luigi-project/testing-utilities\";\n\ndescribe('Another test', () => {\n  let luigiMockUtil: LuigiMockUtil;\n\n  beforeAll(async () => {\n    luigiMockUtil = new LuigiMockUtil(browser);\n  });\n\n  it('should load the page if correct luigi context provided', async () => {\n    await luigiMockUtil.mockContext({\n      someData: '1',\n      someOtherData: 'randomInfo',\n    });\n  }\n}\n</code></pre>\n</div>\n</section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"functions-provided\">Functions provided</h2>\n<ul>\n  <li><strong>mockContext</strong>: Mocks the context by sending Luigi context messages with the desired mocked context as parameter.</li>\n  <li><strong>mockPathExists</strong>: This method serves as a mock for the Luigi Client <code>pathExists()</code> function. It is used in e2e tests when component being tested utilizes a call to <code>LuigiClient.linkManager().pathExists()</code></li>\n  <li><strong>modalOpenedWithTitle</strong>: Checks on the printed DOM Luigi message responses for a modal with given title being opened. In such a case, a message would be printed containing a <code>modal.title</code>. Returns <code>false</code> if such element was not found.</li>\n  <li><strong>getMSG</strong>: Returns list of messages, representing message elements added in the DOM for testing.</li>\n  <li><strong>parseLuigiMockedMessages</strong>: Parses the elements added by LuigiMockModule into the DOM and assigns them to the local messages variable</li>\n</ul>\n</section></section></section>"}},{"name":"luigi-ux-features.md","shortName":"luigi-ux-features","contents":{"data":{},"messages":[],"history":[],"cwd":"/Users/I529989/Documents/SAP/32-luigi/website/docs","value":"<section class=\"h0Wrapper headingWrapper\">\n<section class=\"h1Wrapper headingWrapper\"><h1 id=\"luigi-ux-features\">Luigi UX features</h1>\n<ul>\n  <li><a href=\"/docs/luigi-ux-features#rendering-of-luigi-application-in-the-dom\" onclick=\"navigateInternal(event, this)\">Rendering of Luigi application in the DOM</a></li>\n  <li><a href=\"/docs/luigi-ux-features#responsive-application-setup\" onclick=\"navigateInternal(event, this)\">Responsive application setup</a></li>\n  <li><a href=\"/docs/luigi-ux-features#custom-css-variables\" onclick=\"navigateInternal(event, this)\">Custom CSS variables</a></li>\n  <li><a href=\"/docs/luigi-ux-features#app-loading-indicator\" onclick=\"navigateInternal(event, this)\">App loading indicator</a></li>\n  <li><a href=\"/docs/luigi-ux-features#collapsed-left-side-navigation\" onclick=\"navigateInternal(event, this)\">Collapsed left side navigation</a></li>\n</ul>\n<section class=\"h2Wrapper headingWrapper\"><h2 id=\"rendering-of-luigi-application-in-the-dom\">Rendering of Luigi application in the DOM</h2>\n<p>By default, Luigi content, including the top navigation, left navigation, and the content iframe area, are rendered in the <code>body</code> tag of your Luigi Core application. As a result, Luigi content takes the whole space of your browser window.</p>\n<p>However, you can render Luigi content in any other HTML container. It can be useful if you want to add a header or a footer on top of the Luigi content. To use this feature, add the <code>luigi-app-root</code> custom HTML attribute to the HTML tag in which you want to render the Luigi content.</p><!-- add-attribute:class:warning -->\n<blockquote class=\"warning\">\n  <p><strong>NOTE:</strong> If you render the Luigi content in a custom container, the container is positioned relatively when you apply your own CSS. Also, set the height of the Luigi custom container either in <strong>px</strong> or <strong>vh</strong>.</p>\n</blockquote>\n<div class=\"keyword-container\"><label class=\"keyword\" onclick=\"searchTag(event, &#x22;render in div&#x22;)\" style=\"cursor:pointer;\">render in div</label><label class=\"keyword\" onclick=\"searchTag(event, &#x22;load in custom container&#x22;)\" style=\"cursor:pointer;\">load in custom container</label><label class=\"keyword\" onclick=\"searchTag(event, &#x22;add own header or footer&#x22;)\" style=\"cursor:pointer;\">add own header or footer</label></div>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"responsive-application-setup\">Responsive application setup</h2>\n<p>You can quickly adjust the Luigi application to improve user experience on mobile devices, such as smartphones or tablets. Here are some examples:</p>\n<ul>\n  <li>Add the following line to your <code>index.html</code> file for the Luigi application to render well on a mobile device:</li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-html\">&#x3C;meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1\">\n</code></pre>\n</div>\n<ul>\n  <li>\n    <p>Define and apply <a href=\"/docs/general-settings#responsivenavigation\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\"><strong>responsiveNavigation</strong></a> settings to make the left navigation responsive.</p>\n  </li>\n  <li>\n    <p>Define and apply <a href=\"/docs/general-settings#profiletype\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\"><strong>profileType</strong></a> <strong>'simple'</strong> or <strong>'Fiori3'</strong> to change the Profile Menu layout and design.</p>\n  </li>\n  <li>\n    <p>Set the <a href=\"/docs/general-settings#headerresponsiveshellbarpaddings\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\"><strong>header.responsiveShellbarPaddings</strong></a> parameter to <code>true</code> to make the Shellbar responsive for different screen sizes.</p>\n  </li>\n</ul>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"custom-css-variables\">Custom CSS variables</h2>\n<p>The CSS variables listed below allow you to adjust Luigi elements individually and define their width/height.</p><!-- add-attribute:class:success -->\n<blockquote class=\"success\">\n  <p><strong>NOTE:</strong> Customizing Luigi is not limited to these variables and can be also achieved with your own CSS code. You can find a small example <a href=\"/docs/faq#ui-questions\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">here</a> under the question \"How can I style Luigi differently?\"</p>\n</blockquote>\n<section class=\"h4Wrapper headingWrapper\"><h4 id=\"left-side-navigation-width\">Left-side navigation width</h4>\n<p>Define a custom width for the left side navigation by adding the <code>--luigi__left-sidenav--width:</code> variable to the top of your <code>index.html</code>. The default width is 15rem.</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-html\">:root{\n  --luigi__left-sidenav--width: yourCustomWidth;\n}\n</code></pre>\n</div>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"app-title-width\">App title width</h4>\n<p>Define a custom width for the App Title on desktop and mobile simultaneously by adding the code below to the top of your <code>index.html</code>. The default width is <code>--luigi__app-title--width: 60vw;</code> and <code>--luigi__multi-app-dropdown--width: 50vw;</code></p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-html\">:root{\n  --luigi__app-title--width: yourCustomSingleAppTitleWidth;\n  --luigi__multi-app-dropdown--width: yourCustomMultiAppDropdownWidth;\n}\n</code></pre>\n</div>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"top-navigation-height\">Top navigation height</h4>\n<p>Define a custom height for the top navigation/Shellbar by adding the <code>--luigi__shellbar--height:</code> variable to the top of your <code>index.html</code>. The default height is 2.75rem.</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-html\">    :root {\n      --luigi__shellbar--height: yourCustomShellbarHeight;\n    }\n</code></pre>\n</div>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"horizontal-navigationtabnav-height\">Horizontal navigation/tabNav height</h4>\n<p>You can define a custom height for the horizontal navigation/<a href=\"/docs/navigation-parameters-reference#tabnav\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">tabNav</a> by using the <code>--luigi__horizontal-nav--height</code> variable. The default value is 2.75rem.</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-html\">:root{\n  --luigi__horizontal-nav--height: yourCustomHorizontalNavHight\n}\n</code></pre>\n</div>\n</section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"app-loading-indicator\">App loading indicator</h2>\n<p>To show a loading indicator before Luigi Core or your first micro frontend is ready, add a container with the <code>luigi-app-loading-indicator</code> attribute to your <code>index.html</code> body or inside your <code>luigi-app-root</code> container.</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-html\">&#x3C;div luigi-app-loading-indicator>\n\t&#x3C;div class=\"fd-busy-indicator fd-busy-indicator--m\" aria-hidden=\"false\" aria-label=\"Loading\">\n\t\t&#x3C;div class=\"fd-busy-indicator__circle\">&#x3C;/div>\n\t\t&#x3C;div class=\"fd-busy-indicator__circle\">&#x3C;/div>\n\t\t&#x3C;div class=\"fd-busy-indicator__circle\">&#x3C;/div>\n\t&#x3C;/div>\n&#x3C;/div>\n</code></pre>\n</div>\n<p>To automatically remove the loading indicator after Luigi initialization phase you can set <a href=\"/docs/navigation-parameters-reference#loadingindicatorhideautomatically\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">settings.appLoadingIndicator.hideAutomatically</a> to <code>true</code>.</p>\n<p>To keep the loading indicator until the first micro frontend is usable, follow these steps:</p>\n<ol>\n  <li>Set the app loading indicator parameter <strong>hideAutomatically</strong> to <code>false</code></li>\n</ol>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">{\n  ...\n  settings: {\n    appLoadingIndicator: {\n      hideAutomatically: false\n    }\n  }\n  ...\n}\n</code></pre>\n</div>\n<ol start=\"2\">\n  <li>To remove the loading indicator, call <a href=\"/docs/luigi-core-api#hideAppLoadingIndicator\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Luigi.ux().hideAppLoadingIndicator()</a> in Luigi Core once your initial micro frontend has finished loading. You can, for example, use the <a href=\"/docs/communication#custom-messages\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">custom messages</a> feature to allow the Luigi Client micro frontend to communicate with the Core when this function should be executed.</li>\n</ol>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"collapsed-left-side-navigation\">Collapsed left-side navigation</h2>\n<p>If you use <a href=\"/docs/general-settings#responsivenavigation\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">responsiveNavigation</a> with <strong>'semiCollapsible'</strong> or <strong>'Fiori3'</strong> mode in your settings, you can adjust the collapsed state of the left-side navigation by using the <strong>collapseLeftSideNav</strong> function.</p>\n<ul>\n  <li>\n    <p>To close the left-side navigation, execute <strong>Luigi.ux().collapseLeftSideNav(true)</strong> in Luigi Core once your initial micro frontend has finished loading. It will set the collapsed state to <code>true</code> in <strong>Local Storage</strong>, which closes the left side navigation by showing only icons.</p>\n  </li>\n  <li>\n    <p>Set the value to <code>false</code> if you want to open left-side navigation.</p>\n  </li>\n</ul>\n</section></section></section>"}},{"name":"microfrontend-routing.md","shortName":"microfrontend-routing","contents":{"data":{},"messages":[],"history":[],"cwd":"/Users/I529989/Documents/SAP/32-luigi/website/docs","value":"<section class=\"h0Wrapper headingWrapper\">\n<section class=\"h1Wrapper headingWrapper\"><h1 id=\"micro-frontend-routing\">Micro frontend routing</h1>\n<p>Luigi routing can be divided in two main parts: higher-level routing of the main app (Luigi Core), and routing within the micro frontend (Luigi Client).</p>\n<p>This document shows how you can handle the second way of routing while preserving the existing router of your micro frontend. The exact way this is achieved depends on the type of routing you use, but you should follow some general steps:</p>\n<ol>\n  <li>Enable <a href=\"/docs/navigation-parameters-reference#virtualtree\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">virtualTree</a> in your Luigi configuration file for the node of your micro frontend.</li>\n  <li>Import <a href=\"/docs/luigi-client-setup\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Luigi Client</a> to your micro frontend.</li>\n  <li>Use the methods provided by Luigi Client's <a href=\"/docs/luigi-client-api#linkmanager\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">linkManager</a> to update the main app's URL and maintain navigation history.</li>\n</ol>\n<p>Below, you can find some simple examples on how to keep routing in sync for different frontend technologies such as <a href=\"/docs/microfrontend-routing#angular-routing\" onclick=\"navigateInternal(event, this)\">Angular</a>, <a href=\"/docs/microfrontend-routing#sveltekit-routing\" onclick=\"navigateInternal(event, this)\">SvelteKit</a>, and <a href=\"/docs/microfrontend-routing#react-routing\" onclick=\"navigateInternal(event, this)\">React</a>.</p>\n<dl class=\"accordion-container\">\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"angular-routing\">Angular routing</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <h4 id=\"overview\">Overview</h4>\n      <p>If your use case involves Angular routing, it is recommended that you use the <a href=\"/docs/framework-support-libraries#angular-support-library\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Luigi Client Angular support library</a>. The library contains routing features providing an easier way to synchronize applications. If you want to find out how this process works under the hood, you can read the example below.</p>\n      <p>This example shows you how to keep an existing routing strategy and use an existing micro frontend as drop-in without the need to refactor everything to <a href=\"https://docs.luigi-project.io/docs/luigi-client-api?section=linkmanager\" rel=\"external\" target=\"_blank\"><code>LuigiClient.linkManager()</code></a>. To update the Luigi Core URL when routing internally with the micro frontend router, without updating the URL on the Luigi Client side, use the <code>linkManager()</code> <a href=\"/docs/luigi-client-api#withoutsync\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">withoutSync</a> and <a href=\"/docs/luigi-client-api#fromvirtualtreeroot\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">fromVirtualTreeRoot</a> methods.</p>\n      <p>If you are running Luigi Core v0.7.7+, you can use <a href=\"/docs/luigi-client-api#fromclosestcontext\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">fromClosestContext</a> instead of <code>fromVirtualTreeRoot</code>, which requires a <a href=\"/docs/luigi-client-api#navigationcontext\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">navigationContext</a> at the <code>virtualTree</code> node configuration.</p>\n      <h4 id=\"steps\">Steps</h4>\n      <ol>\n        <li>Configure the Luigi navigation node:</li>\n      </ol><!-- add-attribute:class:warning -->\n      <blockquote class=\"warning\">\n        <p><strong>NOTE</strong>: To keep the example simple, we use <a href=\"/docs/navigation-parameters-reference#virtualtree\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">virtualTree</a> to allow any nested navigation, but this is not mandatory. You can always specify the node tree yourself and still use automatic navigation with router events.</p>\n      </blockquote>\n      <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n            <img src=\"/images/copy-clipboard-default.svg\">\n            <div class=\"popoverCopy\">Click to copy</div>\n          </div></a>\n        <pre class=\"canCopyCode\"><code class=\"language-javascript\">    {\n      pathSegment: 'Orders',\n      label: 'orders',\n      viewUrl: 'https://orders.microfrontend/',\n      virtualTree: true\n    }\n</code></pre>\n      </div>\n      <ol start=\"2\">\n        <li>Use an Angular Router for navigation.</li>\n      </ol>\n      <p>Angular provides <a href=\"https://angular.io/guide/router#router-events\" rel=\"external\" target=\"_blank\">Router events</a>. We are reacting on <code>NavigationEnd</code> to update the URL after a successful route change.</p>\n      <p>We assume that the whole Angular app is one micro frontend and has its routes declared on the root level:</p>\n      <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n            <img src=\"/images/copy-clipboard-default.svg\">\n            <div class=\"popoverCopy\">Click to copy</div>\n          </div></a>\n        <pre class=\"canCopyCode\"><code class=\"language-javascript\">  { path: 'preload', component: PreloadComponent },\n  { path: '', component: OrderListComponent },\n  { path: ':id', component: OrderComponent },\n  { path: ':id/details', component: OrderDetailsComponent },\n</code></pre>\n      </div>\n      <p>Use this code to implement <code>luigi-auto-navigation.service.ts</code>, which is globally imported in our <code>app.module.ts</code>:</p>\n      <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n            <img src=\"/images/copy-clipboard-default.svg\">\n            <div class=\"popoverCopy\">Click to copy</div>\n          </div></a>\n        <pre class=\"canCopyCode\"><code class=\"language-javascript\">import { Router, NavigationEnd } from '@angular/router';\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { linkManager } from '@luigi-project/client';\n\n@Injectable({ providedIn: 'root' })\nexport class LuigiAutoNavigationService implements OnDestroy {\n  private subscriptions: Subscription = new Subscription();\n  constructor(private router: Router) {\n    this.subscriptions.add(\n      router.events\n        .pipe(filter(ev => ev instanceof NavigationEnd))\n        .subscribe((ev: NavigationEnd) => {\n          linkManager()\n            .fromVirtualTreeRoot()\n            .withoutSync()\n            .navigate(ev.url);\n        })\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n</code></pre>\n      </div>\n      <p><code>app.module.ts</code>:</p>\n      <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n            <img src=\"/images/copy-clipboard-default.svg\">\n            <div class=\"popoverCopy\">Click to copy</div>\n          </div></a>\n        <pre class=\"canCopyCode\"><code class=\"language-javascript\">@NgModule({\n    providers: [LuigiAutoNavigationService],\n</code></pre>\n      </div>\n      <h4 id=\"result\">Result</h4>\n      <p>Other than the added service, which you can also implement as a <code>RouteGuard</code> or similar, the micro frontend is unchanged and uses <code>[routerLink='']</code> or other functionality to navigate.</p>\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"sveltekit-routing\">SvelteKit routing</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <h4 id=\"overview-1\">Overview</h4>\n      <p>This example shows the steps to use Luigi with routing based on SvelteKit. It is also meant to show how to keep Luigi Core in sync with a Svelte micro frontend.</p>\n      <h4 id=\"steps-1\">Steps</h4>\n      <ol>\n        <li>\n          <p>Create a SvelteKit app by following the steps <a href=\"https://kit.svelte.dev/docs/introduction#getting-started\" rel=\"external\" target=\"_blank\">here</a>.</p>\n        </li>\n        <li>\n          <p>Include the Luigi Client script somewhere in your app. In this example, include the CDN version in your <code>app.html</code>:</p>\n        </li>\n      </ol>\n      <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n            <img src=\"/images/copy-clipboard-default.svg\">\n            <div class=\"popoverCopy\">Click to copy</div>\n          </div></a>\n        <pre class=\"canCopyCode\"><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n\t&#x3C;head>\n\t\t&#x3C;meta charset=\"utf-8\" />\n\t\t&#x3C;link rel=\"icon\" href=\"%sveltekit.assets%/favicon.png\" />\n\t\t&#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\t\t&#x3C;script src=\"https://unpkg.com/@luigi-project/client/luigi-client.js\">&#x3C;/script>\n\t\t%sveltekit.head%\n\t&#x3C;/head>\n\t&#x3C;body>\n\t\t&#x3C;div>%sveltekit.body%&#x3C;/div>\n\t&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n      </div>\n      <ol start=\"3\">\n        <li>Connect inbound and outbound routing channels in an always-present Svelte component in order to have two-way route sync. In this example, paste the following inside <code>__layout.svelte</code>:</li>\n      </ol>\n      <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n            <img src=\"/images/copy-clipboard-default.svg\">\n            <div class=\"popoverCopy\">Click to copy</div>\n          </div></a>\n        <pre class=\"canCopyCode\"><code class=\"language-html\">&#x3C;script>\n\timport Header from '$lib/header/Header.svelte';\n\timport '../app.css';\n\n\timport { onMount } from 'svelte';\n\timport  { goto, afterNavigate } from '$app/navigation';\n\n\t\n\tonMount(async () => {\n\t\t// react on Luigi-induced route changes\n\t\twindow.addEventListener('popstate', () => {\n\t\t\tgoto(window.location.href, { replaceState: true });\n\t\t});\n\t});\n\n\tafterNavigate(navigation => {\n\t\t// sync Luigi route after internal navigation\n\t\tif( navigation.to &#x26;&#x26; navigation.from &#x26;&#x26; navigation.to.href !== navigation.from.href ) {\n\t\t\tlet luigiRoute = navigation.to.pathname;\n\t\t\tif(luigiRoute === '/') {\n\t\t\t\tluigiRoute += 'home';\n\t\t\t}\n\t\t\tLuigiClient.linkManager().withoutSync().fromParent().navigate(luigiRoute);\n\t\t}\n\t});\n&#x3C;/script>\n...\n</code></pre>\n      </div>\n      <ol start=\"4\">\n        <li>Now your micro frontend is configured and you can include it in your application. Below is an example configuration that you can test by going to <a href=\"https://fiddle.luigi-project.io/\" rel=\"external\" target=\"_blank\">Luigi Fiddle</a> and clicking on \"Modify Config\". You need to replace <code>sveltekitMFEUrl</code> with the URL to your own micro frontend.</li>\n      </ol>\n      <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n            <img src=\"/images/copy-clipboard-default.svg\">\n            <div class=\"popoverCopy\">Click to copy</div>\n          </div></a>\n        <pre class=\"canCopyCode\"><code class=\"language-javascript\">let sveltekitMFEUrl = 'http://127.0.0.1:5173/';\n\nLuigi.setConfig({\n    navigation: { \n            nodes: [{ \n                pathSegment: 'home', \n                label: 'h', \n                globalNav: true,\n                hideFromNav: true, \n                children: [{ \n                    pathSegment: 'home', \n                    label: 'Home', \n                    icon: sveltekitMFEUrl + 'src/lib/header/svelte-logo.svg',\n                    viewUrl: sveltekitMFEUrl,\n                    viewGroup: 'svelte'\n                },{ \n                    pathSegment: 'about', \n                    label: 'About', \n                    icon: sveltekitMFEUrl + 'src/lib/header/svelte-logo.svg',\n                    viewUrl: sveltekitMFEUrl + 'about',\n                    viewGroup: 'svelte'\n                },{ \n                    pathSegment: 'todos', \n                    label: 'Todos', \n                    icon: sveltekitMFEUrl + 'src/lib/header/svelte-logo.svg',\n                    viewUrl: sveltekitMFEUrl + 'todos',\n                    viewGroup: 'svelte'\n                }] \n            }]\n        }, \n        \n        routing: { \n            useHashRouting: true \n        }, \n        settings: { \n            responsiveNavigation: 'semiCollapsible',\n            header: { \n                logo: 'img/luigi.png', \n                title: 'Svelte kit poc'\n            }\n        }\n    });    \n</code></pre>\n      </div>\n      <ol start=\"5\">\n        <li>If you don't want to specify each subsequent navigation node in your application, you can use Luigi's <a href=\"/docs/navigation-parameters-reference#virtualtree\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">virtualTree</a> feature.</li>\n      </ol>\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"react-routing\">React routing</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <h4 id=\"overview-2\">Overview</h4>\n      <p>This example provides general instructions on how to implement routing with React. The specifics might depend on which version of React you are using.</p>\n      <h4 id=\"steps-2\">Steps</h4>\n      <ol>\n        <li>In your Luigi configuration file, set <a href=\"/docs/navigation-parameters-reference#virtualtree\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">virtualTree</a> to <code>true</code> for the node where you want to use React routing. This allows navigation to any of the node children's paths without the need for specifying them on the Luigi Core level.</li>\n      </ol>\n      <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n            <img src=\"/images/copy-clipboard-default.svg\">\n            <div class=\"popoverCopy\">Click to copy</div>\n          </div></a>\n        <pre class=\"canCopyCode\"><code class=\"language-js\">Luigi.setConfig({\n  navigation: {\n    nodes: [\n      {\n        hideSideNav: true,\n        label: 'React',\n        pathSegment: 'react',\n        viewUrl: '//localhost:3000/',\n        virtualTree: true,\n      },\n</code></pre>\n      </div>\n      <ol start=\"2\">\n        <li>Inside your React app's <code>App.js</code> file, use Luigi's <a href=\"/docs/luigi-client-api#linkmanager\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">linkManager</a> methods to make Luigi aware of the internal URL changes.</li>\n      </ol>\n      <p>This can be done in React by calling a Luigi Client navigation function inside your route change listener. As the route of your micro frontend changes, the Luigi Client navigation call will append it to the main app's route so that it is kept in the browser's session navigation history, allowing you to move back and forth while navigating internally.</p>\n      <p>Use <a href=\"/docs/luigi-client-api#fromvirtualtreeroot\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">fromVirtualTreeRoot</a> to set routing to the parent route in the <code>virtualTree</code>, and <a href=\"/docs/luigi-client-api#withoutsync\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">withoutSync</a> to disable Luigi Core handling of the URL. Finally, navigate to the correct path using Luigi Client's <a href=\"/docs/luigi-client-api#navigate\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">navigate</a> method:</p>\n      <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n            <img src=\"/images/copy-clipboard-default.svg\">\n            <div class=\"popoverCopy\">Click to copy</div>\n          </div></a>\n        <pre class=\"canCopyCode\"><code class=\"language-js\">  let location = useLocation();\n\n  useEffect(() => {\n    // Broadcast all route changes to Luigi so that it can update the URL\n    LuigiClient.linkManager().fromVirtualTreeRoot().withoutSync().navigate(location.pathname);\n  }, [location]);\n</code></pre>\n      </div>\n    </dd>\n  </div>\n</dl>\n</section></section>"}},{"name":"navigation-advanced.md","shortName":"navigation-advanced","contents":{"data":{},"messages":[],"history":[],"cwd":"/Users/I529989/Documents/SAP/32-luigi/website/docs","value":"<section class=\"h0Wrapper headingWrapper\">\n<section class=\"h1Wrapper headingWrapper\"><h1 id=\"advanced-navigation\">Advanced navigation</h1>\n<p>This document shows you how to configure the following Luigi features:</p>\n<ul>\n  <li><a href=\"/docs/navigation-advanced#view-groups\" onclick=\"navigateInternal(event, this)\">View groups</a></li>\n  <li><a href=\"/docs/navigation-advanced#dynamically-changeable-paths\" onclick=\"navigateInternal(event, this)\">Dynamically changeable paths</a></li>\n  <li><a href=\"/docs/navigation-advanced#contexts\" onclick=\"navigateInternal(event, this)\">Contexts</a></li>\n  <li><a href=\"/docs/navigation-advanced#profile\" onclick=\"navigateInternal(event, this)\">Profile</a></li>\n  <li><a href=\"/docs/navigation-advanced#context-switcher\" onclick=\"navigateInternal(event, this)\">Context switcher</a></li>\n  <li><a href=\"/docs/navigation-advanced#product-switcher\" onclick=\"navigateInternal(event, this)\">Product switcher</a></li>\n  <li><a href=\"/docs/navigation-advanced#app-switcher\" onclick=\"navigateInternal(event, this)\">App switcher</a></li>\n  <li><a href=\"/docs/navigation-advanced#tab-navigation\" onclick=\"navigateInternal(event, this)\">Tab navigation</a></li>\n  <li><a href=\"/docs/navigation-advanced#breadcrumbs\" onclick=\"navigateInternal(event, this)\">Breadcrumbs</a></li>\n  <li><a href=\"/docs/navigation-advanced#additional-options\" onclick=\"navigateInternal(event, this)\">Additional options</a></li>\n</ul>\n<section class=\"h2Wrapper headingWrapper\"><h2 id=\"view-groups\">View groups</h2>\n<p>View groups are a way to reuse micro frontends (views) in Luigi.</p>\n<p>Imagine your application hosts two micro frontend views: <code>http://example.com/a#e</code> and <code>http://example.com/b#f</code>. Due to hash routing and a different path up to <code>#</code>, they are, by default, rendered in different iframes. However, as they both have the <strong>same origin</strong>, such as <code>example.com</code>, you want to render them in the same iframe. To achieve that, define the <strong>viewGroup</strong> parameter for any navigation node. Children of that node will automatically be considered part of the same view group.</p>\n<p>Nodes belonging to the same view group are always rendered in their own view group iframe. Nodes not belonging to any view group follow the same-origin iframe rendering policy.</p><!-- add-attribute:class:warning -->\n<blockquote class=\"warning\">\n  <p>\n    <strong>NOTE</strong>: To make sure view groups work properly, you need to include <strong>Luigi Client</strong> in your micro frontend. See <a href=\"/docs/luigi-client-setup\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">this document</a> for instructions, or for a simpler implementation include this line in your application:\n    <code>&#x3C;script src=\"https://unpkg.com/@luigi-project/client/luigi-client.js\">&#x3C;/script></code>\n  </p>\n</blockquote>\n<p>You can paste this view group example in <a href=\"https://fiddle.luigi-project.io/\" rel=\"external\" target=\"_blank\">Luigi Fiddle</a>:</p>\n<dl class=\"accordion-container\">\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"code-example\">Code example</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n            <img src=\"/images/copy-clipboard-default.svg\">\n            <div class=\"popoverCopy\">Click to copy</div>\n          </div></a>\n        <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.setConfig({\n            navigation: {\n                preloadViewGroups: true,\n                viewGroupSettings: {\n                    vg1: {\n                        preloadUrl: '/examples/microfrontends/multipurpose.html#/preload'\n                    }\n                },\n                nodes: () => [\n                    {\n                        pathSegment: 'settings',\n                        label: 'Settings',\n                        defaultChildNode: 'agents',\n                        children: [\n                            {\n                                viewGroup: 'vg1',\n                                pathSegment: 'agents',\n                                label: 'Agent Lists',\n                                hideSideNav: false,\n                                loadingIndicator: {\n                                    hideAutomatically: true,\n                                    enabled: true\n                                },\n                                viewUrl: '/examples/microfrontends/multipurpose.html#/route1',\n                            },\n                            {\n                                viewGroup: 'vg1',\n                                pathSegment: 'agentgroups',\n                                label: 'Agent Groups',\n                                hideSideNav: false,\n                                loadingIndicator: {\n                                    hideAutomatically: true,\n                                    enabled: true\n                                },\n                                viewUrl: '/examples/microfrontends/multipurpose.html#/route2',\n                            },\n                        ]\n                    }\n                ],\n                profile: {\n                    logout: {\n                        label: 'Sign Out',\n                        icon: \"sys-cancel\",\n                        customLogoutFn: () => { }\n                    },\n                }\n            },\n            routing: {\n                useHashRouting: true\n            }\n        });\n</code></pre>\n      </div>\n    </dd>\n  </div>\n</dl>\n<p>The view groups feature also offers out-of-the-box caching. Each time you navigate to another view group, either a new iframe is created or it is reused if already exists. In both cases, the iframe you are navigating from becomes hidden and is available for you to use again. If you navigate back to the first iframe and it should be updated with new data, such when a new entry was added in the second iframe and you want to display it in a table in the first iframe, you must define a <strong>preloadUrl</strong> parameter for the view group under <strong>navigation.viewGroupSettings</strong>.</p>\n<p>You can also preload view groups. You just need to define which URL you want to preload, and Luigi will preload the view after some user interactions when the browser is most likely to be idle. This option is active by default, but you can deactivate it with the <a href=\"/docs/navigation-parameters-reference#preloadviewgroups\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\"><strong>preloadViewGroups</strong></a> configuration flag.</p>\n<p>For more information on setting caching with view refreshing and preloading for view groups, read <a href=\"/docs/navigation-parameters-reference#node-parameters\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">this document</a>.</p>\n<p>Further options related to view groups can be configured using the parameters listed below. These parameters should be placed just before <code>nodes:</code> in the <code>navigation:</code> section of the configuration file:</p>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"viewgroupsettings\">viewGroupSettings</h3>\n<ul>\n  <li><strong>type</strong>: object</li>\n  <li><strong>description</strong>: contains key-object pairs, where the key is the view group name as specified in the node properties, and the object contains key-value pairs. In each key-value pair, the key is the feature name and the value is the actual setting. The following options are supported:</li>\n  <li><strong>attributes</strong>:\n    <ul>\n      <li><strong>preloadUrl</strong>(string): needs to be an absolute URL of a micro frontend belonging to a view group. It may not be an URL of a node. It is recommended that you use a dedicated small, visually empty view, which imports Luigi Client and is fine with getting an empty context, for example, without an access token. The <strong>preloadUrl</strong> property is also required for view group caching in case you need a view group iframe to refresh whenever you navigate back to it.</li>\n      <li><strong>loadOnStartup</strong>(boolean): when set to <code>true</code>, it loads the respective view group with the respective <strong>preloadUrl</strong> in the background as soon as the app first starts.</li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"preloadviewgroups\">preloadViewGroups</h3>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: allows deactivating the default preloading of view group iframes.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"defaultsisolateview\">defaults.isolateView</h3>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: renders all views in new frames. This setting overrides the same-domain frame reuse. The <strong>defaults.isolateView</strong> is disabled by default, and you can overwrite it using the <strong>isolateView</strong> value on a single node level.</li>\n</ul>\n</section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"dynamically-changeable-paths\">Dynamically changeable paths</h2>\n<p>In Luigi, you can make a navigation path dynamically changeable according to your needs. This is accomplished by defining dynamic parameters within the <strong>pathSegement</strong> or <strong>viewUrl</strong> navigation paths.</p>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"dynamic-path-parameters\">Dynamic path parameters</h3>\n<p>Instead of a static value for your <strong>pathSegment</strong>, you can add a colon to this value to make it act as a parameter. This tells Luigi to accept any value for this <strong>pathSegment</strong>.</p>\n<p>In this example, a sample path parameter called <code>:userId</code> is defined:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">navigation: {\n    nodes: [\n      {\n        pathSegment: 'home',\n        label: 'Home',\n        viewUrl: 'https://example.com/',\n        children: [\n          {\n            pathSegment: 'users',\n            label: 'User List',\n            viewUrl: 'https://example.com/users.html',\n            children: [\n              {\n                pathSegment: ':userId',\n                label: 'User Profile',\n                // E.g. if userId is 'JohnSmith'\n                // the main application URL will be https://[YOUR.WEBSITE]/users/JohnSmith\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n...\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"dynamic-viewurl-parameters\">Dynamic viewUrl parameters</h3>\n<p>You have the following options to add a parameter to <strong>viewUrl</strong>:</p>\n<ul>\n  <li>Place the parameter anywhere in the <strong>viewUrl</strong> value. For example, if the main application URL is <code>https://[YOUR.WEBSITE]/home/users/JohnSmith</code>, then the <strong>viewUrl</strong> of the micro frontend in the content area can be <code>https://example.com/users/details.html#id=JohnSmith</code>.</li>\n  <li>\n    Use the <a href=\"/docs/luigi-client-api\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Luigi Client API</a> to access the node parameter values from the micro frontend. Use the <code>LuigiClient.getPathParams()</code> function.\n    For example, to get the value of the <strong>userId</strong> parameter, use <code>LuigiClient.getPathParams().userId</code>.\n  </li>\n  <li>Add a parameter to the context part of your configuration:</li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">{\n  pathSegment: ':userId',\n  label: 'User Profile',\n  viewUrl: 'https://example.com/users/details.html#id=:userId;',\n  context: {\n    user: ':userId'\n  }\n}\n  ...\n</code></pre>\n</div>\n<p>If you are using <a href=\"https://docs.luigi-project.io/docs/i18n\" rel=\"external\" target=\"_blank\">localization</a> and translating your page into different languages, you can also add a <strong>{i18n.currentLocale}</strong> parameter to the viewUrl part of your configuration:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">{\n  pathSegment: 'home',\n  label: 'Home',\n  viewUrl: 'https://example.com/{i18n.currentLocale}/microfrontend.html',\n}\n  ...\n</code></pre>\n</div>\n<p>The <strong>{i18n.currentLocale}</strong> parameter will be replaced by the value of <code>LuigiI18N.getCurrentLocale()</code>, for example <code>https://example.com/en/microfrontend.html</code></p>\n<p>In all these cases, the parameter is automatically replaced by the real value.</p>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"dynamic-node-parameters\">Dynamic Node parameters</h3>\n<p>You can use dynamic node parameters to build the <strong>viewUrl</strong> and pass them to the micro frontend specified in the navigation node selected in the navigation path.</p>\n<p>You can specify them in the main application URL, similarly to URL query parameters with a specific prefix. The prefix is <code>~</code> by default, but you can reconfigure it using the global <strong>nodeParamPrefix</strong> setting.</p>\n<p>All parameters without the prefix are not passed to the micro frontend and are consumed by the main application.</p>\n<p>A sample <strong>viewUrl</strong> <code>https://[YOUR.WEBSITE]/home/users/allUsers?~sorting=asc&#x26;~page=2</code> supports sorting and pagination by introducing the <strong>sort</strong> and <strong>page</strong> node parameters.</p>\n<p>Using dynamic node parameters in the previous example results in:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">navigation: {\n    nodes: [\n      {\n        pathSegment: 'home',\n        label: 'Home',\n        viewUrl: 'https://example.com/',\n        children: [\n          {\n            pathSegment: 'users',\n            label: 'User List',\n            viewUrl: 'https://example.com/users/list.html#pagenr={nodeParams.page};sort={nodeParams.sorting}',\n            children: [\n              {\n                pathSegment: ':userId',\n                label: 'User Profile',\n                viewUrl: 'https://example.com/projects/details.html#id=:userId;'\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n...\n</code></pre>\n</div>\n<p>Use the following options to work with node parameters:</p>\n<p>Build the <strong>viewUrl</strong> by placing parameters anywhere in the <strong>viewUrl</strong> value using the following syntax: <code>nodeParams.{node param name}</code>. For example, if the main application URL is <code>https://[YOUR.WEBSITE]/home/projects/?~sorting=asc&#x26;~page=2</code> then the <strong>viewUrl</strong> of a micro frontend is <code>https://example.com/projects/list.html#pagenr=2;sort=asc</code>.</p>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"dynamic-viewurl\">Dynamic viewUrl</h3>\n<p>You can use both dynamic node parameters and path parameters to build a <strong>viewUrl</strong>.</p>\n<p>For example, if the web application URL is <code>https://[YOUR.WEBSITE]/something/sample_1/products?~sort=asc</code>, the micro frontend loads using a different URL, such as <code>https://example.com/project/sample_1/products?sort=asc</code>.</p>\n<p>When loading, the <strong>viewUrl</strong> uses the following dynamic URL parameters:</p>\n<ul>\n  <li><code>:projectId = sample_1</code></li>\n  <li><code>sort = asc</code></li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.setConfig({\n  routing: {\n    nodeParamPrefix: '~',\n    showModalPathInUrl: true,\n    modalPathParam: 'modal'\n  },\n  navigation: {\n    nodes: [\n      {\n        pathSegment: 'something',\n        label: 'Something',\n        viewUrl: 'https://example.com/project',\n        children: [{\n          navigationContext: 'project',\n          pathSegment: ':projectId',\n          viewUrl: 'https://example.com/project/:projectId',\n          // Optionally, you can always call LuigiClient.getPathParams() to get the parameters\n          // context: {\n          //  currentProject: ':projectId'\n          // },\n          children: [\n            {\n              pathSegment: 'products',\n              label: 'Products',\n              viewUrl: 'https://example.com/project/:projectId/products'\n            }\n          ]\n        }]\n      }\n    ]\n  }\n});\n</code></pre>\n</div>\n</section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"contexts\">Contexts</h2>\n<p>The purpose of contexts is to send objects to the micro frontend. You can do this by adding this parameter to your node:</p>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"context\">context</h3>\n<ul>\n  <li><strong>type</strong>: object</li>\n  <li><strong>description</strong>: sends the specified object as context to the view. Use this property in combination with the dynamic <strong>pathSegment</strong> to receive the context through the context listeners of Luigi Client. This is an alternative to using the dynamic value in the <strong>viewUrl</strong>.</li>\n</ul><!-- add-attribute:class:warning -->\n<blockquote class=\"warning\">\n  <p><strong>NOTE</strong>: Context should not be used to create the path or URL as this can lead to errors. Please use one of the methods described in the <a href=\"/docs/navigation-advanced#dynamically-changeable-paths\" onclick=\"navigateInternal(event, this)\">dynamically changeable paths</a> section instead.</p>\n</blockquote>\n</section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"profile\">Profile</h2>\n<p>\n  <img src=\"/assets/profile.jpg\" alt=\"Profile\">\n</p>\n<p>The profile is a drop-down list in the top navigation that allows you to override the logout item content if authorization is already configured. You can also add links to Luigi navigation nodes.</p>\n<p>You can configure the profile element in the top navigation by adding the <strong>profile</strong> property to the navigation object in the configuration file. Find all the parameters which you can use to configure a profile <a href=\"/docs/navigation-parameters-reference#profile\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">here</a>.</p>\n<p>Example:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">profile: {\n  logout: {\n    label: 'Sign Out'\n    icon: \"sys-cancel\",\n    customLogoutFn: myLogoutFn\n  },\n}\n</code></pre>\n</div>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"contextswitcher\">Context switcher</h2>\n<p>\n  <img src=\"/assets/context-switcher.jpg\" alt=\"Context switcher\">\n</p>\n<p>The context switcher is a drop-down element in the top navigation. It allows you to switch between a curated list of navigation elements such as Environments. To do so, add the <strong>contextSwitcher</strong> property to the navigation object. Find all the parameters you can use to configure it <a href=\"/docs/navigation-parameters-reference#context-switcher\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">here</a>.</p>\n<p> Example:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">contextSwitcher: {\n  defaultLabel: 'Select Environment ...',\n  testId: 'myTestId',\n  parentNodePath: '/environments',\n  lazyloadOptions: false,\n  fallbackLabelResolver: (id) => (id.toUpperCase()),\n  useFallbackLabelCache: true,\n  options: [{label, pathValue,customRendererCategory}, {label, pathValue, customRendererCategory}],\n  customSelectedOptionRenderer: (option) => {\n    let color = \"white\";\n    if (option.customRendererCategory === 'production') {\n      color = \"#87FF00\";\n    } else if (option.customRendererCategory === 'stage') {\n      color = \"#00C9FF\";\n    }\n    return  `&#x3C;label style=\"color:${color}\">${option.label} &#x3C;/label>`;\n  },\n  customOptionsRenderer: (option, isSelected) => {\n    let className = 'fd-menu__item' + (isSelected ? ' is-selected' : '');\n    return `&#x3C;a class=\"${className}\">${option.label} test&#x3C;/a>`;\n  },\n  actions: [{label,link,position,clickHandler?}]\n},\n</code></pre>\n</div>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"productswitcher\">Product switcher</h2>\n<p>\n  <img src=\"/assets/product-switcher.jpg\" alt=\"Product switcher\">\n</p>\n<p>The product switcher is window in top the navigation which allows you to switch between navigation elements displayed there. To add it to your application, include the <strong>productSwitcher</strong> property in your <strong>navigation</strong> object. You may also add any of the parameters listed <a href=\"/docs/navigation-parameters-reference#product-switcher\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">here</a>.</p>\n<p>Example:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">productSwitcher: {\n  label: 'My Products',\n  testId: 'myTestId',\n  icon: 'grid',\n  items: [\n    {\n      icon: '',\n      label: 'Luigi in Github',\n      testId: 'myTestId',\n      externalLink: {\n        url: 'https://luigi-project.io/',\n        sameWindow: false\n      }\n    },\n    {\n      icon: '',\n      label: 'Project 1',\n      testId: 'myTestId',\n      link: '/projects/pr1'\n    }\n  ]\n},\n</code></pre>\n</div>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"appswitcher\">App switcher</h2>\n<p>\n  <img src=\"/assets/app-switcher.jpg\" alt=\"App switcher\">\n</p>\n<p>The app switcher is a dropdown at the top of the navigation which allows you to switch between applications. To use it, you need to:</p>\n<ol>\n  <li>Define a <a href=\"/docs/general-settings#headerlogo\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">header object</a> in the <code>settings:</code> section of your Luigi configuration.</li>\n  <li>Add the <strong>appSwitcher</strong> parameter to the <strong>navigation</strong> object.</li>\n</ol>\n<p>You may also add any of the parameters listed <a href=\"/docs/navigation-parameters-reference#app-switcher\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">here</a>.</p>\n<p>Example:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">appSwitcher = {\n  showMainAppEntry: true,\n  items: [\n    {\n      title: 'Application One',\n      subTitle: 'the first app',\n      link: '/projects/pr1'\n    },\n    {\n      title: 'Application Two',\n      link: '/projects/pr2',\n      subTitle: 'the second app'\n    },\n  ]\n};\n</code></pre>\n</div>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"tab-navigation\">Tab navigation</h2>\n<p>\n  <img src=\"/assets/tabnav.jpg\" alt=\"Tab navigation\">\n</p>\n<p>Tab-style navigation in Luigi can be displayed directly above the micro frontend area, providing you with additional menu options. When you put tab navigation nodes into a <a href=\"/docs/navigation-configuration#category\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">category</a>, they will be rendered in a drop-down. Add this parameter to your configuration to create tab navigation nodes:</p>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"tabnav\">tabNav</h3>\n<ul>\n  <li>\n    <p><strong>type</strong>: boolean or Object</p>\n  </li>\n  <li>\n    <p><strong>description</strong>: renders the children of the node as a horizontal navigation bar. Sub-children are not supported. When you categorize nodes, you will get a drop-down menu in the horizontal navigation. Set to <code>true</code> to show the horizontal navigation, or use the extra attributes for more customization. (<strong>since</strong>: v0.7.0)</p>\n  </li>\n  <li>\n    <p><strong>attributes</strong>:</p>\n    <ul>\n      <li><strong>hideTabNavAutomatically</strong>: boolean. In the case the node has only one child, it's possible to configure whether the horizontal navigation bar will be hidden automatically or not. Set this attribute to <code>true</code> to hide the horizontal navigation bar and <code>false</code> otherwise. ( <strong>since</strong>: v2.0.0 )</li>\n      <li><strong>showAsTabHeader</strong>: boolean. If this attribute is set on the node, it will be considered as a horizontal navigation header micro frontend. The node should be <a href=\"/docs/web-component\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">webcomponent-based</a> and it should have nested children to show on the horizontal navigation bar. (<strong>since</strong>: 2.2.0 )</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>example</strong>:</p>\n  </li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-js\">// Without hiding tab nav automatically \n pathSegment: 'example', \n label: 'Example', \n tabNav: true,\n children: [\n  ...\n                \n// With hiding tab nav automatically if node has only one child               \n  pathSegment: 'example',\n  label: 'Example',\n  tabNav: { hideTabNavAutomatically: true },\n  children: [\n  ...\n\n  // showing horizontal navigation header micro frontend       \n  pathSegment: 'header',\n  label: 'Header Micro frontend',\n  viewUrl: '/tabHeader.js'\n  webcomponent: true,\n  tabNav: { showAsTabHeader : true },\n  children: [\n  ...\n</code></pre>\n</div>\n</section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"breadcrumbs\">Breadcrumbs</h2>\n<p>Luigi allows you to add <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Layout_cookbook/Breadcrumb_Navigation\" rel=\"external\" target=\"_blank\">breadcrumbs</a> to your application. You need to create your own custom code implementing breadcrumbs. Once the breadcrumbs config is set, it is enabled by default for all nodes. If you wish to disable it for a particular node, you need to set <a href=\"/docs/navigation-parameters-reference#showbreadcrumbs\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">showBreadcrumbs</a> to false for that node.</p>\n<p>In your custom code, you can choose any look and style for the breadcrumbs as well as define what should happen upon clicking them. However, the code should follow this general pattern and return the variable <code>breadcrumbs</code>:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-js\"> navigation.breadcrumbs = {\n            pendingItemLabel: \"not loaded yet\", // string used as fallback if node label is not yet resolved\n            omitRoot: false,  // if set to true, the root node in breadcrumb hierarchy is omitted \n            clearBeforeRender: true, // if set to true, the containerElement will be cleared first, before being rendered. If set to false, handling of the clear before render needs to be handled by your side \n            autoHide: true, // hide breadcrumbs when navigating to root node\n            renderer: (containerElement, nodeItems, clickHandler)  => {\n                  // containerElement - refers to HTML element that contains the breadcrumb structure to which you can append your own customised elements\n                  // nodeItems : [{\n                       label: label of node,\n                       node: navigation node,\n                       route: node route,\n                       pending: indicates whether node label resolving state is pending or not\n                  }]\n                  // clickHandler(node) , can be called per node, to navigate to that node\n            }\n      }\n</code></pre>\n</div>\n<p>Below is an example of a simple <code>breadcrumbsConfig</code>:</p>\n<dl class=\"accordion-container\">\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"click-to-expand\">Click to expand</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n            <img src=\"/images/copy-clipboard-default.svg\">\n            <div class=\"popoverCopy\">Click to copy</div>\n          </div></a>\n        <pre class=\"canCopyCode\"><code class=\"language-js\">navigation.breadcrumbs = {\n      clearBeforeRender: true,\n      renderer: (el, items, clickHandler) => {\n        el.classList.add('myBreadcrumb');\n        let breadcrumbs = document.createElement('ol');\n        breadcrumbs.setAttribute('style', 'top: 0;position: absolute;left: 0;');\n        items.forEach((item, index) => {\n          if (item.label) {\n            let itemCmp = document.createElement('li');\n            itemCmp.setAttribute('style', 'display:inline; margin: 0 10px;');\n            itemCmp.setAttribute('data-testid', `breadcrumb_${item.label}_index${index}`);\n            itemCmp.innerHTML = item.label;\n            itemCmp._item = item;\n            breadcrumbs.appendChild(itemCmp);\n          }\n        });\n        breadcrumbs.addEventListener('click', event => {\n          console.log('event detail', event);\n          event.preventDefault();\n          clickHandler(event.detail.item._item);\n        });\n        el.appendChild(breadcrumbs);\n        return breadcrumbs;\n      }\n    };\n</code></pre>\n      </div>\n    </dd>\n  </div>\n</dl>\n<p>Below is another example which uses UI5 Web Components breadcrumbs:</p>\n<dl class=\"accordion-container\">\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"click-to-expand-1\">Click to expand</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n            <img src=\"/images/copy-clipboard-default.svg\">\n            <div class=\"popoverCopy\">Click to copy</div>\n          </div></a>\n        <pre class=\"canCopyCode\"><code class=\"language-js\">config.navigation.breadcrumbs = {\n            autoHide: true,\n            omitRoot: false,\n            pendingItemLabel: '...',\n            renderer: (el, items, clickHandler) => {\n              el.classList.add('dxp-breadcrumb');\n              const ui5breadcrumbs =\n                el.querySelector('ui5-breadcrumbs') ||\n                document.createElement('ui5-breadcrumbs');\n              ui5breadcrumbs.innerHTML = '';\n              items.forEach((item, index) => {\n                const label = item.label;\n                \n                if (label &#x26;&#x26; !label.startsWith(':virtualSegment_')) {\n                  const itemCmp = document.createElement(\n                    'ui5-breadcrumbs-item'\n                  );\n                  itemCmp.setAttribute('href', item.route);\n                  itemCmp.innerHTML = label;\n                  itemCmp._item = item;\n                  ui5breadcrumbs.appendChild(itemCmp);\n                }\n              });\n              ui5breadcrumbs.addEventListener('item-click', (event) => {\n                if (\n                  !(\n                    event.detail.ctrlKey ||\n                    event.detail.altKey ||\n                    event.detail.shiftKey ||\n                    event.detail.metaKey\n                  )\n                ) {\n                  event.preventDefault();\n                  clickHandler(event.detail.item._item);\n                }\n              });\n              el.appendChild(ui5breadcrumbs);\n\n              return ui5breadcrumbs;\n            },\n          };\n</code></pre>\n      </div>\n    </dd>\n  </div>\n</dl>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"additional-options\">Additional options</h2>\n<p>For more options and parameters which you can use to configure navigation in Luigi, read the <a href=\"/docs/navigation-parameters-reference\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">full parameter reference</a>. Some of the topics you can find there include:</p>\n<ul>\n  <li>Defining the <a href=\"/docs/navigation-parameters-reference#routing-parameters\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">routing</a> strategy of your application</li>\n  <li>Enabling and disabling the <a href=\"/docs/navigation-parameters-reference#loadingindicatorenabled\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">loading indicator</a></li>\n  <li>Hiding <a href=\"/docs/navigation-parameters-reference#hidefromnav\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">navigation nodes</a> or <a href=\"/docs/navigation-parameters-reference#hidesidenav\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">side navigation</a></li>\n  <li>Displaying content in a <a href=\"/docs/navigation-parameters-reference#opennodeinmodal\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">modal</a></li>\n  <li>Adding a <a href=\"/docs/navigation-parameters-reference#badgecounter\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">badge counter</a> to your nodes</li>\n  <li>Defining a custom <a href=\"/docs/navigation-parameters-reference#testid\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">testId</a> for end-to-end tests</li>\n</ul>\n</section></section></section>"}},{"name":"navigation-configuration-example.md","shortName":"navigation-configuration-example","contents":{"data":{},"messages":[],"history":[],"cwd":"/Users/I529989/Documents/SAP/32-luigi/website/docs","value":"<section class=\"h0Wrapper headingWrapper\">\n<section class=\"h1Wrapper headingWrapper\"><h1 id=\"navigation-configuration-example\">Navigation configuration example</h1>\n<p>This example represents a Luigi navigation configuration example including parameters described in the <a href=\"/docs/navigation-parameters-reference\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">navigation parameters reference</a>.</p>\n<p>Note that this is not a functional example, as its purpose is to illustrate different configuration options. For example, the line <code>children: [node, node, node]</code> will return an error because <code>node</code> is just a placeholder which has to be replaced by actual nodes.</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.setConfig({\n  routing: {\n    // uses hash-based navigation if set to true\n    useHashRouting: true,\n    nodeParamPrefix: '~',\n    showModalPathInUrl: true,\n    modalPathParam: 'modal'\n    skipRoutingForUrlPatterns: [/access_token=/, /id_token=/]\n  },\n  // navigation structure and settings\n  navigation: {\n    nodeAccessibilityResolver: function (nodeToCheckPermissionFor, parentNode, currentContext) {},\n    viewGroupSettings: {\n      main: {\n        preloadUrl: 'https://example.com/index.html#/preload',\n      },\n      projects: {\n        preloadUrl: 'https://example.com/projects.html#/preloading',\n      },\n      envs: {\n        preloadUrl: 'https://example.com/environments-details.html#/preload-view',\n      }\n    },\n    nodes: [\n      // STATIC navigation node\n      {\n        pathSegment: 'settings',\n        label: 'Settings',\n        viewUrl: 'https://example.com/settings',\n        viewGroup: 'settingsGroup',\n        // optional\n        children: [node, node, node],\n        hideFromNav: false,\n        isolateView: false,\n        icon: 'settings',\n        testId: 'myTestId',\n        category: {\n          label: 'General',\n          testId: 'myTestId',\n          icon: 'general'\n        }, // OR\n        category: 'General'\n      },\n      // DYNAMIC navigation node\n      {\n        navigationContext: 'contextName',\n        pathSegment: ':projectId',\n        testId: 'myTestId',\n        viewUrl: '/some/path/:projectId',\n        context: {\n          projectId: ':projectId'\n        },\n        children: [node, node, node]\n      },\n      // Implicit structural node\n      {\n        pathSegment: 'project/:projectId',\n        viewUrl: '/some/path/:projectId',\n        children: [node, node, node]\n      }\n      // View groups nodes\n      {\n        viewGroup: 'main',\n        pathSegment: 'overview',\n        label: 'Overview',\n        viewUrl: 'https://example.com/index.html#/overview'\n      },\n      {\n        viewGroup: 'main',\n        pathSegment: 'preload',\n        viewUrl: 'https://example.com/index.html#/preload'\n      },\n      {\n        viewGroup: 'projects',\n        pathSegment: 'projects',\n        label: 'Projects',\n        viewUrl: 'https://example.com/projects.html#/list',\n        children: [\n          {\n            pathSegment: 'preloading',\n            viewUrl: 'https://example.com/projects.html#/preloading'\n          }\n        ]\n      },\n      {\n        viewGroup: 'envs',\n        pathSegment: 'create-environment',\n        viewUrl: 'https://example.com/environments.html#/create',\n        context: {\n          label: 'Create Environment'\n        }\n      },\n      {\n        viewGroup: 'envs',\n        pathSegment: 'environments',\n        viewUrl: 'https://example.com/environments-details.html#/list',\n        children: [\n          {\n            pathSegment: 'preload',\n            viewUrl: 'https://example.com/environments-details.html#/preload-view'\n          },\n          {\n            pathSegment: 'env1',\n            viewUrl: 'https://example.com/environments-details.html#/details/env1'\n          }\n        ]\n      }\n    ],\n    contextSwitcher: {\n      defaultLabel: 'Select Environment ...',\n      testId: 'myTestId',\n      parentNodePath: '/environments',\n      lazyloadOptions: false,\n      fallbackLabelResolver: (id) => (id.toUpperCase()),\n      useFallbackLabelCache: true,\n      options: [{label,pathValue}, {label,pathValue}],\n      actions: [{label,link,position,clickHandler}]\n    },\n    profile: {\n      logout: {\n        label: 'End Session',\n        // icon: \"sys-cancel\",\n        testId: 'myTestId',\n        customLogoutFn: myLogoutFn\n      },\n      items: [\n        {\n          icon: '',\n          testId: 'myTestId',\n          label: 'Luigi landing page',\n          externalLink: {\n            url: 'https://luigi-project.io/',\n            sameWindow: false\n          }\n        },\n        {\n          icon: '',\n          label: 'Project 1',\n          link: '/projects/pr1'\n        }\n      ]\n    },\n    productSwitcher: {\n      label: 'My Products',\n      testId: 'myTestId',\n      icon: 'grid',\n      items: [\n        {\n          icon: '',\n          label: 'Luigi landing page',\n          testId: 'myTestId',\n          externalLink: {\n            url: 'https://luigi-project.io/',\n            sameWindow: false\n          }\n        },\n        {\n          icon: '',\n          label: 'Project 1',\n          testId: 'myTestId',\n          link: '/projects/pr1'\n        }\n      ]\n    }\n  }\n});\n</code></pre>\n</div>\n</section></section>"}},{"name":"navigation-configuration.md","shortName":"navigation-configuration","contents":{"data":{},"messages":[],"history":[],"cwd":"/Users/I529989/Documents/SAP/32-luigi/website/docs","value":"<section class=\"h0Wrapper headingWrapper\">\n<section class=\"h1Wrapper headingWrapper\"><h1 id=\"basic-navigation-configuration\">Basic navigation configuration</h1>\n<p>This guide describes some basic features of Luigi navigation and how to configure it.</p>\n<p>If you are already familiar with the basics, take a look at:</p>\n<ul>\n  <li><a href=\"/docs/navigation-advanced\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Advanced navigation configuration</a></li>\n  <li><a href=\"/docs/navigation-parameters-reference\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Full reference list of navigation parameters</a></li>\n</ul>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/9hczgxJV1eU\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<section class=\"h2Wrapper headingWrapper\"><h2 id=\"navigation-elements\">Navigation elements</h2>\n<p>There are three main elements to Luigi:</p>\n<ol>\n  <li>\n    <p>Top navigation which displays the main navigation path. Additionally, it can include context, product, app, and profile <a href=\"/docs/navigation-advanced#context-switcher\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">switchers</a>.</p>\n  </li>\n  <li>\n    <p>Side navigation which displays the child nodes of the root navigation node. It can include structures like collapsible dropdowns and categories which can be used for deep linking.</p>\n  </li>\n  <li>\n    <p>Main content window which renders the micro frontend.</p>\n  </li>\n</ol>\n<p>\n  <img src=\"/assets/navigation-structure.jpg\" alt=\"Navigation layout\">\n</p>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"first-steps\">First steps</h2>\n<p>To configure navigation, edit the JavaScript configuration file of your project, specifically the <code>navigation:</code> category. See <a href=\"/docs/application-setup\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">application setup</a> for instructions on where to find this file for your framework.</p>\n<blockquote>\n  <p><strong>TIP:</strong> You can use <a href=\"https://fiddle.luigi-project.io\" rel=\"external\" target=\"_blank\">Luigi Fiddle</a> to experiment with configuration.</p>\n</blockquote>\n<p>The configuration file contains a tree-like structure of <strong>navigation nodes</strong>. The first level nodes represent the top navigation, while their children represent the side navigation. The nodes have some basic properties, such as labels, links, views, and (optionally) children. These properties are called <strong>navigation parameters</strong>.</p>\n<p>Here is an example of a simple navigation structure:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">navigation: {\n  nodes: [\n    {\n      pathSegment: 'TopNav1',\n      label: 'Top Navigation Element One',\n      viewUrl: 'https://example.com',\n      children: [\n        {\n          pathSegment: 'SideNav1',\n          label: 'Side Navigation Element One',\n          viewUrl: 'https://example.com/projects/list.html',\n          children: [\n            {\n              link: '/TopNav1/internalLink',\n              label: 'This takes you to [YOUR.WEBSITE]/TopNav1/internalLink',\n            },\n            {\n              externalLink: {\n                url: 'http://www.luigi-project.io',\n                sameWindow: false\n              },\n              label: 'This takes you to an external page',\n            },\n          ]\n        },\n      ]\n    },\n    {\n      pathSegment: 'TopNav2',\n      label: 'Top Navigation Element Two',\n      viewUrl: 'https://example.org',\n      children: [\n...\n</code></pre>\n</div>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"basic-navigation-parameters\">Basic navigation parameters</h2><!-- add-attribute:class:warning -->\n<blockquote class=\"warning\">\n  <p><strong>NOTE:</strong> For a full list of available parameters, see the <a href=\"/docs/navigation-parameters-reference\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">parameter reference</a> document.</p>\n</blockquote>\n<p>The <a href=\"/docs/navigation-configuration#first-steps\" onclick=\"navigateInternal(event, this)\">first steps</a> example contains some basic navigation parameters:</p>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"pathsegment\">pathSegment</h3>\n<p>This is used to build the path in the browser URL. The main application path is built from values in the navigation path, joined with the <strong>/</strong> character. For example, if the value of a node's <strong>pathSegment</strong> is <code>home</code>, the path for that node would be <code>[YOUR.WEBSITE]/home</code>. You can override this setting by using one of the following instead of <strong>pathSegment</strong>:</p>\n<ul>\n  <li><strong>link</strong> - define a specific internal path. Note that a valid path must always start from the <strong>root node</strong>. For example, if your root node is <code>home</code>, and you want to navigate to the <code>projects</code> directory:\n    <ul>\n      <li><code>link: '/home/projects'</code> is correct</li>\n      <li><code>link: '/projects'</code>is not correct, since <code>/projects</code> is not the root node</li>\n    </ul>\n  </li>\n  <li><strong>externalLink</strong> - takes you to an external website. You must define the <strong>url</strong> of the website and whether it should be opened in a new window (<code>sameWindow: false</code>) or the same window (<code>sameWindow: true</code>).</li>\n</ul>\n<p>You can also specify a nested node as <code>project/:id</code>. It can only be used standalone, with no other nodes having the same or partially overlapping pathSegments (eg. <code>projects</code> and <code>projects/:id</code> do not work together).</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code>// structural node example\n{\n  viewUrl: '//example.com/projects/:id',\n  pathSegment: `project/:id`,\n  context: { id: ':id' }\n}\n// gets internally expanded to this node structure\n{\n  viewUrl: 'project',\n  children: [{\n    viewUrl: '//example.com/projects/:id',\n    pathSegment: `:id`,\n    context: { id: ':id' }\n  }]\n}\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"label\">label</h3>\n<p>The name of the node which will be visible on your page.</p>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"viewurl\">viewUrl</h3>\n<p>The URL of the micro frontend which will be displayed in the main content area of your page.</p>\n</section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"grouping-navigation-nodes\">Grouping navigation nodes</h2>\n<p>You may use these parameters if you want to group related navigation nodes:</p>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"category\">category</h3>\n<p>You can add the <strong>category</strong> property to navigation nodes you want to group. The resulting structure will be different depending on whether you want to group top or side navigation nodes. In both cases, you should define at least one node in a group with <strong>label</strong> and <strong>icon</strong> properties. In addition it is also possible to define an <strong>id</strong> property. In that case the <strong>id</strong> is responsible for grouping and the <strong>label</strong> of the group will be the name in the navigation. For all other nodes, you can set <strong>category</strong> as a string with the label value.</p>\n<ul>\n  <li>\n    Top navigation:\n    top navigation nodes in the same category will be rendered as a dropdown.\n  </li>\n  <li>\n    Side navigation:\n    side navigation nodes will be grouped under a header with the category name. You can configure them to be <strong>collapsible</strong> or not.\n  </li>\n</ul>\n<p>This is an example of what a node with a category including a label and icon looks like:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">{\n  category: { label: 'Links', icon: 'myIcon', collapsible: true },\n  externalLink: {\n    url: 'http://www.luigi-project.io',\n    sameWindow: false\n  },\n  label: 'Click here to visit the Luigi homepage',\n},\n...\n</code></pre>\n</div>\n<p>To define all subsequent nodes, use the category label:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">{\n  category: 'Links',\n  externalLink: {\n    url: 'http://www.luigi-project.io',\n    sameWindow: false\n  },\n  label: 'Click here to visit the Luigi homepage',\n},\n...\n</code></pre>\n</div>\n<p>This is an example of what a node with a category including an id, label and icon looks like:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">{\n  category: {id: 'anyId', label: 'Links', icon: 'myIcon', collapsible: true },\n  externalLink: {\n    url: 'http://www.luigi-project.io',\n    sameWindow: false\n  },\n  label: 'Click here to visit the Luigi homepage',\n},\n...\n</code></pre>\n</div>\n<p>To define all subsequent nodes, use the category label:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">{\n  category: 'anyId',\n  externalLink: {\n    url: 'http://www.luigi-project.io',\n    sameWindow: false\n  },\n  label: 'Click here to visit the Luigi homepage',\n},\n...\n</code></pre>\n</div>\n</section></section></section></section>"}},{"name":"navigation-parameters-reference.md","shortName":"navigation-parameters-reference","contents":{"data":{},"messages":[],"history":[],"cwd":"/Users/I529989/Documents/SAP/32-luigi/website/docs","value":"<section class=\"h0Wrapper headingWrapper\">\n<section class=\"h1Wrapper headingWrapper\"><h1 id=\"navigation-parameters-reference\">Navigation parameters reference</h1><!-- add-attribute:class:success -->\n<blockquote class=\"success\">\n  <p><strong>TIP:</strong> To see the navigation parameters in use, see the <a href=\"/docs/navigation-configuration-example\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">navigation configuration example</a> or configure a test application in the <a href=\"https://fiddle.luigi-project.io\" rel=\"external\" target=\"_blank\">Luigi Fiddle</a>.</p>\n</blockquote>\n<p>Use the parameters and functions in this reference to configure your Luigi navigation structure.</p>\n<ul>\n  <li><a href=\"/docs/navigation-parameters-reference#routing-parameters\" onclick=\"navigateInternal(event, this)\">Routing parameters</a></li>\n  <li><a href=\"/docs/navigation-parameters-reference#navigation-parameters\" onclick=\"navigateInternal(event, this)\">Navigation parameters</a></li>\n  <li><a href=\"/docs/navigation-parameters-reference#node-parameters\" onclick=\"navigateInternal(event, this)\">Node parameters</a></li>\n  <li><a href=\"/docs/navigation-parameters-reference#profile\" onclick=\"navigateInternal(event, this)\">Profile</a></li>\n  <li><a href=\"/docs/navigation-parameters-reference#context-switcher\" onclick=\"navigateInternal(event, this)\">Context switcher</a></li>\n  <li><a href=\"/docs/navigation-parameters-reference#product-switcher\" onclick=\"navigateInternal(event, this)\">Product switcher</a></li>\n  <li><a href=\"/docs/navigation-parameters-reference#app-switcher\" onclick=\"navigateInternal(event, this)\">App switcher</a></li>\n  <li><a href=\"/docs/navigation-parameters-reference#global-search\" onclick=\"navigateInternal(event, this)\">Global search</a></li>\n</ul>\n<section class=\"h2Wrapper headingWrapper\"><h2 id=\"routing-parameters\">Routing parameters</h2>\n<p>You can configure the way Luigi tackles routing in your application in the <code>routing:</code> section of the configuration file. For example, you can choose the routing strategy to apply in your application as either hash or path location routing.</p>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"disablebrowserhistory\">disableBrowserHistory</h3>\n<ul>\n  <li><strong>type</strong> boolean</li>\n  <li><strong>description</strong>: defines either if browser history is enabled or not.</li>\n  <li><strong>default</strong>: <code>false</code></li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"modalpathparam\">modalPathParam</h3>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: sets the parameter name when using the <code>LuigiClient.linkManager().openAsModal()</code> function, which provides a simple way to bookmark a modal view URL. It is appended as query param to the base URL. An example would be <code>example.com/your/path?modal=/another/path</code>. This setting requires <a href=\"/docs/navigation-parameters-reference#showmodalpathinurl\" onclick=\"navigateInternal(event, this)\"><code>routing.showModalPathInUrl</code></a> to be set to <code>true</code> to be effective.</li>\n  <li><strong>default</strong>: the default parameter name is <code>modal</code>, but you may also define a custom one.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"nodeparamprefix\">nodeParamPrefix</h3>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: sets the prefix character when using the <code>LuigiClient.linkManager().withParam()</code> function, which provides a simple way to attach query parameters to a view URL for activities such as sorting and filtering. Only this prefix can pass query parameters to micro frontends. A different prefix has to be used to pass parameters to the Luigi app itself to avoid potential conflicts between the two.</li>\n  <li><strong>default</strong>: the default prefix character is <code>~</code>, but you may also define a custom one.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"pagenotfoundhandler\">pageNotFoundHandler</h3>\n<ul>\n  <li><strong>type</strong>: any</li>\n  <li><strong>description</strong>: defines custom behavior when a <code>404</code> error occurs. Luigi handles it by default. Leave its body empty if you have an external <code>404</code> handling. You can return an Object with <strong>redirectTo</strong> and <strong>keepURL</strong> as parameters. You can use the <strong>redirectTo</strong> parameter if you want Luigi to redirect to a specific navigation path after execution. Setting the <strong>keepURL</strong> parameter to <code>true</code> will keep the erroneous URL onto the browser's address bar.</li>\n  <li><strong>attributes</strong>:\n    <ul>\n      <li><strong>wrongPath</strong> (string): the path that the user tried navigating to.</li>\n      <li><strong>wasAnyPathFitted</strong> (bool): it is true if Luigi managed to fit a valid path which means <strong>wrongPath</strong> was only partially wrong. Otherwise it is false.</li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"preservequeryparams\">preserveQueryParams</h3>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: defines if query parameters are persisted in the URL after path changes.</li>\n  <li><strong>default</strong>: the default is <code>false</code>, which means query parameters are not persisted in the URL after navigation request.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"replaceintentroute\">replaceIntentRoute</h3>\n<ul>\n  <li><strong>type</strong> boolean</li>\n  <li><strong>description</strong>: defines if intent navigation route resolves to actual path automatically or not.</li>\n  <li><strong>default</strong>: <code>false</code></li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"showmodalpathinurl\">showModalPathInUrl</h3>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: defines if modal paths are persisted in the URL to make them bookmarkable. The query param which is used as persistence can be configured with <a href=\"/docs/navigation-parameters-reference#modalpathparam\" onclick=\"navigateInternal(event, this)\"><code>routing.modalPathParam</code></a> setting.</li>\n  <li><strong>default</strong>: the default is <code>false</code>, which means no modal paths are shown in the URL.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"skiproutingforurlpatterns\">skipRoutingForUrlPatterns</h3>\n<ul>\n  <li><strong>type</strong>: RegExp[]</li>\n  <li><strong>description</strong>: defines regex patterns the router will skip when listening for path changes. This parameter is used for excluding <strong>redirect_uri</strong> parameters.</li>\n  <li><strong>default</strong>: the default patterns are <code>[/access_token=/, '/id_token=/]</code>.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"usehashrouting\">useHashRouting</h3>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: defines either hash-based (<code>example.com/#/yourpath</code>) or path-based (<code>example.com/yourpath</code>) routing.</li>\n  <li><strong>default</strong>: the default is <code>false</code>, which means path routing is used.</li>\n</ul>\n</section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"navigation-parameters\">Navigation parameters</h2>\n<p>The navigation parameters allow you to configure <strong>global</strong> navigation settings directly under the <code>navigation:</code> section in the configuration file.</p>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"addnavhrefs\">addNavHrefs</h3>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: if set to <code>true</code>, proper href attributes are added to all navigation links. It is set to <code>false</code> by default.</li>\n  <li><strong>since</strong>: v0.7.4</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"defaultscategory\">defaults.category</h3>\n<ul>\n  <li><strong>type</strong>: object</li>\n  <li><strong>description</strong>: defines a default <code>title</code> for all expand and collapse buttons on categories. It is possible to override the default to define a title on an individual <a href=\"/docs/navigation-parameters-reference#category\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">category</a> by itself.</li>\n  <li><strong>attributes</strong>:\n    <ul>\n      <li><strong>titleExpandButton</strong> adds the HTML <code>title</code> attribute with the defined value to the expand button.</li>\n      <li><strong>titleCollapseButton</strong> adds the HTML <code>title</code> attribute with the defined value to the collapse button.</li>\n    </ul>\n  </li>\n  <li><strong>since</strong>: 1.26.0</li>\n  <li><strong>example</strong>:</li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">config.navigation.defaults = {\n    category: {\n         titleExpandButton: 'Expand category',\n         titleCollapseButton: 'Collapse category',\n    }\n}\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"defaultsisolateview\">defaults.isolateView</h3>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: renders all views in new frames. This setting overrides the same-domain frame reuse.</li>\n  <li><strong>default</strong>: the parameter <strong>defaults.isolateView</strong> is <code>false</code> by default, and you can overwrite it using the <strong>isolateView</strong> value on a single node level.</li>\n  <li><strong>example</strong>:</li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">config.navigation.defaults = {\n  isolateView: true\n}\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"defaultspageerrorhandler\">defaults.pageErrorHandler</h3><!-- add-attribute:class:warning -->\n<blockquote class=\"warning\">\n  <p><strong>NOTE</strong>: The <strong>pageErrorHandler</strong> only works if the <a href=\"/docs/navigation-parameters-reference#loadingindicatorenabled\" onclick=\"navigateInternal(event, this)\">loading indicator</a> is not disabled.</p>\n</blockquote>\n<ul>\n  <li><strong>type</strong>: object</li>\n  <li><strong>description</strong>: gives you the possibility to handle a situation in which Luigi Client doesn't respond. By default, it will redirect to the home page if nothing else is specified. <strong>timeout</strong> is required.</li>\n  <li><strong>default</strong>: the parameter <strong>defaults.pageErrorHandler</strong> is not specified by default, and you can overwrite it using the <strong>pageErrorHandler</strong> value on a single node level.</li>\n  <li><strong>attributes</strong>:\n    <ul>\n      <li><strong>timeout</strong> amount of time in milliseconds after which redirection will take effect.</li>\n      <li><strong>viewUrl</strong> specifies the location to redirect to on the micro frontend level (the main URL is not changed).</li>\n      <li><strong>redirectPath</strong> specifies the location to redirect to on the Luigi level (the main URL is changed).</li>\n      <li><strong>errorFn</strong> used to handle different scenarios other than redirection.</li>\n    </ul>\n  </li>\n  <li><strong>since</strong>: v1.0.1</li>\n  <li><strong>example</strong>:</li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">config.navigation.defaults = {\n    pageErrorHandler: {\n         timeout: 500,\n         viewUrl: '/some/view/url',\n         redirectPath: '/projects/pr2',\n         errorFn: ()=> {}\n    }\n}\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"defaultssidenavaccordionmode\">defaults.sideNavAccordionMode</h3>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: overrides the default behaviour of categories whether multiple categories can be collapsed. When set to <code>true</code>, only one category is collapsed. The navigation is similar to an accordion; when the user clicks another category the previously collapsed category is closed and the new one is opened.</li>\n  <li><strong>default</strong>: <code>false</code></li>\n  <li><strong>example</strong>:</li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">config.navigation.defaults = {\n  sideNavAccordionMode: true\n}\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"defaultstooltiptext\">defaults.tooltipText</h3>\n<ul>\n  <li><strong>type</strong>: boolean | string</li>\n  <li><strong>description</strong>: applies the <a href=\"/docs/navigation-parameters-reference#tooltiptext\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">tooltipText</a> property to all navigation nodes where it is not set explicitly. If it is <code>false</code>, all tooltips will be hidden. If it is <code>Some string text</code>, all tooltips will have the value <code>Some string text</code>.</li>\n  <li><strong>default</strong>: the parameter <strong>defaults.tooltipText</strong> is <code>undefined</code> by default.</li>\n  <li><strong>example</strong>:</li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\"> config.navigation.defaults = {\n  tooltipText: 'Default tooltip text'\n}\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"intentmapping\">intentMapping</h3>\n<ul>\n  <li><strong>type</strong>: array</li>\n  <li>\n    <strong>description</strong>: contains an array of abstract intent objects that can be used to navigate through micro frontends through the <a href=\"/docs/luigi-client-api#navigate\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">LuigiClient linkManager.navigate()</a> method. The attributes contained in each intent object of the array are abstract notations which can be used to define the target mapping of your desired intent navigation in a semantic way.\n    Check our <a href=\"/docs/advanced-scenarios\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Advanced Scenarios</a> page for an example.\n  </li>\n  <li><strong>attributes</strong>:\n    <ul>\n      <li><strong>semanticObject</strong>(string): may represent a business entity such as a sales order or a product. It enables navigating to such entities in an abstract implementation-independent way. It can only only contain alphanumerical characters.</li>\n      <li><strong>action</strong>(string): defines an operation, i.e.: <code>display</code>, <code>approve</code> or <code>edit</code>. The operation is intended to be performed on a <strong>semanticObject</strong> such as a sales order or a certain product. It can only contain alphanumerical characters but also the underscore character.</li>\n      <li><strong>pathSegment</strong>(string): represents the target of the navigation. In order to use it as a target link, it has to be defined under navigation nodes in the Luigi configuration.</li>\n      <li><strong>externalLink</strong>(object): used to resolve the intent to an external link. This parameter is optional. When used, the <strong>pathSegment</strong> parameter is ignored.\n        <ul>\n          <li><strong>attributes</strong>:\n            <ul>\n              <li><strong>url</strong>(string): URL the intent gets resolved to.</li>\n              <li><strong>openInNewTab</strong>(boolean): if set to <code>true</code>, opens the specified URL in a new tab. Otherwise, it opens it in the current tab.</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"nodeaccessibilityresolver\">nodeAccessibilityResolver</h3>\n<ul>\n  <li><strong>type</strong>: any</li>\n  <li><strong>description</strong>: receives all values defined in the node configuration. It allows you to define a permission checker function that gets executed on every node. If it returns <code>false</code>, Luigi removes the node and its children from the navigation structure. See <a href=\"https://github.com/SAP/luigi/blob/main/test/e2e-test-application/src/luigi-config/extended/navigation.js\" rel=\"external\" target=\"_blank\">angular navigation.js</a> for an example.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"nodechangehook\">nodeChangeHook</h3>\n<ul>\n  <li><strong>type</strong>: function</li>\n  <li><strong>description</strong>: allows you to invoke and execute a specific function on the global level when a request to navigate to the node occurs. The function receives two node objects as input parameters: the previous node and current node, as described in the configuration.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"preloadviewgroups\">preloadViewGroups</h3>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: allows deactivating the default preloading of <a href=\"/docs/navigation-advanced#view-groups\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">view groups</a> iframes.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"validwebcomponenturls\">validWebcomponentUrls</h3>\n<ul>\n  <li><strong>type</strong>: array</li>\n  <li><strong>description</strong>: a list of allowed web component URLs. They must be added as regular expressions to the array.</li>\n  <li><strong>example</strong>:</li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">settings: {\n  navigation: {\n    validWebcomponentUrls:[\n      'https\\:\\/\\/YOURPROJECT\\.gitlab\\.io\\/.?'\n    ]\n  }\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"viewgroupsettings\">viewGroupSettings</h3>\n<ul>\n  <li><strong>type</strong>: object</li>\n  <li><strong>description</strong>: contains key-object pairs, where the key is the view group name as specified in the node parameters, and the object contains key-value pairs. In each key-value pair, the key is the feature name and the value is the actual setting. The following options are supported:</li>\n  <li><strong>attributes</strong>:\n    <ul>\n      <li>\n        <strong>preloadUrl</strong>(string): needs to be an absolute URL of a micro frontend belonging to a view group. It cannot be an URL of a node. It is recommended that you use a dedicated small, visually empty view, which imports Luigi Client and is fine with getting an empty context, for example, without an access token. The <strong>preloadUrl</strong> parameter\n        is also required for view group caching in case you need a view group iframe to refresh whenever you navigate back to it.\n      </li>\n      <li><strong>loadOnStartup</strong>(boolean): when set to <code>true</code>, it loads the respective view group with the respective <strong>preloadUrl</strong> in the background as soon as the app first starts.</li>\n    </ul>\n  </li>\n</ul>\n</section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"node-parameters\">Node parameters</h2>\n<p>Node parameters are all the parameters that can be added to an individual navigation node in the <code>nodes:</code> section of the Luigi configuration file.</p>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"alttext\">altText</h3>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: adds the HTML <code>alt</code> attribute to an icon. Note that this property only applies to icons with a defined absolute or relative path.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"anonymousaccess\">anonymousAccess</h3>\n<ul>\n  <li><strong>type</strong>: boolean or \"exclusive\"</li>\n  <li><strong>description</strong>: when set to <code>true</code>, the node is always accessible. When set to <code>exclusive</code>, the node is only visible in logged-out state. Requires <strong>auth.disableAutoLogin</strong> to be set to <code>true</code>. <strong>anonymousAccess</strong> needs to be defined both on parent and child nodes.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"badgecounter\">badgeCounter</h3>\n<ul>\n  <li><strong>type</strong>: object</li>\n  <li><strong>description</strong>: adds a badge with a number and a label to a node. Nodes that are part of a category show a cumulated number of all badges in this category.</li>\n  <li><strong>attributes</strong>:\n    <ul>\n      <li><strong>label</strong> is the label of the badge.</li>\n      <li>\n        <strong>count</strong> is a function or asynchronous function that returns a number.\n        Gets updated when you click the navigation. Use <code>Luigi.navigation().updateTopNavigation()</code> in Luigi Core or trigger it in Luigi Client by using the custom message feature.\n      </li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"category\">category</h3>\n<ul>\n  <li><strong>type</strong>: string or object</li>\n  <li><strong>description</strong>: defines a group of views separated with a headline and an icon. You should define at least one node in a group as an Object with <strong>label</strong> and <strong>icon</strong> attributes. For all other nodes, you can set <strong>category</strong> as a string with the <code>label</code> value.</li>\n  <li><strong>attributes</strong>:\n    <ul>\n      <li><strong>label</strong> is a string that represents the title of the category.</li>\n      <li><strong>icon</strong> is the name of an icon, without the <code>sap-icon--</code> prefix. Its source may be <a href=\"https://openui5.hana.ondemand.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html\" rel=\"external\" target=\"_blank\">OpenUI5</a> or a custom link (relative or absolute) to an image. It is recommended to use a square image. The icon is displayed next to the node label in the side navigation or instead of the label in the top navigation. In case you accidentally define different icons in a category group, only the first one is used.</li>\n      <li><strong>altText</strong> adds the HTML <code>alt</code> attribute to an icon. Note that this property only applies to icons with a defined absolute or relative path.</li>\n      <li><strong>collapsible</strong> if set to <code>true</code>, category items are hidden at first. To expand them, click the main category node.</li>\n      <li><strong>testId</strong> is a string where you can define your own custom <code>testId</code> for E2E tests. If nothing is specified, it is the node's label written as one word in lower case, for example<code>label</code>.</li>\n      <li><strong>id</strong> if this property is defined all nodes with the same category <code>id</code> will be grouped.</li>\n      <li><strong>titleExpandButton</strong> adds the HTML <code>title</code> attribute with the defined value to the expand button.</li>\n      <li><strong>titleCollapseButton</strong> adds the HTML <code>title</code> attribute with the defined value to the collapse button.</li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"children\">children</h3>\n<ul>\n  <li><strong>type</strong>: array | function</li>\n  <li>\n    <strong>description</strong>: in this element, you can specify children nodes. All children nodes will have the same parent prefix URL.\n    For example, if you look at our <a href=\"https://fiddle.luigi-project.io/\" rel=\"external\" target=\"_blank\">Fiddle showcase</a>, you will see that home node has different children: this hierarchy will be reflected in children URLs.\n  </li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">navigation: {\n    nodes: [{\n        pathSegment: 'home',\n        label: 'h',\n        hideFromNav: true,\n        children: [{\n            pathSegment: 'overview',\n            label: 'Overview',\n            icon: 'home',\n            viewUrl: '/examples/microfrontends/multipurpose.html',\n            context: {\n                title: 'Welcome to Luigi Fiddle!',\n                content: 'Click on \"Modify Config\" at the bottom right and play around with your Luigi configuration'\n            }\n        },\n        ...\n        {\n            pathSegment: 'ui5sc',\n            label: 'Shopping Cart',\n            category:  'UI5 Demo Pages',\n            hideSideNav: true,\n            loadingIndicator: {\n                enabled: false\n            },\n            viewUrl: 'https://sapui5.netweaver.ondemand.com/test-resources/sap/m/demokit/cart/webapp/index.html'\n        }]\n    ...\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"clientpermissionschangecurrentlocale\">clientPermissions.changeCurrentLocale</h3>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: current locale can be changed from client using the corresponding API if this is set to <code>true</code></li>\n  <li><strong>example</strong>:\n    <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n          <img src=\"/images/copy-clipboard-default.svg\">\n          <div class=\"popoverCopy\">Click to copy</div>\n        </div></a>\n      <pre class=\"canCopyCode\"><code class=\"language-javascript\">clientPermissions: {\n  changeCurrentLocale: true\n}\n</code></pre>\n    </div>\n  </li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"clientpermissionsurlparameters\">clientPermissions.urlParameters</h3>\n<ul>\n  <li><strong>type</strong>: object</li>\n  <li><strong>description</strong> Specify if the micro frontend behind this node can read and write the Luigi Core search query parameter. See also <a href=\"/docs/luigi-core-api#routing\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Routing API</a></li>\n  <li><strong>example</strong>:</li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">clientPermissions:{\n  urlParameters:{\n    q:{\n      write: true,\n      read: true\n    }\n  }\n}\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"compound\">compound</h3>\n<ul>\n  <li><strong>type</strong>: object</li>\n  <li>\n    <strong>description</strong>: It is possible to compound web components in one micro frontend. Within this object, the layout of the web components can be defined. In addition, you can configure nested web components. In that case the parent web component has to be defined by a slot with a name to plug in the child web component. For example <code>&#x3C;header>&#x3C;slot name=\"header\">header&#x3C;/slot>&#x3C;/header></code>.\n    Web components can communicate over an event bus.\n  </li>\n  <li><strong>attributes</strong>:\n    <ul>\n      <li><strong>renderer</strong>:\n        <ul>\n          <li><strong>type</strong>: object</li>\n          <li><strong>description</strong>: meta information about the layout of the compound web components</li>\n          <li><strong>attributes</strong>:\n            <ul>\n              <li><strong>use</strong>:\n                <ul>\n                  <li><strong>type</strong>: string OR object</li>\n                  <li><strong>description</strong>: You can define a CSS layout, like the CSS <code>grid</code>, or implement an extended layout by defining an object using the <code>extends</code> property. In that case you have the possibility to implement the following functions to manipulate the standard renderer.</li>\n                  <li><strong>attributes</strong>:\n                    <ul>\n                      <li><strong>extends</strong>\n                        <ul>\n                          <li><strong>type</strong>: string, e.g. <code>grid</code></li>\n                          <li><strong>description</strong>:</li>\n                        </ul>\n                      </li>\n                      <li><strong>createCompoundContainer</strong>\n                        <ul>\n                          <li><strong>type</strong>: function</li>\n                          <li><strong>description</strong>: This function gets the grid layout <code>config</code> object as parameter.</li>\n                        </ul>\n                      </li>\n                      <li><strong>createCompoundItemContainer</strong>\n                        <ul>\n                          <li><strong>type</strong>: function</li>\n                          <li><strong>description</strong> This function gets a the grid layout <code>config</code> object and the layout config object for the item.</li>\n                        </ul>\n                      </li>\n                      <li><strong>attachCompoundItem</strong>\n                        <ul>\n                          <li><strong>type</strong>: function</li>\n                          <li><strong>description</strong> This function allows you to attach custom HTML to the item. This function gets the whole HTML container of the compound items and the item container as parameter.</li>\n                        </ul>\n                      </li>\n                    </ul>\n                  </li>\n                </ul>\n              </li>\n              <li><strong>config</strong>:\n                <ul>\n                  <li><strong>type</strong>: object</li>\n                  <li><strong>description</strong>: defines the configuration object of the grid layout</li>\n                  <li><strong>attributes</strong>:\n                    <ul>\n                      <li><strong>columns</strong>: represents the css <code>grid-template-columns</code>, e.g <code>1fr 2fr</code> .</li>\n                      <li><strong>rows</strong>: represents the css <code>grid-template-rows</code>, e.g. <code>150px 150px</code>.</li>\n                      <li><strong>gap</strong>: represents the css <code>grid-gap</code>, e.g. <code>auto</code>.</li>\n                      <li><strong>min-height</strong> min height</li>\n                      <li><strong>layouts</strong>\n                        <ul>\n                          <li><strong>type</strong>: array</li>\n                          <li><strong>description</strong>: defines the configuration objects of the grid layout for media queries.</li>\n                          <li><strong>attributes</strong>:\n                            <ul>\n                              <li><strong>columns</strong>: represents the css <code>grid-template-columns</code>, e.g <code>1fr 2fr</code> .</li>\n                              <li><strong>rows</strong>: represents the css <code>grid-template-rows</code>, e.g. <code>150px 150px</code>.</li>\n                              <li><strong>gap</strong>: represents the css <code>grid-gap</code>, e.g. <code>auto</code>.</li>\n                              <li><strong>min-width</strong> min width</li>\n                              <li><strong>max-width</strong> max width</li>\n                            </ul>\n                          </li>\n                        </ul>\n                      </li>\n                    </ul>\n                  </li>\n                </ul>\n              </li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li><strong>children</strong>\n        <ul>\n          <li><strong>type</strong>: array</li>\n          <li><strong>description</strong>: Array of web component nodes.</li>\n          <li><strong>attributes</strong>:\n            <ul>\n              <li><strong>id</strong>: unique <code>id</code> of the web component.</li>\n              <li><strong>viewUrl</strong>: URL which points to the web component <code>.js</code> file. If you are using <a href=\"https://docs.luigi-project.io/docs/i18n\" rel=\"external\" target=\"_blank\">localization</a> and translating your page into different languages, you can also add a <strong>{i18n.currentLocale}</strong> parameter to the viewUrl part of your configuration.</li>\n              <li><strong>context</strong>: object, which you can pass to the web component.</li>\n              <li><strong>layoutConfig</strong>: config object to define the position of an item in a grid. The properties are <code>row</code> and <code>column</code> and get the same values as in the CSS grid standard. If you want to use the mechanism of nested web components, you can define a <code>slot</code> property with the slot name instead of the config object. In that case this web component node will be plugged in the parent web component.</li>\n              <li><strong>eventListeners</strong>\n                <ul>\n                  <li><strong>type</strong>: array</li>\n                  <li><strong>description</strong>: array of events.</li>\n                  <li><strong>attributes</strong>:\n                    <ul>\n                      <li><strong>source</strong>: <code>id</code> of the web component, which you want to listen. Alternatively you can set an asterisk, e.g. <code>*</code></li>\n                      <li><strong>name</strong>: name of the event, which this web component is listening to.</li>\n                      <li><strong>action</strong>: type of the event, such as <code>update</code>.</li>\n                      <li><strong>dataConverter</strong>\n                        <ul>\n                          <li><strong>type</strong> function</li>\n                          <li><strong>description</strong> This function gets the data object as parameter. If the received data are in a different format, you can use this function to convert the data.</li>\n                        </ul>\n                      </li>\n                    </ul>\n                  </li>\n                </ul>\n              </li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n  <li><strong>example</strong>:</li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">{\n    pathSegment: 'webcomponent',\n    label: 'Webcomponent',\n    icon: 'along-stacked-chart',\n    loadingIndicator: {\n      enabled: false\n    },\n    context: {\n      title: 'Hello WebComponent!'\n    },\n    viewUrl: '/helloWorldWC.js',\n    webcomponent: true,\n    openNodeInModal: true\n  },\n</code></pre>\n</div>\n<p>Below is Luigi's web component example configuration which shows 3 web components in a grid layout. It also includes the configuration for the event bus. The <code>input</code> web component sends the typed input. The <code>header</code> web component listens to a <code>sendInput</code> event from a web component with the id <code>input1</code>. Received data will be converted. An <code>update</code> event will be triggered, changing the <code>header</code> web component where an <code>update</code> event listener is registered.</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">{\n        pathSegment: 'wc_grid',\n        label: 'Grid',\n        category: {\n          label: 'Compound',\n          icon: 'attachment-html',\n          collapsible: true\n        },\n        compound: {\n          renderer:\n          {\n            use: 'grid',\n            config: {\n              columns: '1fr 1fr 1fr',\n              /*rows: '150px',*/\n              /*gap: '30px',*/\n              layouts: [{\n                minWidth: 0,\n                maxWidth: 600,\n                columns: '1fr',\n                gap: 0\n              }, {\n                minWidth: 600,\n                maxWidth: 1024,\n                columns: '1fr 1fr',\n                gap: '30px'\n              }]\n            }\n          },\n          children: [{\n            viewUrl: 'URL_TO_HEADER_WEBCOMPONENT/panelHeader.js',\n            context: {\n              title: 'My Awesome Grid',\n              description: 'Really awesome'\n            },\n            layoutConfig: {\n              row: \"1\",\n              column: \"1 / -1\"\n            },\n            eventListeners: [{\n              source: 'input1',\n              name: 'sendInput',\n              action: 'update',\n              dataConverter: (data) => {\n                return 'new text: ' + data;\n              }\n            }]\n          }, {\n            id: 'input1',\n            viewUrl: 'URL_TO_SOME_WEBCOMPONENT/input.js',\n            context: {\n              title: 'Some input test',\n              instant: true\n            }\n          },\n          {\n            viewUrl: 'URL_TO_FOOTER_WEBCOMPONENT/panelFooter.js',\n            context: {\n              footer: 'This is the end of awesomeness'\n            },\n            layoutConfig: {\n              column: \"1 / -1\"\n            }\n          }]\n        }\n      }\n</code></pre>\n</div>\n<ul>\n  <li><strong>since</strong>: 1.7.0</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"context\">context</h3>\n<ul>\n  <li><strong>type</strong>: object</li>\n  <li><strong>description</strong>: sends the specified object as a context to the micro frontend.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"defaultchildnode\">defaultChildNode</h3>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: sets the child node that Luigi activates automatically if the current node has no <strong>viewUrl</strong> defined. Provide <strong>pathSegment</strong> of the child node you want to activate as a string.</li>\n</ul><!-- add-attribute:class:warning -->\n<blockquote class=\"warning\">\n  <p><strong>NOTE:</strong> To define a root-level <strong>defaultChildNode</strong> which is different than the first header navigation node, set an object with <strong>defaultChildNode</strong> and <strong>children</strong> set to <code>navigation.nodes</code> instead of an array of nodes.</p>\n</blockquote>\n<ul>\n  <li><strong>example</strong>:</li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">settings: {\n  navigation: {\n    nodes: {\n      defaultChildNode: 'overview',\n      children: [\n        {\n          pathSegment: 'docs',\n          label: 'Documentation',\n          viewUrl: '...'\n        },\n        {\n          pathSegment: 'overview',\n          label: 'Overview',\n          viewUrl: '...'\n        }\n      ]\n    }\n  }\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"defaultsruntimeerrorhandler\">defaults.runTimeErrorHandler</h3><!-- add-attribute:class:warning -->\n<blockquote class=\"warning\">\n  <p><strong>NOTE</strong>: The <strong>runTimeErrorHandler</strong> only works if the micro frontend uses Luigi Client and <a href=\"/docs/advanced-options-luigi-client#disable-luigi-core-runtime-error-handling\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">disable-luigi-runtime-error-handling</a> is not disabled.</p>\n</blockquote>\n<ul>\n  <li><strong>type</strong>: object</li>\n  <li><strong>description</strong>: allows you to handle errors on the Core level. The error handler receives all unhandled errors from the micro frontends which are using the Luigi Client.</li>\n  <li><strong>default</strong>: the parameter <strong>defaults.runTimeErrorHandler</strong> is not specified by default, and you can overwrite it using the <strong>runTimeErrorHandler</strong> value on a single node level.</li>\n  <li><strong>attributes</strong>:\n    <ul>\n      <li><strong>errorFn</strong>:(function) gets an object <code>error</code> as parameter. The properties of this object are the properties of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent\" rel=\"external\" target=\"_blank\">error event</a>. The inherited properties from <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event\" rel=\"external\" target=\"_blank\">event</a> are not part of the object. Current node is the second parameter.</li>\n    </ul>\n  </li>\n  <li><strong>example</strong></li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">runTimeErrorHandler: {\n   errorFn: (error, currentNode)=>{}\n}\n</code></pre>\n</div>\n<ul>\n  <li><strong>since</strong>: 1.15.0</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"externallink\">externalLink</h3>\n<ul>\n  <li><strong>type</strong>: object</li>\n  <li><strong>description</strong>: indicates that the node links to an external URL. If this parameter is defined, <strong>pathSegment</strong> and <strong>link</strong> parameters are ignored.</li>\n  <li><strong>attributes</strong>:\n    <ul>\n      <li>\n        <strong>sameWindow</strong> defines if the external URL is opened in a new or current tab. The default value for this parameter\n        is <code>false</code>.\n      </li>\n      <li><strong>URL</strong> is the external URL that the node leads to. If you are using <a href=\"https://docs.luigi-project.io/docs/i18n\" rel=\"external\" target=\"_blank\">localization</a> and translating your page into different languages, you can also add a <strong>{i18n.currentLocale}</strong> parameter to the URL part of your configuration.</li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"hidefromnav\">hideFromNav</h3>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: shows or hides a navigation node. You can still navigate to the node but it does not show up in the top or left pane.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"hidesidenav\">hideSideNav</h3>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: if set to <code>true</code>, the left navigation disappears when you click the affected node.</li>\n  <li><strong>default</strong>: <code>false</code></li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"icon\">icon</h3>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: the name of an icon, without the <code>sap-icon--</code> prefix. Its source may be <a href=\"https://openui5.hana.ondemand.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html\" rel=\"external\" target=\"_blank\">OpenUI5</a> or a custom link (relative or absolute) to an image. It is recommended to use a square image. The icon is displayed next to the node label in the side navigation or instead of the label in the top navigation. To show the label next to the icon in the top navigation, add the <code>showLabel</code> attribute.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"intendtohaveemptyviewurl\">intendToHaveEmptyViewUrl</h3>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: when set to <code>true</code>, it forces navigation to the empty <strong>viewUrl</strong> node.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"isolateview\">isolateView</h3>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: renders the view in a new frame when you enter and leave the node. This setting overrides the same-domain frame re-usage.</li>\n  <li><strong>default</strong>: <code>false</code></li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"keepselectedforchildren\">keepSelectedForChildren</h3>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: focuses the navigation on its current hierarchy, omitting the display of children.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"label\">label</h3>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: contains the display name of the navigation node.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"link\">link</h3>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: refers to an absolute path in the navigation structure or a relative path to a grandchild of the current path. If this parameter is defined, <strong>pathSegment</strong> is ignored.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"loadingindicatorenabled\">loadingIndicator.enabled</h3>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: shows a loading indicator when switching between micro frontends. If you have a fast micro frontend, you can disable this feature to prevent flickering of the loading indicator.</li>\n  <li><strong>default</strong>: <code>true</code></li>\n  <li><strong>example</strong>:\n    <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n          <img src=\"/images/copy-clipboard-default.svg\">\n          <div class=\"popoverCopy\">Click to copy</div>\n        </div></a>\n      <pre class=\"canCopyCode\"><code class=\"language-javascript\">loadingIndicator: {\n  enabled: false\n}\n</code></pre>\n    </div>\n  </li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"loadingindicatorhideautomatically\">loadingIndicator.hideAutomatically</h3>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: if set to <code>false</code>, it disables the automatic hiding of the loading indicator once the micro frontend is loaded. It is only considered if the loading indicator is enabled. It does not apply if the loading indicator is activated manually with the <code>LuigiClient.uxManager().showLoadingIndicator()</code> function. If the loading indicator is enabled and automatic hiding is disabled, use <code>LuigiClient.uxManager().hideLoadingIndicator()</code> to hide it manually in your micro frontend during the startup.</li>\n  <li><strong>default</strong>: <code>true</code></li>\n  <li><strong>example</strong>:\n    <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n          <img src=\"/images/copy-clipboard-default.svg\">\n          <div class=\"popoverCopy\">Click to copy</div>\n        </div></a>\n      <pre class=\"canCopyCode\"><code class=\"language-javascript\">loadingIndicator: {\n  hideAutomatically: false\n}\n</code></pre>\n    </div>\n  </li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"navigationcontext\">navigationContext</h3>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: contains a named node that is mainly for use in combination with a dynamic <strong>pathSegment</strong> to start navigation from a dynamic node using <code>LuigiClient.linkManager().fromContext('contextname')</code>.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"onnodeactivation\">onNodeActivation</h3>\n<ul>\n  <li><strong>type</strong>: function</li>\n  <li><strong>description</strong>: executed when a request to navigate to the node occurs. As an input parameter, the function receives the node object as described in the configuration. This function can return results synchronously or asynchronously. If the function returns boolean <code>false</code>, the navigation is not triggered, otherwise, navigation renders as usual.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"opennodeinmodal\">openNodeInModal</h3>\n<ul>\n  <li><strong>type</strong>: boolean or object</li>\n  <li><strong>description</strong>: configures the settings of a view which opens in a modal. You can set the <strong>openNodeInModal</strong> parameter to <code>true</code> to use the default modal title and size, or you can specify them using these attributes:</li>\n  <li><strong>attributes</strong>:\n    <ul>\n      <li><strong>title</strong> is the modal title. By default, it is the node label. If there is no label, it is left empty.</li>\n      <li><strong>size</strong> specifies the size of the modal. The default size is <code>l</code>, which means 80% of the main window size. You can also use <code>m</code> (60%) and <code>s</code> (40%) to set the modal size or</li>\n      <li><strong>width</strong> and <strong>height</strong> can be used to specify the size of the modal more precisely. In that case, the <strong>size</strong> attribute is not needed. Allowed units are <code>%</code>, <code>px</code>, <code>rem</code>, <code>em</code>, <code>vh</code> and <code>vw</code>.</li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"pageerrorhandler\">pageErrorHandler</h3><!-- add-attribute:class:warning -->\n<blockquote class=\"warning\">\n  <p><strong>NOTE</strong>: The <strong>pageErrorHandler</strong> only works if the <a href=\"/docs/navigation-parameters-reference#loadingindicatorenabled\" onclick=\"navigateInternal(event, this)\">loading indicator</a> is not disabled.</p>\n</blockquote>\n<ul>\n  <li><strong>type</strong>: object</li>\n  <li><strong>description</strong>: gives you the possibility to handle a situation in which Luigi Client doesn't respond. By default, it will redirect to the home page if nothing else is specified. <strong>timeout</strong> is required.</li>\n  <li><strong>attributes</strong>:\n    <ul>\n      <li><strong>timeout</strong> amount of time in milliseconds after which redirection will take effect. (For example, <code>timeout: 500</code>).</li>\n      <li><strong>viewUrl</strong> specifies the location to redirect to on the micro frontend level (the main URL is not changed).</li>\n      <li><strong>redirectPath</strong> specifies the location to redirect to on the Luigi level (the main URL is changed).</li>\n      <li><strong>errorFn</strong> used to handle different scenarios other than redirection.</li>\n      <li><strong>since</strong>: v1.0.1</li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"pathsegment\">pathSegment</h3>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: specifies the partial URL of the current segment. <strong>pathSegment</strong> must not contain slashes.</li>\n  <li><strong>examples</strong>:\n    <ul>\n      <li>A static <strong>pathSegment</strong> of value <code>settings</code> results in <code>example.com/settings</code>.</li>\n      <li>A dynamic <strong>pathSegment</strong> is prefixed with a colon and can load any value. Find out more about dynamic paths in Luigi <a href=\"/docs/navigation-advanced#dynamically-changeable-paths\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">here</a>.</li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"showbreadcrumbs\">showBreadcrumbs</h3>\n<ul>\n  <li>\n    <ul>\n      <li><strong>type</strong>: boolean</li>\n    </ul>\n  </li>\n  <li><strong>description</strong>: if a breadcrumbs configuration is set, the breadcrumbs will show for all nodes by default. This property allows you to disable breadcrumbs for any particular node by setting it to <code>false</code> for that node. See the <a href=\"/docs/navigation-advanced#breadcrumbs\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">advanced navigation</a> document for more information.</li>\n  <li>\n    <ul>\n      <li><strong>example</strong>:</li>\n    </ul>\n  </li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">navigation: {\n  nodes: [{\n    pathSegment: 'home',\n    showBreadcrumbs: false, \n...\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"sidenavaccordionmode\">sideNavAccordionMode</h3>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: overrides the default behaviour of categories whether multiple categories can be collapsed. When set to <code>true</code>, only one category is collapsed. The navigation is similar to an accordion; when the user clicks another category the previously collapsed category is closed and the new one is opened. Note that this will be applied to its direct children.</li>\n  <li><strong>default</strong>: <code>false</code></li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"statusbadge\">statusBadge</h3>\n<ul>\n  <li><strong>type</strong>: object</li>\n  <li><strong>description</strong>: Allows you to set a status badge for this node. The status badge is a small label next to the title of the node, based on the Fundamental Styles <a href=\"https://sap.github.io/fundamental-styles/?path=/docs/components-object-status--clickable-object-status\" rel=\"external\" target=\"_blank\">object status</a>.</li>\n  <li><strong>attributes</strong>:\n    <ul>\n      <li><strong>label</strong>: string specifying the text displayed on the status badge.</li>\n      <li><strong>type</strong>: string. Allowed values are <code>negative</code>, <code>positive</code>, <code>critical</code>, <code>informative</code>, or <code>neutral</code>. The default is <code>neutral</code>.</li>\n      <li><strong>align</strong>: string. Defines the alignment of the status badge. Allowed values are <code>right</code> or <code>left</code>. The default is <code>left</code>.</li>\n    </ul>\n  </li>\n  <li><strong>example</strong>:\n    <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n          <img src=\"/images/copy-clipboard-default.svg\">\n          <div class=\"popoverCopy\">Click to copy</div>\n        </div></a>\n      <pre class=\"canCopyCode\"><code class=\"language-javascript\">{\n  pathSegment: 'settings',\n  label: 'Settings',\n  viewUrl: '/sampleapp.html#/settings',\n  statusBadge: {\n    label: 'Settings',\n    type: 'positive'\n  }\n}\n</code></pre>\n    </div>\n  </li>\n  <li><strong>since</strong>: 1.25.0</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"tabnav\">tabNav</h3>\n<ul>\n  <li>\n    <p><strong>type</strong>: boolean or Object</p>\n  </li>\n  <li>\n    <p><strong>description</strong>: renders the children of the node as a horizontal navigation bar. Sub-children are not supported. When you categorize nodes, you will get a drop-down menu in the horizontal navigation. Set to <code>true</code> to show the horizontal navigation, or use the extra attributes for more customization. (<strong>since</strong>: v0.7.0)</p>\n  </li>\n  <li>\n    <p><strong>attributes</strong>:</p>\n    <ul>\n      <li><strong>hideTabNavAutomatically</strong>: boolean. In the case the node has only one child, it's possible to configure whether the horizontal navigation bar will be hidden automatically or not. Set this attribute to <code>true</code> to hide the horizontal navigation bar and <code>false</code> otherwise. ( <strong>since</strong>: v2.0.0 )</li>\n      <li><strong>showAsTabHeader</strong>: boolean. If this attribute is set on the node, it will be considered as a horizontal navigation header micro frontend. The node should be <a href=\"/docs/web-component\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">webcomponent-based</a> and it should have nested children to show on the horizontal navigation bar. (<strong>since</strong>: 2.2.0 )</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>example</strong>:</p>\n  </li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-js\">// Without hiding tab nav automatically \n pathSegment: 'example', \n label: 'Example', \n tabNav: true,\n children: [\n  ...\n                \n// With hiding tab nav automatically if node has only one child               \n  pathSegment: 'example',\n  label: 'Example',\n  tabNav: { hideTabNavAutomatically: true },\n  children: [\n  ...\n\n  // showing horizontal navigation header micro frontend       \n  pathSegment: 'header',\n  label: 'Header Micro frontend',\n  viewUrl: '/tabHeader.js'\n  webcomponent: true,\n  tabNav: { showAsTabHeader : true },\n  children: [\n  ...\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"testid\">testId</h3>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: allows you to define your own custom <strong>testId</strong> to be used in E2E tests. If you do not specify it, it is a combination of the node's <strong>pathSegment</strong> followed by an underscore and the label, written as one word in lower case. If the <strong>pathSegment</strong> does not exist, the <strong>testId</strong> includes the label only. This way, you can have <code>pathsegment_label</code> or <code>label</code>.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"tooltiptext\">tooltipText</h3>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: Allows to set a custom tooltip text for this node or to disable the tooltip by setting the value to <code>false</code>.</li>\n  <li><strong>default</strong>: it is <code>undefined</code> by default, and it can be overwritten by using the <strong>tooltipText</strong> value on a single node level.</li>\n  <li><strong>example</strong>:</li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">tooltipText: 'Useful links'\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"usersettingsgroup\">userSettingsGroup</h3>\n<ul>\n  <li>\n    <ul>\n      <li><strong>type</strong>: string</li>\n    </ul>\n  </li>\n  <li><strong>description</strong>: sets the user settings group for this navigation node. It is the title of a predefined user settings group belonging to a <code>userSettingGroups</code> object. For more information, read the section on <a href=\"/docs/user-settings\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">user settings</a>.</li>\n  <li><strong>example</strong>:</li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">{\n    category: { label: 'Settings', icon: 'action-settings' },\n    pathSegment: 'user_settings',\n    label: 'User Settings',\n    viewUrl: '/sampleapp.html#/projects/' + projectId + '/settings',\n    icon: 'settings',\n    userSettingsGroup: 'userAccount',\n    testId: 'myTestId',\n  }\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"viewgroup\">viewGroup</h3>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li>\n    <strong>description</strong>: allows you to associate nodes to be rendered in the same iframe, as long as they belong to the same origin.\n    The value of this parameter is considered as the view group ID. If you want to use this feature, you must set <a href=\"/docs/navigation-advanced#preloadViewGroups\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">preloadViewGroups</a> to <code>true</code> and provide a preload URL for your view group ID in <a href=\"/docs/navigation-advanced##viewGroupsSettings\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">viewGroupsSettings</a>.\n    For further explanations, see <a href=\"/docs/navigation-configuration#view-groups\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">this section</a>.\n  </li>\n  <li><strong>example:</strong></li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">settings: {\n  navigation: {\n    preloadViewGroups: true,\n    viewGroupSettings:{\n       view_group_components: {\n          preloadUrl: '.....'\n       }\n    },\n    nodes: {\n      defaultChildNode: 'overview',\n      children: [\n        {\n          pathSegment: 'docs',\n          label: 'Documentation',\n          viewGroup: 'view_group_components',\n          viewUrl: '...'\n        },\n        {\n          pathSegment: 'overview',\n          label: 'Overview',\n          viewGroup: 'view_group_components',\n          viewUrl: '...'\n        }\n      ]\n    }\n  }\n</code></pre>\n</div>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"viewurl\">viewUrl</h3>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: contains the URL or path to a view which renders when you click the navigation node. Use either a full URL or a relative path. If <strong>viewUrl</strong> is undefined, Luigi activates the child node specified in <strong>defaultChildNode</strong>. When both <strong>viewUrl</strong> and <strong>defaultChildNode</strong> are undefined, Luigi opens the first child of the current node. <strong>viewUrl</strong> can contain variables from:\n    <ul>\n      <li>dynamic path segments</li>\n      <li>node parameters</li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"virtualtree\">virtualTree</h3>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: marks the node as the beginning of a virtual tree. Allows navigation to any of its children's paths without the need of specifying nested children. The path that comes after the node marked as <strong>virtualTree</strong> is appended to its <strong>viewUrl</strong>. <a href=\"/docs/navigation-parameters-reference#keepselectedforchildren\" onclick=\"navigateInternal(event, this)\"><strong>keepSelectedForChildren</strong></a> is automatically applied. This feature is often used in combination with <a href=\"/docs/luigi-client-api#withoutsync\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">LinkManager().withoutSync().navigate</a> to be able to keep a micro frontend's existing router links.</li>\n  <li>\n    <strong>example</strong>:\n    In this example, navigating to <code>core.tld/settings/some/nested/view</code> will result in opening <code>/sampleapp.html#/settings/some/nested/view</code>.\n    <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n          <img src=\"/images/copy-clipboard-default.svg\">\n          <div class=\"popoverCopy\">Click to copy</div>\n        </div></a>\n      <pre class=\"canCopyCode\"><code class=\"language-javascript\">{\n  pathSegment: 'settings',\n  label: 'Settings',\n  viewUrl: '/sampleapp.html#/settings',\n  navigationContext: 'settings',\n  virtualTree: true\n}\n</code></pre>\n    </div>\n  </li>\n  <li><strong>since</strong>: v0.7.6</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"visibleforfeaturetoggles\">visibleForFeatureToggles</h3>\n<ul>\n  <li><strong>type</strong>: array</li>\n  <li><strong>description</strong>: defines a list of feature toggles this node is restricted to. If all feature toggles in this list are active, the node will be visible in the top or left navigation. It is also possible to negate the feature toggle by adding a <code>!</code> in front of the toggle name. Then, the node is always visible except for the feature toggle defined with an exclamation mark.</li>\n  <li><strong>example</strong>:\n    <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n          <img src=\"/images/copy-clipboard-default.svg\">\n          <div class=\"popoverCopy\">Click to copy</div>\n        </div></a>\n      <pre class=\"canCopyCode\"><code class=\"language-javascript\">{\n  pathSegment: 'settings',\n  label: 'Settings',\n  viewUrl: '/sampleapp.html#/settings',\n  navigationContext: 'settings',\n  visibleForFeatureToggles:['ft1', '!ft2']\n}\n</code></pre>\n    </div>\n  </li>\n  <li><strong>since</strong>: 1.4.0</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"webcomponent\">webcomponent</h3>\n<ul>\n  <li><strong>type</strong>: boolean OR object</li>\n  <li><strong>description</strong>: mark a node as web component either by setting this attribute to <code>true</code> or defining an object with the attributes described below. In the latter case, the <code>viewUrl</code> attribute of the node must point to the web component <code>.js</code> file.</li>\n  <li><strong>attributes</strong>:\n    <ul>\n      <li><strong>id</strong>: unique id of the web component</li>\n      <li><strong>type</strong>: string, like <code>module</code>.</li>\n      <li><strong>selfRegistered</strong>: if it is <code>true</code>, the web component bundle will be added via script tag.</li>\n      <li><strong>tagName</strong>: tag name where web component is added to DOM.</li>\n    </ul>\n  </li>\n  <li><strong>since</strong>: 1.7.0</li>\n</ul>\n</section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"context-switcher\">Context switcher</h2>\n<p>The context switcher is a drop-down list available in the top navigation bar. It allows you to switch between a curated list of navigation elements such as Environments. To do so, add the <strong>contextSwitcher</strong> parameter to the <strong>navigation</strong> object using the following optional parameters:</p>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"actions\">actions</h3>\n<ul>\n  <li><strong>type</strong>: array</li>\n  <li><strong>description</strong>: defines a list of additional elements that are shown on above or below the context switcher <strong>options</strong>.</li>\n  <li><strong>attributes</strong>:\n    <ul>\n      <li><strong>label</strong> defines the action element label.</li>\n      <li><strong>testId</strong> is a string where you can define your own custom <code>testId</code> for E2E tests. If nothing is specified, it is the node's label written as one word and lower case (e.g. <code>label</code>).</li>\n      <li>\n        <strong>position</strong> defines the action element position. Can be <code>top</code> or <code>bottom</code>. The default value is <code>top</code>. This parameter\n        is optional.\n      </li>\n      <li>\n        <strong>link</strong> defines an absolute Link to a <strong>node</strong>. This parameter\n        is optional.\n      </li>\n      <li><strong>clickHandler</strong> specifies a function and is executed on click and should return a boolean. If it returns <code>true</code>, <strong>link</strong> is opened afterwards.</li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"alwaysshowdropdown\">alwaysShowDropdown</h3>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: if set to <code>false</code>, the drop-down is not shown on click if there is only one option and no actions.</li>\n  <li><strong>default</strong>: <code>true</code></li>\n  <li><strong>since</strong>: v0.7.3</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"customselectedoptionrenderer\">customSelectedOptionRenderer</h3>\n<ul>\n  <li><strong>type</strong>: function</li>\n  <li><strong>parameters</strong>: <a href=\"/docs/navigation-parameters-reference#options\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">option</a></li>\n  <li><strong>description</strong>: enables you to customize the selected option of the dropdown button of the context switcher by rendering HTML code inside a <code>&#x3C;button></code>. The function takes an <strong>option</strong> object as a parameter. It is recommended to use this function carefully because it is possible to inject JavaScript code.</li>\n  <li><strong>since</strong>: v1.0.0</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"customoptionsrenderer\">customOptionsRenderer</h3>\n<ul>\n  <li><strong>type</strong>: function</li>\n  <li><strong>parameters</strong>: <a href=\"/docs/navigation-parameters-reference#options\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">option</a>, isSelected</li>\n  <li><strong>description</strong>: enables you to add custom items to the context switcher by rendering code inside a <code>&#x3C;li></code> element. The function takes an <strong>option</strong> object and a boolean <strong>isSelected</strong> as a parameter. It is recommended to use this function carefully because it is possible to inject JavaScript code.</li>\n  <li><strong>since</strong>: v0.7.3</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"defaultlabel\">defaultLabel</h3>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: specifies the default label that is shown if no context is selected.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"fallbacklabelresolver\">fallbackLabelResolver</h3>\n<ul>\n  <li><strong>type</strong>: any</li>\n  <li><strong>description</strong>: specifies a function used to fetch the <strong>label</strong> for <strong>options</strong> with no <strong>label</strong> defined. Additionally, it fetches the drop-down label for non-existing <strong>options</strong>.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"icon-1\">icon</h3>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: is the name of an icon from <a href=\"https://openui5.hana.ondemand.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html\" rel=\"external\" target=\"_blank\">OpenUI5</a>. It's displayed on smaller screens next to the default label or the selected context in a dropdown for the top navigation nodes. There is a default icon if nothing is set.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"lazyloadoptions\">lazyloadOptions</h3>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: defines when to fetch <strong>options</strong>. When set to <code>true</code>, loads <strong>options</strong> when you click the context switcher. It doesn't involve any caching. When set to <code>false</code>, loads <strong>options</strong> once the page loads.</li>\n  <li><strong>default</strong>: <code>true</code></li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"options\">options</h3>\n<ul>\n  <li><strong>type</strong>: array</li>\n  <li><strong>description</strong>: defines the list of context element.</li>\n  <li><strong>attributes</strong>:\n    <ul>\n      <li><strong>label</strong> defines the context element label. If not defined, the <strong>pathValue</strong> is passed to <strong>fallbackLabelResolver</strong> to set its value. The default value is <strong>pathValue</strong>, if <strong>fallbackLabelResolver</strong> is not defined.</li>\n      <li><strong>pathValue</strong> defines the context element path that is appended to <strong>parentNodePath</strong> and reflects a <strong>pathSegment</strong>.</li>\n      <li><strong>customRendererCategory</strong> defines a custom category for the option, which can be used by <strong>customSelectedOptionRenderer</strong> function to customize the rendering of the option when selected</li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"parentnodepath\">parentNodePath</h3>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: specifies the base path, that is prepended to <strong>options[].pathValue</strong>. It must be an absolute path.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"preservesubpathonswitch\">preserveSubPathOnSwitch</h3>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: if set to <code>true</code>, the sub-path is preserved on context switch.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"usefallbacklabelcache\">useFallbackLabelCache</h3>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: if set to <code>true</code>, the labels retrieved through <strong>fallbackLabelResolver</strong> are cached within Luigi. This is useful, if <strong>fallbackLabelResolver</strong> is an async function which does a remote server call to fetch its value.</li>\n  <li><strong>since</strong>: 1.4.0</li>\n</ul>\n</section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"profile\">Profile</h2>\n<p>The profile section is a configurable drop-down list available in the top navigation bar. Within the configuration, you can override the logout item content (if authorization is configured) and/or add links to Luigi navigation nodes. To do so, add the <strong>profile</strong> parameter to the <strong>navigation</strong> object using the following optional parameters:</p>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"items\">items</h3>\n<ul>\n  <li><strong>type</strong>: array</li>\n  <li><strong>description</strong>: an array of objects, each one being a link to a Luigi navigation node or an external URL.</li>\n  <li><strong>attributes</strong>:\n    <ul>\n      <li><strong>label</strong> defines the text for the link.</li>\n      <li><strong>testId</strong> is a string where you can define your own custom <code>testId</code> for E2E tests. If nothing is specified, it is the node's label written as one word and lower case (e.g. <code>label</code>).</li>\n      <li><strong>icon</strong> is the name of an icon from <a href=\"https://openui5.hana.ondemand.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html\" rel=\"external\" target=\"_blank\">OpenUI5</a> or a custom link (relative or absolute) to an image displayed next to the label or instead of it.</li>\n      <li><strong>altText</strong> adds the HTML <code>alt</code> attribute to an icon. Note that this property only applies to icons with a defined absolute or relative path.</li>\n      <li><strong>link</strong> defines an absolute link to a <strong>node</strong>.</li>\n      <li><strong>openNodeInModal</strong> configures the settings of a view which opens in a modal. Details can be found here: <a href=\"/docs/navigation-parameters-reference#openNodeInModal\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">openNodeInModal</a>.</li>\n      <li>\n        <strong>externalLink</strong> is an object which indicates that the node links to an external URL. If this parameter\n        is defined, the <strong>link</strong> parameter\n        is ignored. It has the following attributes:\n        <ul>\n          <li>\n            <strong>sameWindow</strong> defines if the external URL is opened in the current tab or in a new one. The default value for this attribute\n            is <code>false</code>.\n          </li>\n          <li><strong>URL</strong> is the external URL that the link leads to.</li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"logout\">logout</h3>\n<ul>\n  <li><strong>type</strong>: object</li>\n  <li><strong>description</strong>: defines a list of additional elements that are shown on above or below the context switcher <strong>options</strong>.</li>\n  <li><strong>attributes</strong>:\n    <ul>\n      <li><strong>label</strong> overrides the text for the logout item. The default value is <code>Sign Out</code>.</li>\n      <li><strong>testId</strong> is a string where you can define your own custom <code>testId</code> for E2E tests. If nothing is specified, it is the node's label written as one word and lower case (e.g. <code>label</code>).</li>\n      <li><strong>icon</strong> overrides the icon for the logout item. The default value is the <a href=\"https://openui5.hana.ondemand.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html#/overview/SAP-icons/?tag=logout\" rel=\"external\" target=\"_blank\">SAP UI5 log icon</a>.</li>\n      <li><strong>altText</strong> adds the HTML <code>alt</code> attribute to an icon. Note that this property only applies to icons with a defined absolute or relative path.</li>\n      <li><strong>customLogoutFn</strong> defines a function to implement your own logout functionality. Use this function only if no IDP is configured. If you define IDP with a corresponding <a href=\"/docs/authorization-configuration\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">logout function</a>, the <strong>customLogoutFn</strong> set for a profile is ignored.</li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"staticuserinfofn\">staticUserInfoFn</h3>\n<ul>\n  <li><strong>type</strong>: function</li>\n  <li><strong>description</strong>: used to retrieve a user's name and email to simulate logging in. It can be used when authorization is disabled and also gets called if the defined IDP provider does not have <strong>settings.userInfoFn</strong> defined or does not provide a <code>userInfo</code> function internally. It can be asynchronous and should return an object with <strong>name</strong>, <strong>email</strong> and <strong>picture</strong> parameters.</li>\n  <li><strong>since</strong>: v0.6.5</li>\n</ul><!-- add-attribute:class:warning -->\n<blockquote class=\"warning\">\n  <p><strong>NOTE:</strong> Neither <strong>authorization</strong> nor <strong>profile</strong> parameter is configured if the profile section in the top navigation bar is not visible.</p>\n</blockquote>\n</section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"product-switcher\">Product switcher</h2>\n<p>The product switcher is a pop-up window available in the top navigation bar. It allows you to switch between the navigation elements displayed in the pop-up. To do so, add the <strong>productSwitcher</strong> parameter to the <strong>navigation</strong> object using the following optional parameters:</p>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"alttext-1\">altText</h3>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: adds the HTML <code>alt</code> attribute to an icon. Note that this property only applies to icons with a defined absolute or relative path.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"columns\">columns</h3>\n<ul>\n  <li><strong>type</strong>: number</li>\n  <li><strong>description</strong>: gives the possibility to define a number of columns to be displayed within the product switcher. It may be 3 or 4 columns, or <code>'auto'</code>. If nothing is specified, it is 4 columns by default. Parameter <code>columns: 'auto'</code> sets the number of columns to 3, in case the entities in <strong>productSwitcher</strong> are equal to or less than 6. If there are more than 6, the number of columns will be automatically adjusted to 4.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"icon-2\">icon</h3>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: the name of an icon, without the <code>sap-icon--</code> prefix. Its source may be <a href=\"https://openui5.hana.ondemand.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html\" rel=\"external\" target=\"_blank\">OpenUI5</a> or a custom link (relative or absolute) to an image. The icon is displayed without label in the top navigation.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"items-1\">items</h3>\n<ul>\n  <li><strong>type</strong>: array</li>\n  <li><strong>description</strong>: an array of objects, each one being a link to a Luigi navigation node or an external URL. An item can have several attributes.</li>\n  <li><strong>attributes</strong>:\n    <ul>\n      <li><strong>label</strong> defines the text for the link.</li>\n      <li><strong>subTitle</strong> defines an additional text line for the link.</li>\n      <li><strong>testId</strong> is a string where you can define your own custom <code>testId</code> for E2E tests. If nothing is specified, it is the node's label written as one word and lower case (e.g. <code>label</code>).</li>\n      <li><strong>icon</strong> is the name of an icon from the <a href=\"https://openui5.hana.ondemand.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html\" rel=\"external\" target=\"_blank\">OpenUI5</a> or a custom link (relative or absolute) to an image displayed next to the label or instead of it.</li>\n      <li><strong>altText</strong> adds the HTML <code>alt</code> attribute to an icon. Note that this property only applies to icons with a defined absolute or relative path.</li>\n      <li><strong>link</strong> defines an absolute link to a <strong>node</strong>.</li>\n      <li><strong>selected</strong> if set to true, the item is displayed in selected state, useful e.g. if the item refers to the current product.</li>\n      <li>\n        <strong>externalLink</strong> is an object which indicates that the node links to an external URL. If this parameter\n        is defined, the <strong>link</strong> parameter\n        is ignored. It has the following attributes:\n        <ul>\n          <li>\n            <strong>sameWindow</strong> defines if the external URL is opened in the current tab or in a new one. The default value for this attribute\n            is <code>false</code>.\n          </li>\n          <li><strong>URL</strong> is the external URL that the link leads to.</li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"label-1\">label</h3>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: defines the label of the product switcher. It is displayed as a title attribute on hover in the top navigation and as a headline in the mobile pop-up.</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"testid-1\">testId</h3>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: enables you to define your own custom <code>testId</code> for E2E tests. If nothing is specified, it is the node's label written as one word and lower case (e.g. <code>label</code>).</li>\n</ul>\n</section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"app-switcher\">App switcher</h2>\n<p>The app switcher is a dropdown list available in the top navigation bar. It allows you to switch between application elements displayed in the dropdown. To use it, you need to:</p>\n<ol>\n  <li>Define a <a href=\"/docs/general-settings#headerlogo\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">header object</a> in the <code>settings:</code> section of your Luigi configuration.</li>\n  <li>Add the <strong>appSwitcher</strong> parameter to the <strong>navigation</strong> object using the optional parameters listed below.</li>\n</ol>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"itemrenderer\">itemRenderer</h3>\n<ul>\n  <li><strong>type</strong>: function</li>\n  <li><strong>description</strong>: This function allows you to customize the single list element rendered in the default app switcher popover.</li>\n  <li><strong>attributes</strong>:\n    <ul>\n      <li><strong>item</strong> single application element</li>\n      <li><strong>slot</strong> <code>ul</code> element as slot. You can append your custom <code>li</code> entries to this <code>ul</code> element.</li>\n      <li><strong>appSwitcherApiObj</strong>\n        <ul>\n          <li><strong>type</strong>: Object</li>\n          <li><strong>description</strong>: It is an object with a function <code>closeDropDown</code> as property. This function closes the custom app switcher dropdown.</li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n  <li><strong>example</strong>:\n    <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n          <img src=\"/images/copy-clipboard-default.svg\">\n          <div class=\"popoverCopy\">Click to copy</div>\n        </div></a>\n      <pre class=\"canCopyCode\"><code class=\"language-javascript\">  appSwitcher: {\n    items:[...],\n    itemRenderer: (item, slot, appSwitcherApiObj) => {\n      let a = document.createElement('a');\n      a.setAttribute('class', 'fd-menu__link');\n      a.addEventListener('click', e => {\n        Luigi.navigation().navigate(item.link);\n        appSwitcherApiObj.closeDropDown();\n        e.stopPropagation();\n        Luigi.configChanged('navigation')\n      });\n      let span = document.createElement('span');\n      span.setAttribute('class', 'fd-menu__addon-before');\n      let i = document.createElement('i');\n      if (item.title === 'Application One') {\n        i.setAttribute('class', 'sap-icon--phone');\n      } else {\n        i.setAttribute('class', 'sap-icon--settings');\n      }\n      span.appendChild(i);\n      let spanText = document.createElement('span');\n      spanText.setAttribute('class', 'fd-menu__title');\n      spanText.innerText = item.title;\n      a.appendChild(span);\n      a.appendChild(spanText);\n      slot.appendChild(a);\n    }\n  }\n</code></pre>\n    </div>\n  </li>\n  <li><strong>since</strong>: 1.25.0</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"items-2\">items</h3>\n<ul>\n  <li><strong>type</strong>: array</li>\n  <li><strong>description</strong>: defines the list of application elements.</li>\n  <li><strong>attributes</strong>:\n    <ul>\n      <li><strong>title</strong> defines the application title. This is shown in the <strong>appSwitcher</strong> drop-down as well as the title in the header of the Luigi application if a user is in the context of the app.</li>\n      <li><strong>subTitle</strong> defines the application sub-title. This is shown as the sub-title in the header of the Luigi application if a user is in the context of the app.</li>\n      <li><strong>link</strong> is a link within the Luigi application that defines the root of the app. It is used to switch to the application if the drop-down entry is selected. It is also used to determine if a user is within the app's scope, so that the corresponding title and sub-title can be rendered in the header.</li>\n    </ul>\n  </li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"showmainappentry\">showMainAppEntry</h3>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: includes the link to the root of the Luigi application in the drop-down using the <strong>title</strong> specified in the <strong>settings/header</strong> section of the configuration as a label.</li>\n</ul>\n</section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"global-search\">Global search</h2>\n<p>The global search is an input field available in the top navigation bar. The search is available if the Luigi configuration file contains on its root level a section called <code>globalSearch</code>. Within this section you can implement and configure a search provider object.</p>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"disableinputhandlers\">disableInputHandlers</h3>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: disables the on:keyUp and other internal handlers on the search input field. It is a plain input field then, which can be used to attach your own handlers. If set to <code>true</code>, a <strong>searchProvider</strong> must be defined in order to show the search field, which can contain your custom logic. It is recommended to initialize your custom logic in the <a href=\"/docs/lifecycle-hooks#luigiafterinit\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\"><strong>lifeCycle.luigiAfterInit</strong></a> hook.</li>\n  <li><strong>since</strong>: 1.5.0</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"globalsearchcenteredcancelbutton\">globalSearchCenteredCancelButton</h3>\n<ul>\n  <li><strong>type</strong>: string</li>\n  <li><strong>description</strong>: defines the label of the cancel button. It will be displayed if you want to hide the search field on a smaller viewport. This property is only available if <code>searchFieldCentered</code> is active. Default value is <code>cancel</code> and this property is optional.</li>\n  <li><strong>since</strong>: 1.20.0</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"searchfieldcentered\">searchFieldCentered</h3>\n<ul>\n  <li><strong>type</strong>: boolean</li>\n  <li><strong>description</strong>: The search input field will be rendered in the center of the shellbar.</li>\n  <li><strong>since</strong>: 1.20.0</li>\n</ul>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"searchprovider\">searchProvider</h3>\n<ul>\n  <li><strong>type</strong>: Object</li>\n  <li><strong>description</strong>: The search provider is an object which contains different events and the possibility to implement a custom result renderer or change only the search result item.</li>\n  <li><strong>attributes:</strong></li>\n  <li><strong>onInput</strong>\n    <ul>\n      <li><strong>type</strong>: Function</li>\n      <li><strong>description</strong>: will be executed on every key-up event.</li>\n    </ul>\n  </li>\n  <li><strong>onEnter</strong>\n    <ul>\n      <li><strong>type</strong>: Function</li>\n      <li><strong>description</strong>: will be executed when the user presses 'Enter'.</li>\n    </ul>\n  </li>\n  <li><strong>onEscape</strong>\n    <ul>\n      <li><strong>type</strong>: Function</li>\n      <li><strong>description</strong>: will be executed when the user presses 'Escape'.</li>\n    </ul>\n  </li>\n  <li><strong>customSearchResultRenderer</strong>\n    <ul>\n      <li><strong>type</strong>: Function</li>\n      <li><strong>description</strong>: This function allows you to append your custom search result to a slot which Luigi provides for you. If this function is implemented the default search result popover is disabled.</li>\n      <li><strong>attributes</strong>:\n        <ul>\n          <li><strong>searchResults</strong>\n            <ul>\n              <li><strong>type</strong>: Array</li>\n              <li><strong>description</strong>: array of search result items</li>\n            </ul>\n          </li>\n          <li><strong>slot</strong>\n            <ul>\n              <li><strong>type</strong>: DIV element</li>\n              <li><strong>description</strong>: <code>div</code> element as slot. You can append a custom implementation of the search result to this <code>div</code> element.</li>\n            </ul>\n          </li>\n          <li><strong>searchApiObj</strong>\n            <ul>\n              <li><strong>type</strong>: Object</li>\n              <li><strong>description</strong>: It is an object with a function <code>fireItemSelected</code> as property. This function gets a search result item as parameter and fires the search provider event <code>onSearchResultItemSelected</code>.</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n  <li><strong>customSearchResultItemRenderer</strong>\n    <ul>\n      <li><strong>type</strong>: Function</li>\n      <li><strong>description</strong>: This function allows you to customize the single list element rendered in the default search result popover.</li>\n      <li><strong>attributes</strong>:\n        <ul>\n          <li><strong>searchResultItem</strong>\n            <ul>\n              <li><strong>type</strong>: Object</li>\n              <li><strong>description</strong>: search result item</li>\n            </ul>\n          </li>\n          <li><strong>slot</strong>\n            <ul>\n              <li><strong>type</strong>: LI element</li>\n              <li><strong>description</strong>: <code>li</code> element as slot. You can append a custom implementation of a <code>searchResultItem</code> to this <code>li</code> element.</li>\n            </ul>\n          </li>\n          <li><strong>searchApiObj</strong>\n            <ul>\n              <li><strong>type</strong>: Object</li>\n              <li><strong>description</strong>: It is an object with a function <code>fireItemSelected</code> as property. This function gets a <code>searchResultItem</code> as parameter and fires the search provider event <code>onSearchResultItemSelected</code>.</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n  <li><strong>onSearchResultItemSelected</strong>\n    <ul>\n      <li><strong>type</strong>: Function</li>\n      <li><strong>description</strong>: will be executed when the user clicks on a <code>searchResultItem</code>.</li>\n      <li><strong>attribute</strong> <a href=\"/docs/luigi-core-api#globalsearch\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">searchResultItem</a></li>\n    </ul>\n  </li>\n  <li><strong>inputPlaceholder</strong>\n    <ul>\n      <li><strong>type</strong>: string</li>\n      <li><strong>description</strong>: This text will be used as placeholder in the search input field.</li>\n    </ul>\n  </li>\n  <li><strong>inputPlaceholder</strong>\n    <ul>\n      <li><strong>type</strong>: Function</li>\n      <li><strong>description</strong>: Output of this function will be used as placeholder in the search input field.</li>\n    </ul>\n  </li>\n  <li><strong>inputPlaceholder</strong>\n    <ul>\n      <li><strong>type</strong>: Object</li>\n      <li><strong>description</strong>: Key value JSON object, where <code>key</code> is the language and <code>value</code> is the text used as placeholder in the search input field. This function doesn't have any input parameter.</li>\n    </ul>\n  </li>\n  <li><strong>toggleSearch</strong>\n    <ul>\n      <li><strong>type</strong>: Function</li>\n      <li>\n        <strong>description</strong>: This function will be executed every time when the visibility of the search input field is changed.\n        - <strong>attributes</strong>:\n      </li>\n      <li><strong>element</strong>\n        <ul>\n          <li><strong>type</strong>: INPUT element</li>\n          <li><strong>description</strong>: the input element where the user enters the search text.</li>\n        </ul>\n      </li>\n      <li><strong>visible</strong>\n        <ul>\n          <li><strong>type</strong>: boolean</li>\n          <li><strong>description</strong>: specifies if the input text is visible or not.</li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n</ul>\n</section></section></section></section>"}},{"name":"user-settings.md","shortName":"user-settings","contents":{"data":{},"messages":[],"history":[],"cwd":"/Users/I529989/Documents/SAP/32-luigi/website/docs","value":"<section class=\"h0Wrapper headingWrapper\">\n<section class=\"h1Wrapper headingWrapper\"><h1 id=\"user-settings\">User Settings</h1><!-- add-attribute:class:warning -->\n<blockquote class=\"warning\">\n  <p><strong>NOTE:</strong> User Settings functionality was first introduced in Luigi 1.8.0, so it is not available for older versions.</p>\n</blockquote>\n<p>This document explains how to configure a User Settings dialog in the top navigation of Luigi.</p>\n<ul>\n  <li><a href=\"/docs/user-settings#overview\" onclick=\"navigateInternal(event, this)\">Overview</a></li>\n  <li><a href=\"/docs/user-settings#example\" onclick=\"navigateInternal(event, this)\">Example</a></li>\n  <li><a href=\"/docs/user-settings#parameters\" onclick=\"navigateInternal(event, this)\">Parameters</a></li>\n  <li><a href=\"/docs/user-settings#write-a-custom-editor\" onclick=\"navigateInternal(event, this)\">Write a custom editor</a></li>\n  <li><a href=\"/docs/user-settings#customize-the-user-settings-dialog\" onclick=\"navigateInternal(event, this)\">Customize the user settings dialog</a></li>\n  <li><a href=\"/docs/user-settings#override-default-read-and-store-functionality\" onclick=\"navigateInternal(event, this)\">Override default read and store functionality</a></li>\n</ul>\n<section class=\"h2Wrapper headingWrapper\"><h2 id=\"overview\">Overview</h2>\n<p>\n  <img src=\"/assets/usersettingsdialog.png\" alt=\"User settings dialog\">\n</p>\n<p>Luigi allows you to display a user settings dialog and to manage user data, through defining a user settings schema. The schema is defined in a <code>userSettingGroups</code> object.</p><!-- add-attribute:class:warning -->\n<p class=\"warning\"><strong>NOTE:</strong> The user settings dialog can not be opened from the profile menu if the profile section in the top navigation bar is not configured. For more information see the <a href=\"/docs/navigation-advanced#profile\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">profile configuration</a>.</p>\n<p>\n  <img src=\"/assets/usersettings-in-profile.png\" alt=\"User settings in profile menu\">\n</p>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"example\">Example</h2>\n<p>The following example describes how user settings and a corresponding userSettingGroups configuration could look like:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">settings:{\n...\n},\nnavigation:{\n...\n},\nuserSettings:{\n  userSettingGroups:{\n    account: {\n      label: 'Account',\n      sublabel: 'account',\n      icon: 'account',\n      title: 'Account Settings',\n      initials: 'AA',\n      settings: {\n        name: { type: 'string', label: 'Name' , isEditable: true},\n        checkbox: { type: 'boolean', label: 'Checkbox', isEditable: true },\n        enum:\n          {\n            type: 'enum',\n            label: 'Label',\n            options: ['option1', 'option2', 'option3', 'option3'],\n            description: 'Description'\n          },\n          enum2:\n          {\n            type: 'enum',\n            label: 'Label',\n            options: ['value1' 'value2'],\n            style: 'button',\n            description: 'Description'\n          }\n      }\n    }\n  }\n}\n</code></pre>\n</div>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"parameters\">Parameters</h2>\n<p>These parameters used in the example above allow you to configure the items in the user settings menu:</p>\n<section class=\"h4Wrapper headingWrapper\"><h4 id=\"label\">label</h4>\n<ul>\n  <li><strong>type</strong> string (optional)</li>\n  <li><strong>description</strong> defines the label for the left-side navigation entry.</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"sublabel\">sublabel</h4>\n<ul>\n  <li><strong>type</strong> string (optional)</li>\n  <li><strong>description</strong> defines the sublabel for the left-side navigation entry.</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"icon\">icon</h4>\n<ul>\n  <li><strong>type</strong> string (optional)</li>\n  <li><strong>description</strong> name of the icon, without the <code>sap-icon--</code> prefix. It is also possible to use an image instead of an icon by specifying its path.</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"initials\">initials</h4>\n<ul>\n  <li><strong>type</strong> string (optional)</li>\n  <li><strong>description</strong> the initials are displayed in the account section in case the <code>icon:</code> attribute is not defined, or if the icon link is broken or unreachable.</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"iconclassattribute\">iconClassAttribute</h4>\n<ul>\n  <li><strong>type</strong> string (optional)</li>\n  <li><strong>description</strong> adds specified class(es) to the icon container. Custom classes help to style the image which can be set under the <strong>icon</strong> attribute above.</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"title\">title</h4>\n<ul>\n  <li><strong>type</strong> string (optional)</li>\n  <li><strong>description</strong> title of the user settings group. It will be displayed as a header in the editor area.</li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"viewurl\">viewURL</h4>\n<ul>\n  <li><strong>type</strong> string (optional)</li>\n  <li>\n    <strong>description</strong> points to a custom micro frontend. It is possible to not use Luigi's user settings editor. Instead, you can <a href=\"/docs/user-settings#write-a-custom-editor\" onclick=\"navigateInternal(event, this)\">write your own</a> editor micro frontend.\n    In that case, the micro frontend will be displayed in the editor area.\n  </li>\n</ul>\n</section><section class=\"h4Wrapper headingWrapper\"><h4 id=\"settings\">settings</h4>\n<ul>\n  <li>\n    <p><strong>type</strong> object (optional)</p>\n  </li>\n  <li>\n    <p>\n      <strong>description</strong> has objects of settings for the corresponding user group.\n      <code>Key</code> of each setting object will be the key in the stored user settings with the corresponding value.\n      The attributes to define a setting objects are:\n    </p>\n  </li>\n  <li>\n    <p><strong>attributes</strong></p>\n    <ul>\n      <li>\n        <p>\n          <strong>type</strong> (mandatory) is a string and defines the data type of this setting. It could be <code>string</code>, <code>boolean</code> or <code>enum</code>. If data type <code>string</code> is defined, an input field will be rendered in the editor area. If this property is set to <code>boolean</code>, a switcher will be rendered. If <code>enum</code> type is set, it will be rendered as a dropdown by default.\n          It is possible to define the style of how <code>boolean</code> and <code>enum</code> are generated, see <code>style</code> attribute.\n        </p>\n      </li>\n      <li>\n        <p><strong>label</strong> (optional) is a string and the label of the setting.</p>\n      </li>\n      <li>\n        <p><strong>isEditable</strong> (optional) is a boolean and by default <code>true</code>. If it is set to <code>false</code> the setting is not editable.</p>\n      </li>\n      <li>\n        <p><strong>placeholder</strong> (optional) is a string and by default <code>null</code>. If it is set to <code>value</code> the placeholder is displaying the <code>value</code> the other hand no data.</p>\n      </li>\n      <li>\n        <p><strong>style</strong> (optional) is a string and can be defined for the data types <code>boolean</code> and <code>enum</code>. Boolean will be rendered as switcher by default and it can be changed to <code>checkbox</code>. Enum will be rendered as dropdown by default and it can be changed to <code>button</code>, which means it will be rendered as a <code>segmented button</code>.</p>\n      </li>\n      <li>\n        <p>\n          <strong>options</strong> is an array of options. It is mandatory and necessary if the data type is <code>enum</code>. It can be entries of primitive data types like string or integer or entries of objects.\n          In this case the objects need <code>value</code> and <code>label</code> as key.\n        </p>\n      </li>\n    </ul>\n  </li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">language: {\n  type: 'enum',\n  label: 'Language and Region',\n  options: [\n    { value: 'de', label: 'German' },\n    { value: 'en', label: 'English' },\n    { value: 'fr', label: 'French' },\n    { value: 'es', label: 'Spanish' }\n  ]\n}\n</code></pre>\n</div>\n</section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"write-a-custom-editor\">Write a custom editor</h2>\n<p>\n  This user setting group will be displayed by the default editor, under the form of a user setting dialog.\n  It is possible to write a custom editor using a custom micro frontend. In that case, the <code>userSettingGroup</code> needs a <code>viewUrl</code> property with an URL to the micro frontend.\n  The micro frontend has to register the <code>addInitListener</code> from the Luigi Client. The stored user settings data object is part of the context object which comes with the init and update listener (<code>context.userSettingsData</code>).\n  The micro frontend gets only the stored data object which belongs to its <code>userSettingGroup</code>.\n  To update the user settings data (not store!) a special custom message has to be send to the Luigi Core.\n  The custom message sends the <code>userSettingsData</code> object with the reserved <code>id: 'luigi.updateUserSettings'</code>, for example:\n</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">let luigiContext={};\nwindow.LuigiClient.addInitListener((context, origin) => {\n    luigiContext=context;\n)};\nfunction onThemeChange(value){\n    luigiContext.userSettingsData.theme = value;\n    window.LuigiClient.sendCustomMessage({ id: 'luigi.updateUserSettings', data: luigiContext.userSettingsData });\n};\n</code></pre>\n</div>\n<blockquote>\n  <p><strong>NOTE:</strong> This is a very simple example to get the user settings data from the context and update the changed user settings data via a custom message.</p>\n</blockquote>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"customize-the-user-settings-dialog\">Customize the user settings dialog</h2>\n<p>These parameters can be used to configure the appearance of the user settings menu in Luigi. You may also want to take a look at the <a href=\"/docs/luigi-core-api\" onclick=\"navigateInternal(event, this)\" data-linktype=\"internal\">Luigi Core API</a> for additional options.</p>\n<ul>\n  <li>\n    <p><strong>userSettingsProfileMenuEntry.label</strong> defines the profile navigation entry. By default it is <code>Settings</code>.</p>\n  </li>\n  <li>\n    <p><strong>userSettingsProfileMenuEntry.icon</strong> defines the profile navigation entry icon. By default it is SAP icon <code>settings</code>.</p>\n  </li>\n  <li>\n    <p><strong>userSettingsDialog.dialogHeader</strong> defines user settings dialog header. By default it is <code>User Settings</code>.</p>\n  </li>\n  <li>\n    <p><strong>userSettingsDialog.saveBtn</strong> defines user settings dialog save button. By default it is <code>Save</code>.</p>\n  </li>\n  <li>\n    <p><strong>userSettingsDialog.dismissBtn</strong> defines user settings dialog dismiss button. By default it is <code>Dismiss</code>.</p>\n  </li>\n</ul>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"override-default-read-and-store-functionality\">Override default read and store functionality</h2>\n<p>By implementing the <code>storeUserSettings</code> and <code>readUserSettings</code> the default mechanism can be overriden.</p>\n<ul>\n  <li>\n    <p>\n      <strong>storeUserSettings</strong> if this function is implemented, the default mechanism will be overridden and you can choose a custom storage to store the user settings object (for example, using a custom third party Rest API). The function should return a promise and takes two parameters. The first one is the user settings which will be stored. The second one is the previous stored user settings. On resolve, the user settings dialog will be closed.\n      If an error appears, you have the possibility to close the user settings dialog by adding a <code>closeDialog</code> boolean flag to the error object. In addition, you can implement a <code>message</code> to display the error on the browser console log.\n    </p>\n  </li>\n  <li>\n    <p>\n      <strong>readUserSettings</strong> if this function is implemented, the default mechanism will be overridden and you can choose a custom storage to read the user settings object: the function should return a promise. The resolve function gets the user settings object as parameter.\n      If an error appears, you have the possibility to close the user settings dialog by adding a <code>closeDialog</code> boolean flag to the error object to close it. In addition, you can implement a <code>message</code> to display the error on the browser console log.\n    </p>\n  </li>\n</ul>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">userSettings:{\n  userSettingGroups:{\n    ...\n  },\n  storeUserSettings: (obj, previous) => {\n    return new Promise((resolve, reject) => {\n      if (JSON.stringify(obj) !== JSON.stringify(previous)) {\n        const settings = {\n          header: \"Confirmation\",\n          body: \"Are you sure you want to do this?\",\n          buttonConfirm: \"Yes\",\n          buttonDismiss: \"No\"\n        }\n        Luigi\n          .ux()\n          .showConfirmationModal(settings).then(() => {\n            sessionStorage.setItem('myUserSettings', JSON.stringify(obj));\n            resolve();\n          }).catch(() => {\n            reject({ closeDialog: true, message: 'error ' });\n          });\n      } else {\n        resolve();\n      }\n    });\n  },\n  readUserSettings: () => {\n    return new Promise((resolve, reject) => {\n      try {\n        if (sessionStorage.getItem('myUserSettings')) {\n          resolve(JSON.parse(sessionStorage.getItem('myUserSettings')));\n        } else {\n          resolve(JSON.parse(sessionStorage.getItem('myUserSettings')));\n        }\n      } catch {\n        reject({ closeDialog: true, message: 'some error' });\n      }\n    })\n  }\n}\n</code></pre>\n</div><!-- document the schema-->\n</section></section></section>"}},{"name":"versions.md","shortName":"versions","contents":{"data":{},"messages":[],"history":[],"cwd":"/Users/I529989/Documents/SAP/32-luigi/website/docs","value":"<section class=\"h0Wrapper headingWrapper\">\n<section class=\"h1Wrapper headingWrapper\"><h1 id=\"versions\">Versions</h1>\n<p>Read about the versions of Luigi in this document.</p>\n<ul>\n  <li><a href=\"/docs/versions#changelog\" onclick=\"navigateInternal(event, this)\">Changelog</a></li>\n  <li><a href=\"/docs/versions#luigi-1x-upgrades\" onclick=\"navigateInternal(event, this)\">Luigi 1.x upgrades</a></li>\n  <li><a href=\"/docs/versions#luigi-2x-upgrades\" onclick=\"navigateInternal(event, this)\">Luigi 2.x upgrades</a></li>\n  <li><a href=\"/docs/versions#docs-for-earlier-versions\" onclick=\"navigateInternal(event, this)\">Docs for earlier versions</a></li>\n</ul>\n<section class=\"h2Wrapper headingWrapper\"><h2 id=\"changelog\">Changelog</h2>\n<p>Our <a href=\"https://bit.ly/2W47Ewv\" rel=\"external\" target=\"_blank\">changelog</a> contains information on all the updates and features which were added to Luigi starting from its initial release.</p>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"luigi-1x-upgrades\">Luigi 1.x upgrades</h2>\n<p>Luigi versions 1.0 and above differ from earlier versions in some important ways. Luigi npm packages (previously under <code>kyma-project</code>) are under a new npm org. The new packages are:</p>\n<ul>\n  <li>@luigi-project/client</li>\n  <li>@luigi-project/client-ie11</li>\n  <li>@luigi-project/core</li>\n  <li>@luigi-project/core-ie11</li>\n  <li>@luigi-project/plugin-auth-oauth2</li>\n  <li>@luigi-project/plugin-auth-oidc</li>\n</ul>\n<p>You can read more about the other changes below:</p>\n<dl class=\"accordion-container\">\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"authorization-providers\">Authorization Providers</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>\n        We have excluded the default authorization providers from Luigi Core and published them as separate modules.\n        The property <code>customIdpProvider</code> has been renamed to <code>idpProvider</code>, since you now always need to define a provider.\n        Additionally, you need to copy callback assets to your Core application.\n      </p>\n      <p>To install the plugins, follow these installation guides:</p>\n      <ul>\n        <li><a href=\"https://github.com/SAP/luigi/tree/main/plugins/auth/public/auth-oauth2\" rel=\"external\" target=\"_blank\">OAuth2 Implicit Grant</a></li>\n        <li><a href=\"https://github.com/SAP/luigi/tree/main/plugins/auth/public/auth-oidc\" rel=\"external\" target=\"_blank\">OpenID Connect (OIDC)</a></li>\n      </ul><!-- add-attribute:class:warning -->\n      <blockquote class=\"warning\">\n        <p><strong>NOTE:</strong> If you already had a custom provider defined, you only need to rename the provider key to <code>idpProvider</code>.</p>\n      </blockquote>\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"internet-explorer-11-ie11\">Internet Explorer 11 (IE11)</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>IE11-related content is now in a separate package.</p>\n      <p>If you want to support IE11, install the client in your project using npm:</p>\n      <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n            <img src=\"/images/copy-clipboard-default.svg\">\n            <div class=\"popoverCopy\">Click to copy</div>\n          </div></a>\n        <pre class=\"canCopyCode\"><code class=\"language-bash\">npm install @luigi-project/client-ie11\nnpm install @luigi-project/core-ie11\n</code></pre>\n      </div>\n      <p>Import the client in places where you want to use it, depending on the environment of your choice:</p>\n      <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n            <img src=\"/images/copy-clipboard-default.svg\">\n            <div class=\"popoverCopy\">Click to copy</div>\n          </div></a>\n        <pre class=\"canCopyCode\"><code class=\"language-javascript\">var LuigiClient = require('@luigi-project/client-ie11');\nvar LuigiCore = require('@luigi-project/core-ie11');\n</code></pre>\n      </div>\n      <p>or</p>\n      <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n            <img src=\"/images/copy-clipboard-default.svg\">\n            <div class=\"popoverCopy\">Click to copy</div>\n          </div></a>\n        <pre class=\"canCopyCode\"><code class=\"language-javascript\">import LuigiClient from '@luigi-project/client-ie11';\nimport LuigiCore from '@luigi-project/core-ie11';\n</code></pre>\n      </div>\n      <p>or, if you are not using any bundler, Luigi is still available as a global object:</p>\n      <div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n            <img src=\"/images/copy-clipboard-default.svg\">\n            <div class=\"popoverCopy\">Click to copy</div>\n          </div></a>\n        <pre class=\"canCopyCode\"><code class=\"language-javascript\">window.LuigiClient\nwindow.Luigi\n</code></pre>\n      </div>\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"fundamental-library-styles\">Fundamental Library Styles</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>Following an upgrade from SAP Fundamentals to Fundamental Library Styles, there were changes in the HTML structure. Some classes were renamed or removed completely. You can find the full list of Fundamental Library Styles changes <a href=\"https://github.com/SAP/fundamental-styles/wiki/Breaking-Changes\" rel=\"external\" target=\"_blank\">here</a>.</p>\n      <p>Within Luigi, we renamed the <code>lui-tendant-menu__control</code> class to <code>lui-ctx-switch-menu</code>.</p>\n      <p>With Luigi version v1.3.0, the new v0.10.0 of Fundamental Library Styles were included. As a result, there were breaking changes to the Luigi side navigation. You can see the updated layout <a href=\"https://sap.github.io/fundamental-styles/components/side-navigation.html\" rel=\"external\" target=\"_blank\">here</a>.</p>\n      <p>With Luigi v1.4.0, the new v0.11.0 of Fundamental Library Styles were included. As a result, there were breaking changes to the Luigi Alerts. The classes <code>fd-overlay fd-overlay--message-strip</code> were removed from Fundamental Library Styles and we added a new class <code>luigi-alert--overlay</code> to keep the same look and feel as in the past. You can see all breaking changes of Fundamental Library Styles <a href=\"https://github.com/SAP/fundamental-styles/wiki/Breaking-Changes#0110\" rel=\"external\" target=\"_blank\">here</a>.</p>\n      <p>With Luigi v1.9.0, the new v0.14.0 of Fundamental Library Styles were included. Its previous v0.12.0 led to having breaking changes in the Luigi left side navigation and the shellbar. All icons were moved out from pseudo-classes into a dedicated tag <code>&#x3C;i class=\"sap-icon sap-icon--{modifier}\">&#x3C;/i></code> under the button. You can see all breaking changes of Fundamental Library Styles v0.12.0 <a href=\"https://github.com/SAP/fundamental-styles/releases?after=v0.12.1-rc.7\" rel=\"external\" target=\"_blank\">here</a>.</p>\n      <p>With Luigi v1.13.0, the new v0.17.0 of Fundamental Library Styles were included. It led to having breaking changes in the Luigi Dialog/Modal layout and Shellbar Counter. New HTML attributes were added to those components to increase accessibility. You can see the new layout of these components here: <a href=\"https://sap.github.io/fundamental-styles/?path=/docs/components-dialog--default-dialog\" rel=\"external\" target=\"_blank\">Dialog</a> and <a href=\"https://sap.github.io/fundamental-styles/?path=/docs/components-shellbar--primary\" rel=\"external\" target=\"_blank\">Shellbar Counter</a></p>\n      <p>In order to use TNT icons or businessSuiteInAppSymbols icons suite, it is recommended to add <code>@font-face</code> from <a href=\"https://sap.github.io/fundamental-styles/?path=/docs/introduction-overview--page#project-configuration\" rel=\"external\" target=\"_blank\">Fundamental Styles</a> project configuration, to your custom styles.</p>\n    </dd>\n  </div>\n</dl>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"luigi-2x-upgrades\">Luigi 2.x upgrades</h2>\n<p>Luigi v2.0 introduced two new important changes in regards to previous versions.</p>\n<dl class=\"accordion-container\">\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"internet-explorer-11-ie11-1\">Internet Explorer 11 (IE11)</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>As of Luigi v2.0, <strong>Internet Explorer 11 is no longer supported</strong>. Luigi is compatible with all other modern browsers. We recommend that you switch to another web browser such as Chrome or Edge. If you still need to use IE11, you can use Luigi versions lower than 2.0, all of which can be found on our <a href=\"https://github.com/SAP/luigi/releases\" rel=\"external\" target=\"_blank\">GitHub repository</a>.</p>\n    </dd>\n  </div>\n  <div class=\"accordion-item\">\n    <dt class=\"accordion-item-title\" onclick=\"accordionToggle(event, this)\">\n      <h3 id=\"update-to-angular-14-and-15\">Update to Angular 14 and 15</h3>\n    </dt>\n    <dd class=\"accordion-item-content\">\n      <p>With Luigi 2.0, we are updating to a newer version of Angular. This means that <strong>Angular v.13 and below are no longer supported</strong>. The <a href=\"https://docs.luigi-project.io/docs/framework-support-libraries\" rel=\"external\" target=\"_blank\">Luigi Angular support library</a> can now be used with Angular 14 or 15 instead. You can read about how to update your Angular version <a href=\"https://angular.io/guide/updating\" rel=\"external\" target=\"_blank\">here</a>.</p>\n    </dd>\n  </div>\n</dl>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"docs-for-earlier-versions\">Docs for earlier versions</h2>\n<p>The current documentation page describes the latest Luigi version. The documentation for earlier Luigi versions is provided as Markdown files in our GitHub repository.</p><!-- oldVersionsDropdown -->\n<div class=\"custom-select\"><select class=\"oldverdrop\" onchange=\"window.open(&#x27;https://github.com/SAP/luigi/blob/&#x27; + event.target.value + &#x27;/docs/README.md&#x27;, &#x27;_blank&#x27;); event.target.value=0;\"><option value=\"0\" style=\"display:none;\">Choose a version</option><option>v2.1.0</option><option>v2.0.1</option><option>v1.26.0</option><option>v1.25.1</option><option>v1.24.0</option><option>v1.23.1</option><option>v1.22.0</option><option>v1.21.0</option><option>v1.20.1</option><option>v1.19.0</option><option>v1.18.1</option><option>v1.17.0</option><option>v1.16.2</option><option>v1.15.0</option><option>v1.14.3</option><option>v1.13.0</option><option>v1.12.1</option><option>v1.11.0</option><option>v1.10.0</option><option>v1.9.0</option><option>v1.8.1</option><option>v1.7.1</option><option>v1.6.0</option><option>v1.5.0</option><option>v1.4.0</option><option>v1.3.1</option><option>v1.2.4</option><option>v1.1.1</option><option>v1.0.1</option><option>v0.7.7</option><option>v0.6.6</option><option>v0.5.4</option><option>v0.4.12</option><option>v0.3.8</option><option>v0.2.1</option></select></div>\n</section></section></section>"}},{"name":"web-component.md","shortName":"web-component","contents":{"data":{},"messages":[],"history":[],"cwd":"/Users/I529989/Documents/SAP/32-luigi/website/docs","value":"<section class=\"h0Wrapper headingWrapper\">\n<section class=\"h1Wrapper headingWrapper\"><h1 id=\"web-component\">Web Component</h1><!-- add-attribute:class:success -->\n<blockquote class=\"success\">\n  <p><strong>TIP:</strong> You can find some examples of Web Components in our test application <a href=\"https://fiddle.luigi-project.io\" rel=\"external\" target=\"_blank\">Luigi Fiddle</a> in the last navigation entry on the left.</p>\n</blockquote>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"overview\">Overview</h3>\n<p>Luigi offers the possibility to open a micro frontend as a Web Component. For more information, please have a look at the page: <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\" rel=\"external\" target=\"_blank\">Web Component</a>.</p>\n<p>Web Components can provide a fast-loading alternative for non-complex micro frontends. All micro frontends from trusted sources will be loaded in a single Javascript file.</p>\n<p>In this page you wil find:</p>\n<ul>\n  <li><a href=\"/docs/web-component#navigation-configuration\" onclick=\"navigateInternal(event, this)\">Navigation Configuration</a> - how to configure web component in Luigi Core navigation</li>\n  <li><a href=\"/docs/web-component#write-a-web-component\" onclick=\"navigateInternal(event, this)\">Write a Web Component</a> - quick description of how to write a Web Component compatible with Luigi Framework</li>\n  <li><a href=\"/docs/web-component#luigi-client-for-web-components\" onclick=\"navigateInternal(event, this)\">Luigi Client for web components</a> - javascript object injected in a Web Component to leverage Luigi Core features</li>\n  <li><a href=\"/docs/web-component#tip-how-to-inject-html-template-code-in-web-component\" onclick=\"navigateInternal(event, this)\">Tip: how to inject HTML Template code in Web Component</a> - recommendation for how to inject HTML in a Web Component</li>\n</ul>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"navigation-configuration\">Navigation Configuration</h2>\n<p>If you want to declare a menu item to be open as Web Component, you need to specify this configuration in the Luigi configuration:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.setConfig({\n    navigation: {\n   \t\t// To enable CORS Web Component Loading: you need to add external domains where the Web Components are hosted;\n   \t\t// in this example, we specify that we can load Web Components from everywhere\n\t    validWebcomponentUrls:['.*?'],\n\t    nodes: [\n\t\t...\n\t\t{\n\t\t    pathSegment: 'wc',\n\t\t    ………\n\t\t    viewUrl: '/wc/luigiExampleWC.js',\n\t\t    webcomponent: true,\n\t\t    ………\n\t\t}\n\t\t...\n\t\t]\n\t}\n})\n</code></pre>\n</div>\n<blockquote>\n  <p><strong>NOTE:</strong> With Luigi version 1.21.0 we removed the experimental flag for web components.</p>\n</blockquote>\n<section class=\"h3Wrapper headingWrapper\"><h3 id=\"write-a-web-component\">Write a Web Component</h3>\n<p>There are a couple of differences between Luigi Web Components and standard ones:</p>\n<ul>\n  <li>You don’t need to declare any special tag definition inside the Component such as <code>customElements.define(….., ….)</code></li>\n  <li>Inside the Component, Luigi Core will inject an object in your class called <code>LuigiClient</code></li>\n</ul>\n<p>Below is a simple Hello World Web Component example:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">export default class ExampleWC extends HTMLElement {\n  constructor() {\n    super();\n    const template = document.createElement('template');\n    template.innerHTML = `&#x3C;section>&#x3C;p>Hello World!&#x3C;/p>&#x3C;/section>`;\n\n    const templateBtn = document.createElement('template');\n    templateBtn.innerHTML = '&#x3C;button>Click me!&#x3C;/button>';\n\n    this._shadowRoot = this.attachShadow({\n      mode: 'open',\n      delegatesFocus: false\n    });\n    this._shadowRoot.appendChild(template.content.cloneNode(true));\n    this._shadowRoot.appendChild(templateBtn.content.cloneNode(true));\n\n    this.$paragraph = this._shadowRoot.querySelector('p');\n    this.$button = this._shadowRoot.querySelector('button');\n    this.$button.addEventListener('click', () => {\n      if (this.LuigiClient) {\n        this.LuigiClient.uxManager().showAlert({\n          text: 'Hello from uxManager in Web Component',\n          type: 'info'\n        });\n      }\n    });\n  }\n\n  set context(ctx) {\n    this.$paragraph.innerHTML = ctx.title;\n  }\n}\n</code></pre>\n</div>\n<p>\n  As shown in the example, you can use a LuigiClient instance inside your Web Component class.\n  It is really important to note that this LuigiClient instance is different from the one than you can find in our <a href=\"https://docs.luigi-project.io/docs/luigi-client-setup\" rel=\"external\" target=\"_blank\">Client library</a>.\n</p>\n<p>\n  Normal micro frontends are embedded inside iframe: Luigi offers a library to allow the frontend to communicate with Luigi Core.\n  In a Web Component the situation is quite different: they are not encapsulated into an iframe, they are just loaded inside a shadow element. When Luigi Core loads a Web Component, it injects a LuigiClient instance.\n</p>\n</section><section class=\"h3Wrapper headingWrapper\"><h3 id=\"luigi-client-for-web-components\">Luigi Client for Web Components</h3>\n<p>In this Javascript object, you can find two elements:</p>\n<ul>\n  <li><code>this.LuigiClient.uxManager()</code> : you can use all methods described in <a href=\"https://docs.luigi-project.io/docs/luigi-core-api?section=ux\" rel=\"external\" target=\"_blank\">Luigi Core UX</a></li>\n  <li><code>this.LuigiClient.linkManager()</code> : you can use all methods described in <a href=\"https://docs.luigi-project.io/docs/luigi-core-api?section=luiginavigation\" rel=\"external\" target=\"_blank\">Luigi Navigation</a></li>\n</ul>\n<p>Below you have a simple Hello World Web Component example which shows an alert:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">export default class ExampleWC extends HTMLElement {\n  constructor() {\n    ........\n    this.LuigiClient.uxManager().showAlert({\n      text: 'Hello from uxManager in Web Component',\n      type: 'info'\n    });\n    ........\n  }\n}\n</code></pre>\n</div>\n<p>This example opens a drawer:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">export default class ExampleWC extends HTMLElement {\n  constructor() {\n    ........\n     this.LuigiClient.linkManager().openAsDrawer('Your Drawer Url', {header:true, backdrop:true, size:'s'});\n    ........\n  }\n}\n</code></pre>\n</div>\n</section></section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"tip-how-to-inject-html-template-code-in-web-component\">Tip: how to inject HTML Template code in web component</h2>\n<p>\n  Sometimes your Web Component has an HTML template that you would like to use instead of creating DOM elements one by one.\n  We suggest putting your HTML template inside a variable at the beginning of the Javascript file, and appending it to the Web Component root in the constructor. An example is given below:\n</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">const template = document.createElement('template');\ntemplate.innerHTML = `\n&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"EN\">\n&#x3C;head>\n    &#x3C;meta charset=\"utf-8\">\n    &#x3C;title>&#x3C;/title>\n    &#x3C;link href=\"//unpkg.com/fundamental-styles@latest/dist/fundamental-styles.css\" rel=\"stylesheet\">\n    &#x3C;style>     &#x3C;/style>\n    &#x3C;script>&#x3C;/script>\n&#x3C;/head>\n&#x3C;body>\n      ......\n      &#x3C;main class=\"fd-page\">.....&#x3C;/main>\n      ......\n&#x3C;/body>\n`;\n\nexport default class ExampleWC extends HTMLElement {\n  constructor() {\n     super();\n     this.attachShadow({ mode: 'open' });\n     this.shadowRoot.appendChild(template.content.cloneNode(true));\n     ..........\n  }\n}\n</code></pre>\n</div>\n</section></section></section>"}},{"name":"README.md","shortName":"auth-oauth2","contents":{"data":{},"messages":[],"history":[],"cwd":"/Users/I529989/Documents/SAP/32-luigi/website/docs","value":"<section class=\"h0Wrapper headingWrapper\">\n<section class=\"h1Wrapper headingWrapper\"><h1 id=\"oauth2---authorization-plugin-for-luigi-core\">OAuth2 - Authorization Plugin for Luigi Core</h1>\n<section class=\"h2Wrapper headingWrapper\"><h2 id=\"overview\">Overview</h2>\n<p>\n  This <a href=\"https://github.com/SAP/luigi/tree/main/plugins/auth/public/auth-oauth2\" rel=\"external\" target=\"_blank\">authorization plugin</a> contains a library that allows your application to extend the <a href=\"https://github.com/SAP/luigi/tree/main/core\" rel=\"external\" target=\"_blank\">Luigi framework</a> with an OAuth2 authorization provider.\n  Further configuration details can be found in the <a href=\"https://docs.luigi-project.io/docs/authorization-configuration#oauth2-implicit-grant-configuration\" rel=\"external\" target=\"_blank\">main documentation</a>.\n</p>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"installation\">Installation</h2>\n<p>Install the plugin in your project using npm:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-bash\">npm install @luigi-project/plugin-auth-oauth2\n</code></pre>\n</div>\n<p>Import the plugin in places where you want to use it, depending on the environment of your choice:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">var oAuth2ImplicitGrant = require('@luigi-project/plugin-auth-oauth2');\n</code></pre>\n</div>\n<p>or</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">import oAuth2ImplicitGrant from '@luigi-project/plugin-auth-oauth2';\n</code></pre>\n</div>\n<p>Then, integrate it as an authorization provider in your Luigi configuration file:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.setConfig({\n  auth: {\n    use: 'myProviderConfig',\n    myProviderConfig: {\n      idpProvider: oAuth2ImplicitGrant,\n      // ... configuration data comes here\n      redirect_uri: '/assets/auth-oauth2/callback.html'\n    }\n  }\n})\n</code></pre>\n</div>\n<p>We provide a <code>callback.html</code> file through our <code>plugin-auth-oauth2</code> package. This <code>callback.html</code> file resides in <code>node_modules/@luigi-project/plugin-auth-oauth2/callback.html</code> and needs to be copied to a folder in your Luigi Core installation, which is the return path for the IdP provider, configured through the <code>redirect_uri</code> setting. The default location of <code>redirect_uri</code> is <code>/assets/auth-oauth2/callback.html</code>.</p>\n<p>The examples given below give some alternatives on how to copy this file in your project. However, you may choose your own way of copying the <code>callback.html</code> file to the default location depending on your environment.</p>\n<p>For applications involving a webpack configuration, one way to copy the <code>callback.html</code> file is using packages such as <a href=\"https://www.npmjs.com/package/copy-webpack-plugin\" rel=\"external\" target=\"_blank\">copy-webpack-plugin</a> and then including the following in your webpack configuration file:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">const CopyWebpackPlugin = require('copy-webpack-plugin');\n\n{\n  plugins: [\n    new CopyWebpackPlugin([{\n      from: 'node_modules/@luigi-project/plugin-auth-oauth2/callback.html',\n      to: 'src/assets/auth-oauth2'\n    }])\n  ]\n}\n</code></pre>\n</div>\n<p>If your application does not use webpack or you installed Luigi without a framework, you can use any copy plugin to copy the <code>callback.html</code> file and then modify the <code>package.json</code> script to copy the file when building. One package that could be helpful is <a href=\"https://www.npmjs.com/package/copyfiles\" rel=\"external\" target=\"_blank\">copyfiles</a>. Following is an example:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">\"buildConfig\": \"webpack --entry ./src/luigi-config/luigi-config.es6.js --output-path ./public/assets --output-filename luigi-config.js --mode production\",\n\"build\": \"npm run buildConfig &#x26;&#x26; npm run copyCallbackOAuth\",\n\"copyCallbackOAuth\": \"copyfiles -f node_modules/@luigi-project/plugin-auth-oauth2/callback.html public/assets/auth-oauth2\"\n</code></pre>\n</div>\n<p>Running <code>npm run build</code> should then suffice to bundle the config and also copy the callback file.</p>\n</section></section></section>"}},{"name":"README.md","shortName":"auth-oidc","contents":{"data":{},"messages":[],"history":[],"cwd":"/Users/I529989/Documents/SAP/32-luigi/website/docs","value":"<section class=\"h0Wrapper headingWrapper\">\n<section class=\"h1Wrapper headingWrapper\"><h1 id=\"openid-connect---authorization-plugin-for-luigi-core\">OpenID Connect - Authorization Plugin for Luigi Core</h1>\n<section class=\"h2Wrapper headingWrapper\"><h2 id=\"overview\">Overview</h2>\n<p>\n  This <a href=\"https://github.com/SAP/luigi/tree/main/plugins/auth/public/auth-oidc\" rel=\"external\" target=\"_blank\">authorization plugin</a> contains a library that allows your application to extend the <a href=\"https://github.com/SAP/luigi/tree/main/core\" rel=\"external\" target=\"_blank\">Luigi framework</a> with an OpenID Connect authorization provider.\n  Further configuration details can be found in the <a href=\"https://docs.luigi-project.io/docs/authorization-configuration#openid-connect-configuration\" rel=\"external\" target=\"_blank\">main documentation</a>. We support Authorization Code with PKCE and Implicit Grant flow.\n</p>\n</section><section class=\"h2Wrapper headingWrapper\"><h2 id=\"installation\">Installation</h2>\n<p>Install the plugin in your project using npm:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-bash\">npm install @luigi-project/plugin-auth-oidc\n</code></pre>\n</div>\n<p>Import the plugin in places where you want to use it, depending on the environment of your choice:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">var OpenIdConnect = require('@luigi-project/plugin-auth-oidc');\n</code></pre>\n</div>\n<p>or</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">import OpenIdConnect from '@luigi-project/plugin-auth-oidc';\n</code></pre>\n</div>\n<p>Then, integrate it as an authorization provider in your Luigi configuration file:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">Luigi.setConfig({\n  auth: {\n    use: 'myProviderConfig',\n    myProviderConfig: {\n      idpProvider: OpenIdConnect,\n      authority: 'http://authority.server',\n      logoutUrl: 'http://authority.server/connect/endsession',\n      scope: 'openid profile email',\n\n      // for PKCE flow\n      client_id: 'authorisation-code-pkce-mock-client', // example oidc-mockserver client id\n      response_type: \"code\", // for PKCE\n      response_mode: \"fragment\", // change between `query` and `fragment`\n\n      // for implicit grant flow\n      // client_id: 'implicit-mock-client', // example oidc-mockserver client id\n\n      // ... further configuration data comes here\n    }\n  }\n})\n</code></pre>\n</div>\n<p>\n  If you want to use the silent token renewal feature, the <code>silent-callback.html</code> needs to be copied to a folder in your Luigi Core installation,\n  which is the return path for the IdP provider, configured through the <code>redirect_uri</code> setting. The default location of <code>redirect_uri</code> is <code>/assets/auth-oidc/silent-callback.html</code>.\n</p>\n<p>Next, you must install <code>oidc-client</code> in your project as a dev dependency:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">npm i -save-dev oidc-client\n</code></pre>\n</div>\n<p>Then, you need to copy certain auxiliary plugin files and the callback file, as they are needed for the initial setup.</p>\n<p>Respectively from <code>oidc-client</code> library you need:</p>\n<ul>\n  <li><code>oidc-client.min.js</code> which normally resides in <code>node_modules/oidc-client/dist</code></li>\n</ul>\n<p>and from our library <code>@luigi-project/plugin-auth-oidc</code> you need:</p>\n<ul>\n  <li><code>plugin.js</code></li>\n  <li><code>silent-callback.html</code></li>\n  <li>\n    <code>plugin-ie11.js</code> (for IE11 only)\n    which all reside under <code>node_modules/@luigi-project/plugin-auth-oidc/plugin.js</code>.\n  </li>\n</ul>\n<p>The above mentioned files should be copied to <code>assets/auth-oidc</code> as the default location.</p>\n<p>Below we give some alternatives on how to easily copy these files in your project. However, you may choose your own way of copying these files depending on your environment.</p>\n<p>For applications involving a webpack configuration, one way to copy files is using packages such as <a href=\"https://www.npmjs.com/package/copy-webpack-plugin\" rel=\"external\" target=\"_blank\">copy-webpack-plugin</a> and then including the following in your webpack configuration file:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">const CopyWebpackPlugin = require('copy-webpack-plugin');\n\n{\n  plugins: [\n    new CopyWebpackPlugin([\n     {\n         from: 'node_modules/@luigi-project/plugin-auth-oidc/plugin.js',\n         to: 'assets/auth-oidc'\n     },\n     {\n         from: 'node_modules/@luigi-project/plugin-auth-oidc/plugin-ie11.js',\n         to: 'assets/auth-oidc'\n     },\n     {\n         from: 'node_modules/@luigi-project/plugin-auth-oidc/silent-callback.html',\n         to: 'assets/auth-oidc'\n     },\n     {\n         from: 'node_modules/oidc-client/dist/oidc-client.min.js',\n         to: 'assets/auth-oidc'\n     }\n    ])\n  ]\n}\n</code></pre>\n</div>\n<p>If your application does not use webpack or you installed Luigi without a framework, you can use an alternative way of copying the <code>silent-callback.html</code> file. You can use any copy plugin to copy the file and then modify the <code>package.json</code> script to copy the file when building. One package that could be helpful is <a href=\"https://www.npmjs.com/package/copyfiles\" rel=\"external\" target=\"_blank\">copyfiles</a>. Below is an example:</p>\n<div class=\"copyCodeContainer\"><a class=\"copyCode\" onclick=\"copyCode(event, this)\"><div>\n      <img src=\"/images/copy-clipboard-default.svg\">\n      <div class=\"popoverCopy\">Click to copy</div>\n    </div></a>\n  <pre class=\"canCopyCode\"><code class=\"language-javascript\">\"buildConfig\": \"webpack --entry ./src/luigi-config/luigi-config.es6.js --output-path ./public/assets --output-filename luigi-config.js --mode production\",\n\"build\": \"npm run buildConfig &#x26;&#x26; npm run copyCallbackOIdc\",\n\"copyCallbackOidc\": \"copyfiles -f node_modules/@luigi-project/plugin-auth-oidc/silent-callback.html node_modules/@luigi-project/plugin-auth-oidc/plugin.js node_modules/@luigi-project/plugin-auth-oidc/plugin-ie11.js node_modules/oidc-client/dist/oidc-client.min.js public/assets/auth-oidc\"\n</code></pre>\n</div>\n<p>Running <code>npm run build</code> should then suffice to bundle the config and also copy the callback file.</p>\n</section></section></section>"}}]