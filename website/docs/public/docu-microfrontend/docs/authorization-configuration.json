{"name":"authorization-configuration.md","shortName":"authorization-configuration","contents":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h1>Authorization configuration</h1>\n    <p>Luigi provides OpenID Connect and OAuth2 Implicit Grant authorization out of the box. The <strong>use</strong> key defines the active authorization provider and the <strong>disableAutoLogin</strong> key allows you to disable the automatic login flow that is provided by default.</p>\n    <pre><code>auth: {\n  use: 'openIdConnect',\n  openIdConnect: {\n    ...\n  },\n  disableAutoLogin: true\n}\n</code></pre>\n    <h2>OpenID Connect configuration</h2>\n    <p>The following code snippet demonstrates how to configure authorization using OpenID Connect in Luigi.</p>\n    <pre><code>auth: {\n  use: 'openIdConnect',\n  openIdConnect: {\n    authority: 'https://example-authority.com',\n    client_id: 'client',\n    scope: 'audience:server:client_id:client openid profile email groups',\n    redirect_uri: '',\n    post_logout_redirect_uri: '/logout.html',\n    automaticSilentRenew: true,\n    userInfoFn:()=>{},\n    accessTokenExpiringNotificationTime: 60\n  },\n  disableAutoLogin: false\n}\n</code></pre>\n    <ul>\n      <li><strong>authority</strong> contains the OpenID Connect server address used to authenticate.</li>\n      <li><strong>client_id</strong> contains your app client ID.</li>\n      <li><strong>scope</strong> defines the permissions to request at login.</li>\n      <li><strong>redirect_uri</strong> sets the URL to return to after login. The default application root is <code>/</code>.</li>\n      <li><strong>post_logout_redirect_uri</strong> sets the URL to return after logout. The default URL is <code>/logout.html</code>.</li>\n      <li><strong>automaticSilentRenew</strong> enables the automatic silent renewal of the token if it is supported by the server. The default value is <code>false</code>. For this mechanism to work, the browser must have third-party cookies support enabled.</li>\n      <li><strong>accessTokenExpiringNotificationTime</strong> is the number of seconds before an access token is to expire and triggers silent token refresh. The default value is <code>60</code> seconds.</li>\n      <li><strong>thirdPartyCookiesScriptLocation</strong> is the URL to the page containing third-party cookies support check. For details, see <a href=\"#Third-party-cookies-and-silent-token-refresh\">Third-party cookies and silent token refresh section</a>.</li>\n      <li><strong>userInfoFn</strong> provides a function to get user information. It returns a promise of a <strong>userinfo</strong> object which can contain <strong>name</strong>, <strong>email</strong> and <strong>picture</strong> (value is a URL to the image). <strong>Name</strong> or <strong>email</strong> are displayed in the profile drop-down menu and the user’s profile picture is displayed in the top navigation.</li>\n    </ul>\n    <h2>OAuth2 Implicit Grant configuration</h2>\n    <p>The following code snippet demonstrates how to configure authorization using OAuth2 Implicit Grant in Luigi.</p>\n    <pre><code>auth: {\n  use: 'oAuth2ImplicitGrant',\n  oAuth2ImplicitGrant: {\n    authorizeUrl: 'https://example-url.com/authorize',\n    logoutUrl: 'https://example-url.com/logout',\n    oAuthData: {\n      client_id: 'egDuozijY5SVr0NSIowUP1dT6RVqHnlp'\n      scope: '',\n      // optional parameters\n      redirect_uri: '/luigi-core/auth/oauth2/callback.html'\n      response_type: 'id_token token',\n      // all specified values inside oAuthData will be added to the oauth call, i.e display=\"popup\",\n    }\n    // optional functions\n    nonceFn: () => {},\n    logoutFn: (settings, authData, logoutCallback) => {},\n    userInfoFn:()=>{},\n    accessTokenExpiringNotificationTime: 60,\n    expirationCheckInterval: 5\n  },\n  disableAutoLogin: false\n</code></pre>\n    <ul>\n      <li><strong>authorizeUrl</strong> contains the URL or address of the OAuth2 authorization server.</li>\n      <li><strong>logoutUrl</strong> contains the endpoint to terminate the authorization session.</li>\n      <li><strong>oAuthData</strong> comprises the object with data sent to the <strong>authorizeUrl</strong>.</li>\n      <li><strong>client_id</strong> holds your application client ID.</li>\n      <li><strong>scope</strong> defines permissions that are requested at login.</li>\n      <li><strong>redirect_uri</strong> contains the URL to return to after login. The default application root is <code>/</code>.</li>\n      <li><strong>response_type</strong> defaults to the <strong>id_token</strong>. Any other parameter that is added to oAuthData is also added to the authorization payload.</li>\n      <li><strong>nonceFn</strong> provides a function that returns a string in order to override the default <strong>nonce</strong>.</li>\n      <li><strong>logoutFn</strong> provides the function to override the <strong>logoutUrl</strong> functionality for a custom logout. It needs to execute the <strong>logoutCallback()</strong> function after logout.</li>\n      <li><strong>userInfoFn</strong> provides a function to get user information. It returns a promise of a <strong>userinfo</strong> object which can contain <strong>name</strong>, <strong>email</strong> and <strong>picture</strong> (value is a URL to the image). <strong>Name</strong> or <strong>email</strong> are displayed in the profile drop-down menu and the user’s profile picture is displayed in the top navigation.</li>\n      <li><strong>accessTokenExpiringNotificationTime</strong> number of seconds that pass before an access token expires and the <strong>onAuthExpireSoon</strong> event is fired. The default value is <code>60</code> seconds.</li>\n      <li><strong>expirationCheckInterval</strong> the number of seconds to pass between each check if the token is about to expire. The default value is <code>5</code> seconds.</li>\n    </ul>\n    <h3>Custom Authentication Provider</h3>\n    <p>If you are using any authentication provider you can also implement the following functions for Luigi.</p>\n    <pre><code>export class CustomAuthenticationProvider {\n\n    login(){\n        // logic to handle the login mechanism\n        // returns a promise which contains an error message if something went wrong\n    }\n\n    logout(authData, logoutCallback){\n        // logic to handle the logout mechanism\n    }\n\n    setTokenExpirationAction(){\n    }\n\n    setTokenExpireSoonAction() {}\n\n    generateNonce(){\n        //returns a string \n    }\n\n    userInfo(){\n        // logic to get some user information\n        // returns a promise of a userinfo object which contains a user name and/or email to display in the profile dropdown menu\n    }\n}\n</code></pre>\n    <h3>Third-party cookies and silent token refresh</h3>\n    <p>\n      The OpenID Connect configuration allows you to specify the <strong>automaticSilentRenew</strong> option. When set to <code>true</code>, Luigi attempts to automatically renew the token in the background before it expires. Be aware that this mechanism requires the browser to support <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#Third-party_cookies\">third-party cookies</a>.\n      It is possible to detect whether the user's browser supports the mechanism by using the script in <a href=\"https://github.com/SAP/luigi/tree/master/core/third-party-cookies\"><code>third-party-cookies</code></a> catalog. Deploy these files on a <strong>different domain</strong> than your main application and set <strong>thirdPartyCookiesScriptLocation</strong> to <code>init.html</code> file. During initialization, Luigi detects the cookies support and produces a warning in the console if cookies are disabled in the user's browser.\n    </p>\n    <p>When Luigi fails to renew the token and then logs out the user, it adds the following query parameters to the logout page redirect URL: <code>?reason=tokenExpired&#x26;thirdPartyCookies=[VALUE]</code>. Luigi replaces the <strong>VALUE</strong> with one of the following:</p>\n    <ul>\n      <li><code>disabled</code> means that third party cookies is disabled.</li>\n      <li><code>enabled</code> means third party cookies are supported by the browser.</li>\n      <li><code>not_checked</code> means that the script was not provided in <strong>thirdPartyCookiesScriptLocation</strong> or it could not be loaded.</li>\n    </ul>\n    <p>The application developer can read these parameters and set a logout page based on them.</p>\n    <h3>Implement a Custom Authentication Provider</h3>\n    <p>You can write your own authentication provider that meets your requirements.</p>\n    <p>\n      <a href=\"https://github.com/SAP/luigi/blob/master/core/src/providers/auth/oAuth2ImplicitGrant.js\">oAuth2ImplicitGrant.js</a> is a good starting point if you don't use an external authentication library.\n      After authorization is successful on the auth provider's side it redirects back to <code>Luigi callback.html</code> <strong>redirect_uri</strong>. The auth provider verifies the authentication data, saves it in <strong>localStorage</strong> for Luigi, and redirects to the Luigi main page.\n    </p>\n    <p><a href=\"https://github.com/SAP/luigi/blob/master/core/src/providers/auth/openIdConnect.js\">openIdConnect.js</a> lazy loads the official <code>oidc-client</code> library and is a good starting point if you also depend on external authentication libraries.</p>\n    <p>Make sure to set the following data in your Authentication Provider implementation, so that it is used after successful authentication.</p>\n    <pre><code>const data = {\n  accessToken: hashParams['access_token'],\n  accessTokenExpirationDate: hashParams['expiry_timestamp'],\n  scope: hashParams['scope'],\n  idToken: hashParams['id_token']\n};\n\nlocalStorage.setItem('luigi.auth', JSON.stringify(data));\nlocalStorage.setItem('luigi.newlyAuthorized', true);\n</code></pre>\n    <p>Additionally, if you process authentication data during Luigi runtime (inside the custom provider, similarly to using the<code>openIdConnect</code> provider), dispatch the <code>luigi.auth.tokenIssued</code> Event to update the currently opened micro frontends with the latest authentication data. This is not required when processing authentication outside Luigi, for example when <code>oAuth2ImplicitGrant</code> provider processes the data in <code>callback.html</code> and redirects to Luigi afterward.</p>\n    <pre><code>window.postMessage(\n  { msg: 'luigi.auth.tokenIssued', authData: data },\n  '*'\n);\n</code></pre>\n  </body>\n</html>\n"}