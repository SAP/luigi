{"name":"luigi-ux-features.md","shortName":"luigi-ux-features","contents":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h1>Luigi UX features</h1>\n    <h3>Rendering of Luigi application in the DOM</h3>\n    <p>By default, the Luigi content, including the top navigation, the left navigation, and the content iframed area, are rendered in the body tag of your Luigi Core application. As a result, the Luigi content takes the whole space from your browser window.</p>\n    <p>However, you can render the Luigi content in any other HTML container. It can be useful if you want to add a header or a footer on top of the Luigi content. To use this feature, add the <code>luigi-app-root</code> custom HTML attribute to the HTML tag in which you want to render the Luigi content.</p>\n    <blockquote>\n      <p><strong>NOTE:</strong> If you render the Luigi content in a custom container, the container is positioned relatively when you apply your own CSS. Also, set the height of the Luigi custom container either in <strong>px</strong> or <strong>vh</strong>.</p>\n    </blockquote>\n    <h3>Responsive application setup</h3>\n    <p>You can quickly adjust the Luigi application to improve user experience on mobile devices, such as smartphones or tablets. Here are some examples:</p>\n    <ul>\n      <li>Add the following line to your <code>index.html</code> file for the Luigi application to render well on a mobile device:</li>\n    </ul>\n    <pre><code class=\"language-html\">&#x3C;meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1\">\n</code></pre>\n    <ul>\n      <li>Define and apply <a href=\"./general-settings.md\">responsiveNavigation</a> settings to make the left navigation responsive.</li>\n    </ul>\n    <h3>App loading indicator</h3>\n    <p>To show a loading indicator before Luigi Core or your first micro frontend is ready, add a container with the <code>luigi-app-loading-indicator</code> attribute to your <em>index.html</em> body or inside your <a href=\"#rendering-of-luigi-application-in-the-dom\"><code>luigi-app-root</code></a> container.</p>\n    <pre><code class=\"language-html\">&#x3C;div luigi-app-loading-indicator>\n  &#x3C;div class=\"fd-spinner\">\n    &#x3C;div>&#x3C;/div>\n  &#x3C;/div>\n&#x3C;/div>\n</code></pre>\n    <p>By default, the loading indicator is removed after <code>Luigi.setConfig({})</code> has been executed.</p>\n    <p>Alternatively, to keep the loading indicator until the first micro frontend is usable, follow these steps:</p>\n    <ol>\n      <li>Set the app loading indicator parameter <code>hideAutomatically</code> to <code>false</code></li>\n    </ol>\n    <pre><code class=\"language-javascript\">{\n  ...\n  settings: {\n    appLoadingIndicator: {\n      hideAutomatically: false\n    }\n  }\n  ...\n}\n</code></pre>\n    <ol start=\"2\">\n      <li>Call <a href=\"./luigi-core-api.md#hideAppLoadingIndicator\"><code>Luigi.ux().hideAppLoadingIndicator()</code></a> in the Luigi Core once your initial micro frontend has finished loading to remove the loading indicator. You can, for example, use the <a href=\"./communication.md#custom-messages\">custom messages</a> feature to allow the Luigi Client micro frontend to communicate with the Core when this function should be executed.</li>\n    </ol>\n  </body>\n</html>\n"}