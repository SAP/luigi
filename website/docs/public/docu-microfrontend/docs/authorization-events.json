{"name":"authorization-events.md","shortName":"authorization-events","contents":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h1>Authorization events</h1>\n    <p>\n      Luigi provides life cycle events which it can trigger internally or by authorization providers.\n      Events are part of the <strong>auth</strong> configuration object and have to be functions. They can be executed asynchronously.\n    </p>\n    <p>An example events configuration looks as follows:</p>\n    <pre><code>auth: {\n  events: {\n    onAuthSuccessful: (settings, authData) => {},\n    onAuthError: (settings, err) => {}\n    onAuthExpired: (settings) => {},\n    onLogout: (settings) => {},\n    onAuthExpireSoon: (settings) => {}\n  }\n}\n</code></pre>\n    <p>\n      The first parameter is always the current <strong>settings</strong> object of the currently active authorization provider. This object contains the user provider configuration with the default values.\n      The second parameter is optional and it is either <strong>authData</strong> or <strong>error</strong>.\n    </p>\n    <p>You can disable the default behavior of <code>onAuthExpired</code> and <code>onAuthError</code> by making the function return <code>false</code>. As a result, the lifecycle execution stops with this function. This, however, may lead to blank pages after the user logs out since typically the page redirects to a logout, login or home page.</p>\n    <h2>Events</h2>\n    <ul>\n      <li>\n        <p><code>onAuthSuccessful</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\">function</a></strong> is executed after logging in with the <strong>authData</strong> object parameter. If valid authorization data was found in the local storage, the function is not executed.</p>\n      </li>\n      <li>\n        <p><code>onAuthError</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\">function</a></strong> is executed:</p>\n        <ul>\n          <li>by Luigi <strong>reason</strong> URL parameter with optional <strong>error</strong> URL parameter for detailed description was found on Luigi initialization. The OAuth2Provider uses this approach by redirecting from the authorization provider to <code>luigi.domain/?reason=someError&#x26;error=Error detail describe</code>.</li>\n          <li>by the OIDC provider if silent access token renewal fails</li>\n        </ul>\n        <p>Return <code>false</code> to prevent redirecting to <code>logoutUrl</code> after executing this function. It goes to the Luigi main route <code>/</code> instead.</p>\n      </li>\n      <li>\n        <p><code>onAuthExpired</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\">function</a></strong> is executed if the token expires during runtime, or if Luigi is opened with outdated authorization data in the local storage. Return <code>false</code> to prevent redirecting to <code>logoutUrl</code> after executing this function.</p>\n      </li>\n      <li>\n        <p><code>onLogout</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\">function</a></strong> is executed after the user logs out.</p>\n      </li>\n      <li>\n        <p><code>onAuthExpireSoon</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\">function</a></strong> is executed before the token expires. For OAuth2 and OIDC you can set the <strong>accessTokenExpiringNotificationTime</strong> to specify the number of seconds required to pass before the event is fired. The default value is <code>60</code> seconds.</p>\n        <ul>\n          <li>by using oAuth2ImplicitGrant you can specify <strong>expirationCheckInterval</strong> which is the number of seconds to pass between each check if the token is about to expire. The default value is <code>5</code> seconds.</li>\n        </ul>\n      </li>\n    </ul>\n  </body>\n</html>\n"}