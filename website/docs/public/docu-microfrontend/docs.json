[{"name":"application-setup.md","shortName":"application-setup","contents":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h1>Application setup</h1>\n    <p>Prior to start developing with Luigi, you need to set up your application. This document shows you how to set up a web application using the Luigi micro frontend framework.</p>\n    <p>Choose the framework to build your application:</p>\n    <p><a href=\"#noframework\">Application setup without a framework</a><br><a href=\"#angular6\">Angular 6</a><br><a href=\"#sapui5\">SAPUI5/OpenUI5</a><br><a href=\"#vuejs\">VUE.JS</a></p>\n    <h2>Basic application setup</h2>\n    <p>Follow these steps to build a web application based on Luigi:</p>\n    <ol>\n      <li>Add Luigi npm packages to your project dependencies.</li>\n    </ol>\n    <pre><code>npm install --save @kyma-project/luigi-core\nnpm install --save @kyma-project/luigi-client\n</code></pre>\n    <ol start=\"2\">\n      <li>Give Luigi exclusive control over the entry <code>index.html</code> file. If you have a single page application, transfer it to a two-page application. Your app should run to make sure the existing router doesn't interfere.</li>\n      <li>Define your Luigi <a href=\"navigation-configuration.md\">navigation configuration</a>.</li>\n      <li>Start your server to run the application.</li>\n    </ol>\n    <h2>Command examples</h2>\n    <p>The examples on this page demonstrate commands that perform each of the necessary steps to set up your application. Each set of commands is grouped by the framework on which you execute it.</p>\n    <p><a name=\"noframework\"></a></p>\n    <h3>Application setup for an application not using a framework</h3>\n    <blockquote>\n      <p><strong>NOTE:</strong> You need a development server capable of hosting Single Page Applications. The recommended server is Live Server.</p>\n    </blockquote>\n    <ol>\n      <li>If you do not have Live Server installed, use this command to install it.</li>\n    </ol>\n    <pre><code>npm install -g live-server\n</code></pre>\n    <ol start=\"2\">\n      <li>Use the following installer to create a directory for your application, install Luigi, make assets available, and start your local server</li>\n    </ol>\n    <pre><code>bash &#x3C;(curl -s https://raw.githubusercontent.com/SAP/luigi/master/scripts/setup/no-framework.sh)\n</code></pre>\n    <p>or execute these commands manually to get the same result:</p>\n    <pre><code class=\"language-bash\">mkdir my-new-app &#x26;&#x26; cd my-new-app\n\nnpm init -y\n\nsed 's/\"scripts\": {/\"scripts\": {\\\n\\   \"buildConfig\":\"webpack --entry .\\/src\\/luigi-config\\/basic\\/basicConfiguration.js -o .\\/public\\/assets\\/sampleconfig.js --mode production\",/1' package.json > p.tmp.json &#x26;&#x26; mv p.tmp.json package.json\n\nnpm i -save @kyma-project/luigi-core @kyma-project/luigi-client fiori-fundamentals webpack webpack-cli @babel/core @babel/preset-env babel-loader \n\nmkdir -p public/assets\n\nmkdir -p src/luigi-config/basic\n\ncurl https://raw.githubusercontent.com/SAP/luigi/master/core/examples/luigi-sample-angular/src/index.html > public/index.html\n\ncurl https://raw.githubusercontent.com/SAP/luigi/master/core/examples/luigi-sample-angular/src/assets/sampleexternal.html > public/assets/basicexternal.html\n\ncurl https://raw.githubusercontent.com/SAP/luigi/master/core/examples/luigi-sample-angular/src/luigi-config/basic/basicConfiguration.js > src/luigi-config/basic/basicConfiguration.js\n\nsed \"s|extendedConfiguration.bundle.js|sampleconfig.js|g\" public/index.html > public/index.tmp.html &#x26;&#x26; mv public/index.tmp.html public/index.html\n\ncp -r node_modules/\\@kyma-project/luigi-* public\n\ncp -r node_modules/fiori-fundamentals/dist public/fiori-fundamentals\n\nnpm run buildConfig\n\nlive-server --entry-file=index.html public\n</code></pre>\n    <p><a name=\"angular6\"></a></p>\n    <h3>Application setup for Angular 6</h3>\n    <blockquote>\n      <p><strong>NOTE:</strong> The Angular CLI is a prerequisite for this example.</p>\n    </blockquote>\n    <ol>\n      <li>\n        <p>If you do not have the Angular CLI installed, download and install it from <a href=\"https://cli.angular.io/\">this URL</a>.</p>\n      </li>\n      <li>\n        <p>Use the installer to create your application, install Luigi, make assets available, and serve your application:</p>\n      </li>\n    </ol>\n    <pre><code>bash &#x3C;(curl -s https://raw.githubusercontent.com/SAP/luigi/master/scripts/setup/angular.sh)\n</code></pre>\n    <p>or execute these commands manually to get the same result:</p>\n    <pre><code class=\"language-bash\">ng new my-angular-app --routing &#x26;&#x26; cd my-angular-app\n\nnpm i -P @kyma-project/luigi-core @kyma-project/luigi-client fiori-fundamentals webpack webpack-cli @babel/core @babel/preset-env babel-loader \n\nsed 's/\"scripts\": {/\"scripts\": {\\\n\\   \"buildConfig\":\"webpack --entry .\\/src\\/luigi-config\\/basic\\/basicConfiguration.js -o .\\/src\\/assets\\/sampleconfig.js --mode production\",/1' package.json > p.tmp.json &#x26;&#x26; mv p.tmp.json package.json\n\nmkdir -p src/luigi-config/basic\n\nmv src/index.html src/angular.html\n\ncurl https://raw.githubusercontent.com/SAP/luigi/master/core/examples/luigi-sample-angular/src/index.html > src/index.html\n\ncurl https://raw.githubusercontent.com/SAP/luigi/master/core/examples/luigi-sample-angular/src/luigi-config/basic/basicConfiguration.js > src/luigi-config/basic/basicConfiguration.js\n\ncurl https://raw.githubusercontent.com/SAP/luigi/master/core/examples/luigi-sample-angular/src/assets/sampleexternal.html > src/assets/basicexternal.html\n\n\nsed 's/extendedConfiguration.bundle.js/sampleconfig.js/g' src/index.html > src/index.tmp.html &#x26;&#x26; mv src/index.tmp.html src/index.html\n\nsed 's#\"src/index.html\"#\"src/angular.html\"#g' angular.json > tmp.json &#x26;&#x26; mv tmp.json angular.json\n\nsed 's#\"src/styles.css\"#\"src/styles.css\", \"node_modules/fiori-fundamentals/dist/fiori-fundamentals.min.css\"#g' angular.json > tmp.json &#x26;&#x26; mv tmp.json angular.json\n\nsed 's#\"src/assets\"#\"src/assets\",\"src/index.html\",\"src/logout.html\",{\"glob\": \"fiori-fundamentals.min.css\",\"input\": \"node_modules/fiori-fundamentals/dist\",\"output\": \"/fiori-fundamentals\"},{\"glob\": \"fonts/**\",\"input\": \"node_modules/fiori-fundamentals/dist\",\"output\": \"/fiori-fundamentals\"},{\"glob\": \"SAP-icons.*\",\"input\": \"node_modules/fiori-fundamentals/dist\",\"output\": \"/fiori-fundamentals\"},{\"glob\": \"**\",\"input\": \"node_modules/@kyma-project/luigi-core\",\"output\": \"/luigi-core\"},{\"glob\": \"luigi-client.js\",\"input\": \"node_modules/@kyma-project/luigi-client\",\"output\": \"/luigi-client\"}#g' angular.json > tmp.json &#x26;&#x26; mv tmp.json angular.json\n\nnpm run buildConfig\n\nnpm run start\n</code></pre>\n    <p><a name=\"sapui5\"></a></p>\n    <h3>Application setup for SAPUI5/OpenUI5</h3>\n    <blockquote>\n      <p><strong>NOTE:</strong> Live Server must be installed as your development server.</p>\n    </blockquote>\n    <ol>\n      <li>If you do not have Live Server installed, use this command to install it.</li>\n    </ol>\n    <pre><code>npm install -g live-server\n</code></pre>\n    <ol start=\"2\">\n      <li>Use the installer to create a directory for your application, install Luigi, make assets available, and start your local server:</li>\n    </ol>\n    <pre><code>bash &#x3C;(curl -s https://raw.githubusercontent.com/SAP/luigi/master/scripts/setup/openui5.sh)\n</code></pre>\n    <p>or execute these commands manually to get the same result:</p>\n    <pre><code>$ mkdir my-ui5-app &#x26;&#x26; cd my-ui5-app\n$ npm init -y\n$ npm i -save @kyma-project/luigi-core @kyma-project/luigi-client fiori-fundamentals\n$ mkdir -p public/assets\n$ curl https://raw.githubusercontent.com/SAP/luigi/master/core/examples/luigi-sample-angular/src/index.html > public/index.html\n$ sed 's/extendedConfiguration.bundle.js/sampleconfig.js/g' public/index.html > public/index.tmp.html &#x26;&#x26; mv public/index.tmp.html public/index.html\n$ curl https://raw.githubusercontent.com/SAP/openui5/master/src/sap.m/test/sap/m/demokit/tutorial/quickstart/01/webapp/index.html | sed 's/src=\"..\\/..\\/..\\/..\\/..\\/..\\/..\\/..\\/resources\\/sap-ui-core.js\"/src=\"https:\\/\\/openui5.hana.ondemand.com\\/resources\\/sap-ui-core.js\"/g' > public/ui5.html\n$ curl https://raw.githubusercontent.com/SAP/luigi/master/core/examples/luigi-sample-angular/src/luigi-config/basic/basicConfiguration.js > public/assets/sampleconfig.js\n$ curl https://raw.githubusercontent.com/SAP/luigi/master/core/examples/luigi-sample-angular/src/assets/sampleexternal.html > public/assets/basicexternal.html\n$ cp -r node_modules/\\@kyma-project/luigi-* public\n$ live-server --entry-file=index.html public\n</code></pre>\n    <p><a name=\"vuejs\"></a></p>\n    <h3>Application setup for VUE.JS</h3>\n    <blockquote>\n      <p><strong>NOTE:</strong> The VUE CLI is a prerequisite for this example.</p>\n    </blockquote>\n    <ol>\n      <li>If you do not have VUE CLI installed, use this command to install it.</li>\n    </ol>\n    <pre><code>npm install -g @vue/cli\n</code></pre>\n    <ol start=\"2\">\n      <li>Use the installer to create your application, install Luigi, make assets available, and serve your application:</li>\n    </ol>\n    <pre><code>bash &#x3C;(curl -s https://raw.githubusercontent.com/SAP/luigi/master/scripts/setup/vue.sh)\n</code></pre>\n    <p>or execute these commands manually to get the same result:</p>\n    <pre><code>$ vue create -d my-original-vue-app &#x26;&#x26; cd my-original-vue-app\n$ npm i -save @kyma-project/luigi-core @kyma-project/luigi-client fiori-fundamentals\n$ mkdir -p public/assets\n$ mv public/index.html public/vue.html\n$ curl https://raw.githubusercontent.com/SAP/luigi/master/core/examples/luigi-sample-angular/src/index.html > public/index.html\n$ sed 's/extendedConfiguration.bundle.js/sampleconfig.js/g' public/index.html > public/index.tmp.html &#x26;&#x26; mv public/index.tmp.html public/index.html\n$ curl https://raw.githubusercontent.com/SAP/luigi/master/core/examples/luigi-sample-angular/src/luigi-config/basic/basicConfiguration.js > public/assets/sampleconfig.js\n$ curl https://raw.githubusercontent.com/SAP/luigi/master/core/examples/luigi-sample-angular/src/assets/sampleexternal.html > public/assets/basicexternal.html\n$ echo \"const webpack=require('webpack');const CopyWebpackPlugin=require('copy-webpack-plugin');module.exports={pages:{sampleapp:{entry:'src/main.js',template:'public/vue.html',filename:'vue.html'}},lintOnSave:true,runtimeCompiler:true,outputDir:'dist',configureWebpack:{plugins:[new CopyWebpackPlugin([{context:'public',to:'index.html',from:'index.html'},{context:'node_modules/@kyma-project/luigi-core',to:'./luigi-core',from:{glob:'**',dot:true}},{context:'node_modules/@kyma-project/luigi-client',to:'./luigi-client',from:{glob:'**',dot:true}}],{ignore:['.gitkeep','**/.DS_Store','**/Thumbs.db'],debug:'warning'})]}};\" > vue.config.js\n$ npm run serve\n</code></pre>\n  </body>\n</html>\n"},{"name":"authorization-configuration.md","shortName":"authorization-configuration","contents":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h1>Authorization configuration</h1>\n    <p>Luigi provides OpenID Connect and OAuth2 Implicit Grant authorization out of the box. The <strong>use</strong> key defines the active authorization provider and the <strong>disableAutoLogin</strong> key allows you to disable the automatic login flow that is provided by default.</p>\n    <pre><code>auth: {\n  use: 'openIdConnect',\n  openIdConnect: {\n    ...\n  },\n  disableAutoLogin: true\n}\n</code></pre>\n    <h2>OpenID Connect configuration</h2>\n    <p>The following code snippet demonstrates how to configure authorization using OpenID Connect in Luigi.</p>\n    <pre><code>auth: {\n  use: 'openIdConnect',\n  openIdConnect: {\n    authority: 'https://example-authority.com',\n    client_id: 'client',\n    scope: 'audience:server:client_id:client openid profile email groups',\n    redirect_uri: '',\n    post_logout_redirect_uri: '/logout.html',\n    automaticSilentRenew: true,\n    userInfoFn:()=>{},\n    accessTokenExpiringNotificationTime: 60\n  },\n  disableAutoLogin: false\n}\n</code></pre>\n    <ul>\n      <li><strong>authority</strong> contains the OpenID Connect server address used to authenticate.</li>\n      <li><strong>client_id</strong> contains your app client ID.</li>\n      <li><strong>scope</strong> defines the permissions to request at login.</li>\n      <li><strong>redirect_uri</strong> sets the URL to return to after login. The default application root is <code>/</code>.</li>\n      <li><strong>post_logout_redirect_uri</strong> sets the URL to return after logout. The default URL is <code>/logout.html</code>.</li>\n      <li><strong>automaticSilentRenew</strong> enables the automatic silent renewal of the token if it is supported by the server. The default value is <code>false</code>. For this mechanism to work, the browser must have third-party cookies support enabled.</li>\n      <li><strong>accessTokenExpiringNotificationTime</strong> is the number of seconds before an access token is to expire and triggers silent token refresh. The default value is <code>60</code> seconds.</li>\n      <li><strong>thirdPartyCookiesScriptLocation</strong> is the URL to the page containing third-party cookies support check. For details, see <a href=\"#Third-party-cookies-and-silent-token-refresh\">Third-party cookies and silent token refresh section</a>.</li>\n      <li><strong>userInfoFn</strong> provides a function to get user information. It returns a promise of a <strong>userinfo</strong> object which can contain <strong>name</strong>, <strong>email</strong> and <strong>picture</strong> (value is a URL to the image). <strong>Name</strong> or <strong>email</strong> are displayed in the profile drop-down menu and the user’s profile picture is displayed in the top navigation.</li>\n    </ul>\n    <h2>OAuth2 Implicit Grant configuration</h2>\n    <p>The following code snippet demonstrates how to configure authorization using OAuth2 Implicit Grant in Luigi.</p>\n    <pre><code>auth: {\n  use: 'oAuth2ImplicitGrant',\n  oAuth2ImplicitGrant: {\n    authorizeUrl: 'https://example-url.com/authorize',\n    logoutUrl: 'https://example-url.com/logout',\n    oAuthData: {\n      client_id: 'egDuozijY5SVr0NSIowUP1dT6RVqHnlp'\n      scope: '',\n      // optional parameters\n      redirect_uri: '/luigi-core/auth/oauth2/callback.html'\n      response_type: 'id_token token',\n      // all specified values inside oAuthData will be added to the oauth call, i.e display=\"popup\",\n    }\n    // optional functions\n    nonceFn: () => {},\n    logoutFn: (settings, authData, logoutCallback) => {},\n    userInfoFn:()=>{},\n    accessTokenExpiringNotificationTime: 60,\n    expirationCheckInterval: 5\n  },\n  disableAutoLogin: false\n</code></pre>\n    <ul>\n      <li><strong>authorizeUrl</strong> contains the URL or address of the OAuth2 authorization server.</li>\n      <li><strong>logoutUrl</strong> contains the endpoint to terminate the authorization session.</li>\n      <li><strong>oAuthData</strong> comprises the object with data sent to the <strong>authorizeUrl</strong>.</li>\n      <li><strong>client_id</strong> holds your application client ID.</li>\n      <li><strong>scope</strong> defines permissions that are requested at login.</li>\n      <li><strong>redirect_uri</strong> contains the URL to return to after login. The default application root is <code>/</code>.</li>\n      <li><strong>response_type</strong> defaults to the <strong>id_token</strong>. Any other parameter that is added to oAuthData is also added to the authorization payload.</li>\n      <li><strong>nonceFn</strong> provides a function that returns a string in order to override the default <strong>nonce</strong>.</li>\n      <li><strong>logoutFn</strong> provides the function to override the <strong>logoutUrl</strong> functionality for a custom logout. It needs to execute the <strong>logoutCallback()</strong> function after logout.</li>\n      <li><strong>userInfoFn</strong> provides a function to get user information. It returns a promise of a <strong>userinfo</strong> object which can contain <strong>name</strong>, <strong>email</strong> and <strong>picture</strong> (value is a URL to the image). <strong>Name</strong> or <strong>email</strong> are displayed in the profile drop-down menu and the user’s profile picture is displayed in the top navigation.</li>\n      <li><strong>accessTokenExpiringNotificationTime</strong> number of seconds that pass before an access token expires and the <strong>onAuthExpireSoon</strong> event is fired. The default value is <code>60</code> seconds.</li>\n      <li><strong>expirationCheckInterval</strong> the number of seconds to pass between each check if the token is about to expire. The default value is <code>5</code> seconds.</li>\n    </ul>\n    <h3>Custom Authentication Provider</h3>\n    <p>If you are using any authentication provider you can also implement the following functions for Luigi.</p>\n    <pre><code>export class CustomAuthenticationProvider {\n\n    login(){\n        // logic to handle the login mechanism\n        // returns a promise which contains an error message if something went wrong\n    }\n\n    logout(authData, logoutCallback){\n        // logic to handle the logout mechanism\n    }\n\n    setTokenExpirationAction(){\n    }\n\n    setTokenExpireSoonAction() {}\n\n    generateNonce(){\n        //returns a string \n    }\n\n    userInfo(){\n        // logic to get some user information\n        // returns a promise of a userinfo object which contains a user name and/or email to display in the profile dropdown menu\n    }\n}\n</code></pre>\n    <h3>Third-party cookies and silent token refresh</h3>\n    <p>\n      The OpenID Connect configuration allows you to specify the <strong>automaticSilentRenew</strong> option. When set to <code>true</code>, Luigi attempts to automatically renew the token in the background before it expires. Be aware that this mechanism requires the browser to support <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#Third-party_cookies\">third-party cookies</a>.\n      It is possible to detect whether the user's browser supports the mechanism by using the script in <a href=\"https://github.com/SAP/luigi/tree/master/core/third-party-cookies\"><code>third-party-cookies</code></a> catalog. Deploy these files on a <strong>different domain</strong> than your main application and set <strong>thirdPartyCookiesScriptLocation</strong> to <code>init.html</code> file. During initialization, Luigi detects the cookies support and produces a warning in the console if cookies are disabled in the user's browser.\n    </p>\n    <p>When Luigi fails to renew the token and then logs out the user, it adds the following query parameters to the logout page redirect URL: <code>?reason=tokenExpired&#x26;thirdPartyCookies=[VALUE]</code>. Luigi replaces the <strong>VALUE</strong> with one of the following:</p>\n    <ul>\n      <li><code>disabled</code> means that third party cookies is disabled.</li>\n      <li><code>enabled</code> means third party cookies are supported by the browser.</li>\n      <li><code>not_checked</code> means that the script was not provided in <strong>thirdPartyCookiesScriptLocation</strong> or it could not be loaded.</li>\n    </ul>\n    <p>The application developer can read these parameters and set a logout page based on them.</p>\n    <h3>Implement a Custom Authentication Provider</h3>\n    <p>You can write your own authentication provider that meets your requirements.</p>\n    <p>\n      <a href=\"https://github.com/SAP/luigi/blob/master/core/src/providers/auth/oAuth2ImplicitGrant.js\">oAuth2ImplicitGrant.js</a> is a good starting point if you don't use an external authentication library.\n      After authorization is successful on the auth provider's side it redirects back to <code>Luigi callback.html</code> <strong>redirect_uri</strong>. The auth provider verifies the authentication data, saves it in <strong>localStorage</strong> for Luigi, and redirects to the Luigi main page.\n    </p>\n    <p><a href=\"https://github.com/SAP/luigi/blob/master/core/src/providers/auth/openIdConnect.js\">openIdConnect.js</a> lazy loads the official <code>oidc-client</code> library and is a good starting point if you also depend on external authentication libraries.</p>\n    <p>Make sure to set the following data in your Authentication Provider implementation, so that it is used after successful authentication.</p>\n    <pre><code>const data = {\n  accessToken: hashParams['access_token'],\n  accessTokenExpirationDate: hashParams['expiry_timestamp'],\n  scope: hashParams['scope'],\n  idToken: hashParams['id_token']\n};\n\nlocalStorage.setItem('luigi.auth', JSON.stringify(data));\nlocalStorage.setItem('luigi.newlyAuthorized', true);\n</code></pre>\n    <p>Additionally, if you process authentication data during Luigi runtime (inside the custom provider, similarly to using the<code>openIdConnect</code> provider), dispatch the <code>luigi.auth.tokenIssued</code> Event to update the currently opened micro frontends with the latest authentication data. This is not required when processing authentication outside Luigi, for example when <code>oAuth2ImplicitGrant</code> provider processes the data in <code>callback.html</code> and redirects to Luigi afterward.</p>\n    <pre><code>window.postMessage(\n  { msg: 'luigi.auth.tokenIssued', authData: data },\n  '*'\n);\n</code></pre>\n  </body>\n</html>\n"},{"name":"authorization-events.md","shortName":"authorization-events","contents":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h1>Authorization events</h1>\n    <p>\n      Luigi provides life cycle events which it can trigger internally or by authorization providers.\n      Events are part of the <strong>auth</strong> configuration object and have to be functions. They can be executed asynchronously.\n    </p>\n    <p>An example events configuration looks as follows:</p>\n    <pre><code>auth: {\n  events: {\n    onAuthSuccessful: (settings, authData) => {},\n    onAuthError: (settings, err) => {}\n    onAuthExpired: (settings) => {},\n    onLogout: (settings) => {},\n    onAuthExpireSoon: (settings) => {}\n  }\n}\n</code></pre>\n    <p>\n      The first parameter is always the current <strong>settings</strong> object of the currently active authorization provider. This object contains the user provider configuration with the default values.\n      The second parameter is optional and it is either <strong>authData</strong> or <strong>error</strong>.\n    </p>\n    <p>You can disable the default behavior of <code>onAuthExpired</code> and <code>onAuthError</code> by making the function return <code>false</code>. As a result, the lifecycle execution stops with this function. This, however, may lead to blank pages after the user logs out since typically the page redirects to a logout, login or home page.</p>\n    <h2>Events</h2>\n    <ul>\n      <li>\n        <p><code>onAuthSuccessful</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\">function</a></strong> is executed after logging in with the <strong>authData</strong> object parameter. If valid authorization data was found in the local storage, the function is not executed.</p>\n      </li>\n      <li>\n        <p><code>onAuthError</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\">function</a></strong> is executed:</p>\n        <ul>\n          <li>by Luigi <strong>reason</strong> URL parameter with optional <strong>error</strong> URL parameter for detailed description was found on Luigi initialization. The OAuth2Provider uses this approach by redirecting from the authorization provider to <code>luigi.domain/?reason=someError&#x26;error=Error detail describe</code>.</li>\n          <li>by the OIDC provider if silent access token renewal fails</li>\n        </ul>\n        <p>Return <code>false</code> to prevent redirecting to <code>logoutUrl</code> after executing this function. It goes to the Luigi main route <code>/</code> instead.</p>\n      </li>\n      <li>\n        <p><code>onAuthExpired</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\">function</a></strong> is executed if the token expires during runtime, or if Luigi is opened with outdated authorization data in the local storage. Return <code>false</code> to prevent redirecting to <code>logoutUrl</code> after executing this function.</p>\n      </li>\n      <li>\n        <p><code>onLogout</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\">function</a></strong> is executed after the user logs out.</p>\n      </li>\n      <li>\n        <p><code>onAuthExpireSoon</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\">function</a></strong> is executed before the token expires. For OAuth2 and OIDC you can set the <strong>accessTokenExpiringNotificationTime</strong> to specify the number of seconds required to pass before the event is fired. The default value is <code>60</code> seconds.</p>\n        <ul>\n          <li>by using oAuth2ImplicitGrant you can specify <strong>expirationCheckInterval</strong> which is the number of seconds to pass between each check if the token is about to expire. The default value is <code>5</code> seconds.</li>\n        </ul>\n      </li>\n    </ul>\n  </body>\n</html>\n"},{"name":"communication.md","shortName":"communication","contents":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h1>Communication</h1>\n    <h2>Custom messages</h2>\n    <p>Luigi Core and Luigi Client can exchange custom messages in both directions.</p>\n    <h3>Luigi Client to Luigi Core</h3>\n    <p>For Luigi Client to send messages to Luigi Core, use the <a href=\"luigi-client-api.md#sendCustomMessage\"><em>sendCustomMessage</em></a> method from Client API.</p>\n    <p>For Luigi Core to process custom messages, define a configuration similar to the following at the root level of your Luigi configuration object:</p>\n    <pre><code class=\"language-javascript\">{\n  ...\n  communication: {\n    customMessagesListeners: {\n      'my-custom-message.update-top-nav': () => {\n        Luigi.navigation().updateTopNavigation();\n      }\n    }\n  }\n  ...\n}\n</code></pre>\n    <p>where the <code>my-custom-message.update-top-nav</code> key is the message id, and the value is the listener function for the custom message. The listener receives the following input parameters:</p>\n    <ul>\n      <li><strong>customMessage</strong> the <a href=\"luigi-client-api.md#sendCustomMessage\"><em>message</em></a> sent by Luigi Client.</li>\n      <li><strong>microfrontend</strong> a micro frontend object as specified <a href=\"luigi-core-api.md#getMicrofrontends\">here</a>.</li>\n      <li><strong>navigation node</strong> a <a href=\"navigation-parameters-reference.md#Node-parameters\">navigation node object</a>.</li>\n    </ul>\n    <h3>Luigi Core to Luigi Client</h3>\n    <p>For Luigi Core to send messages, use the <a href=\"luigi-core-api.md#customMessages\"><em>customMessages</em></a> section from Core API. You can send a custom message to all rendered micro frontends, or to a specific one. For the latter, use the Core API <a href=\"luigi-core-api.md#elements\"><em>elements</em></a> methods to retrieve micro frontends and select the one you want to send the custom message to.</p>\n    <p>For Luigi Client to process the message, add and remove message listeners as described <a href=\"luigi-client-api.md#addCustomMessageListener\">here</a>.</p>\n  </body>\n</html>\n"},{"name":"general-settings.md","shortName":"general-settings","contents":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h1>General settings</h1>\n    <p>The configuration file contains a section called <strong>Settings</strong> in which you can configure additional Luigi options.</p>\n    <pre><code class=\"language-javascript\">settings: {\n  hideNavigation: false\n  backdropDisabled : false,\n  header: {  object / function / Promise\n    logo: 'path/to/image.png',\n    title: 'Luigi Demo',\n    favicon: 'path/to/favicon.ico'\n  },\n  sideNavFooterText: 'MyLovelyApp 1.0.0',\n  customTranslationImplementation: () => {\n    return {\n      getTranslation: (key, interpolations, locale) => {\n        return translatedText;\n      }\n    };\n  },\n  customSandboxRules: ['allow-downloads-without-user-activation'],\n  appLoadingIndicator: {\n    hideAutomatically: true\n  }\n}\n</code></pre>\n    <ul>\n      <li><strong>hideNavigation</strong> disables Luigi's default out-of-the-box navigation when set to <code>true</code>. As a result, neither the left nor top navigation is visible in your application, and you can implement your own navigation UI. By default, the parameter is set to <code>false</code>, which means the navigation is enabled.</li>\n      <li><strong>backdropDisabled</strong> prevents the backdrop layer from covering the top and left navigation when showing modal windows. By default, the backdrop is set to <code>true</code>.</li>\n      <li><strong>header.logo</strong> defines the top left navigation logo. It has a fixed height of 28px.</li>\n      <li><strong>header.title</strong> defines the top left navigation title.</li>\n      <li><strong>header.favicon</strong> defines the favicon. It requires a standard favicon file with the <code>.ico</code> extension, and 16x16px or 32x32px dimensions.</li>\n      <li>\n        <strong>responsiveNavigation</strong> allows customizing the navigation display settings. For example, you can define a button which shows or completely hides the left navigation, or a button which collapses the navigation to only show the icons.\n        You can set the following values:\n        <ul>\n          <li><code>simple</code> displays the button on the left side of the top navigation regardless of the browser window´s size.</li>\n          <li><code>simpleMobileOnly</code> displays the button on the left side of the top navigation when the browser window is narrower than <code>600px</code>.</li>\n          <li><code>semiCollapsible</code> displays the arrow button at the bottom of the left side navigation. Once you click the button, the navigation shows up or collapses.<br>If you don't specify any value for <strong>responsiveNavigation</strong>, the buttons remain hidden. The same applies when you enable <strong>hideSideNav</strong> for the currently active navigation node.</li>\n        </ul>\n      </li>\n      <li><strong>sideNavFooterText</strong> is a string displayed in a sticky footer inside the side navigation. It is a good place to display the version of your application.</li>\n      <li><strong>customTranslationImplementation</strong> provides a custom localization implementation. It can be an Object or a Function returning an Object. This Object must provide the <strong>getTranslation</strong> Function as property:</li>\n    </ul>\n    <pre><code class=\"language-javascript\">{\n  getTranslation: (key, interpolations, locale) => {\n    // should return translation of the 'key' in the 'locale' or current locale\n  }\n}\n</code></pre>\n    <blockquote>\n      <p><strong>NOTE:</strong> You can translate Luigi internal messages by providing translation for <a href=\"https://github.com/SAP/luigi/blob/master/core/src/utilities/defaultLuigiTranslationTable.js\">these keys</a>.</p>\n      <ul>\n        <li><strong>customSandboxRules</strong> is an array of custom rules for the content in the iframe. You can extend the <a href=\"https://github.com/SAP/luigi/blob/af1deebb392dcec6490f72576e32eb5853a894bc/core/src/utilities/helpers/iframe-helpers.js#L140\">Luigi default sandbox rules</a> by adding further rules.</li>\n        <li><strong>appLoadingIndicator.hideAutomatically</strong> allows you to disable automatic hiding of the app loading indicator, which is enabled by default in case the app loading indicator is being used. Take a look at the <a href=\"luigi-ux-features.md#app-loading-indicator\">App loading indicator</a> section on how to use this feature.</li>\n      </ul>\n    </blockquote>\n  </body>\n</html>\n"},{"name":"lifecycle-hooks.md","shortName":"lifecycle-hooks","contents":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h1>Lifecycle hooks</h1>\n    <p>You can use any of the Luigi lifecycle hooks by adding additional setup to the root of the Luigi configuration object. Here is an example:</p>\n    <pre><code class=\"language-javascript\">{\n  ...\n  lifecycleHooks: {\n    luigiAfterInit: () => {\n      const newCustomMessage = {\n        id: 'luigi.my-custom-message-for-client',\n        description: 'here goes the message description'\n      };\n      Luigi.customMessages().send('MY_MICRO_FRONTEND_ID', newCustomMessage);\n    }\n  }\n  ...\n}\n</code></pre>\n    <h3>luigiAfterInit()</h3>\n    <p>This method will be called after <code>Luigi.setConfig({})</code> is executed.</p>\n  </body>\n</html>\n"},{"name":"luigi-client-api.md","shortName":"luigi-client-api","contents":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h1>Luigi Client API</h1><!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n    <p>\n      <example path=\"init-listener\"></example>\n    </p>\n    <h2>Lifecycle</h2>\n    <p>Use the functions and parameters to define the Lifecycle of listeners, navigation nodes, and Event data.</p>\n    <h3>addInitListener</h3>\n    <p>Registers a listener called with the context object and the Luigi Core domain as soon as Luigi is instantiated. Defer your application bootstrap if you depend on authentication data coming from Luigi.</p>\n    <h4>Parameters</h4>\n    <ul>\n      <li><code>initFn</code> <strong><a href=\"#lifecycleinitlistenercallback\">Lifecycle~initListenerCallback</a></strong> the function that is called once Luigi is initialized, receives current context and origin as parameters.</li>\n    </ul>\n    <h3>removeInitListener</h3>\n    <p>Removes an init listener.</p>\n    <h4>Parameters</h4>\n    <ul>\n      <li><code>id</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> the id that was returned by the <code>addInitListener</code> function</li>\n    </ul>\n    <h3>addContextUpdateListener</h3>\n    <p>Registers a listener called with the context object upon any navigation change.</p>\n    <h4>Parameters</h4>\n    <ul>\n      <li><code>contextUpdatedFn</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\">function</a></strong> the listener function called each time Luigi context changes</li>\n    </ul>\n    <h3>removeContextUpdateListener</h3>\n    <p>Removes a context update listener.</p>\n    <h4>Parameters</h4>\n    <ul>\n      <li><code>id</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> the id that was returned by the <code>addContextUpdateListener</code> function</li>\n    </ul>\n    <h3>addCustomMessageListener</h3>\n    <p>Registers a listener called when the micro frontend receives a custom message.</p>\n    <h4>Parameters</h4>\n    <ul>\n      <li><code>customMessageId</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> the custom message id</li>\n      <li><code>customMessageListener</code> <strong><a href=\"#lifecyclecustommessagelistenercallback\">Lifecycle~customMessageListenerCallback</a></strong> the function that is called when the micro frontend receives the corresponding event.</li>\n    </ul>\n    <p><strong>Meta</strong></p>\n    <ul>\n      <li><strong>since</strong>: 0.6.2</li>\n    </ul>\n    <h3>removeCustomMessageListener</h3>\n    <p>Removes a custom message listener.</p>\n    <h4>Parameters</h4>\n    <ul>\n      <li><code>id</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> the id that was returned by the <code>addInitListener</code> function</li>\n    </ul>\n    <p><strong>Meta</strong></p>\n    <ul>\n      <li><strong>since</strong>: 0.6.2</li>\n    </ul>\n    <h3>getToken</h3>\n    <p>Returns the currently valid access token.</p>\n    <p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> current access token</p>\n    <h3>getEventData</h3>\n    <p>Returns the context object. Typically it is not required as the <a href=\"#addContextUpdateListener\">addContextUpdateListener()</a> receives the same values.</p>\n    <p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></strong> current context data</p>\n    <h3>getContext</h3>\n    <p>Returns the context object. It is an alias function for getEventData().</p>\n    <p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></strong> current context data</p>\n    <h3>getNodeParams</h3>\n    <p>\n      Returns the node parameters of the active URL.\n      Node parameters are defined like URL query parameters but with a specific prefix allowing Luigi to pass them to the micro frontend view. The default prefix is <strong>~</strong> and you can use it in the following way: <code>https://my.luigi.app/home/products?~sort=asc~page=3</code>.\n    </p>\n    <blockquote>\n      <p><strong>NOTE:</strong> some special characters (<code>&#x3C;</code>, <code>></code>, <code>\"</code>, <code>'</code>, <code>/</code>) in node parameters are HTML-encoded.</p>\n    </blockquote>\n    <p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></strong> node parameters, where the object property name is the node parameter name without the prefix, and its value is the value of the node parameter. For example <code>{sort: 'asc', page: 3}</code></p>\n    <h3>getPathParams</h3>\n    <p>\n      Returns the dynamic path parameters of the active URL.\n      Path parameters are defined by navigation nodes with a dynamic <strong>pathSegment</strong> value starting with <strong>:</strong>, such as <strong>productId</strong>.\n      All path parameters in the current navigation path (as defined by the active URL) are returned.\n    </p>\n    <blockquote>\n      <p><strong>NOTE:</strong> some special characters (<code>&#x3C;</code>, <code>></code>, <code>\"</code>, <code>'</code>, <code>/</code>) in path parameters are HTML-encoded.</p>\n    </blockquote>\n    <p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></strong> path parameters, where the object property name is the path parameter name without the prefix, and its value is the actual value of the path parameter. For example <code>{productId: 1234, ...}</code></p>\n    <h3>getClientPermissions</h3>\n    <p>Returns the current client permissions as specified in the navigation node or an empty object. For details, see <a href=\"navigation-parameters-reference.md\">Node parameters</a>.</p>\n    <p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></strong> client permissions as specified in the navigation node.</p>\n    <h3>sendCustomMessage</h3>\n    <p>Sends a custom message to the Luigi Core application.</p>\n    <h4>Parameters</h4>\n    <ul>\n      <li><code>message</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></strong> an object containing data to be sent to the Luigi Core to process it further. This object is set as an input parameter of the custom message listener on the Luigi Core side.\n        <ul>\n          <li><code>message.id</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> a string containing the message id</li>\n          <li><code>message.MY_DATA_FIELD</code> <strong>any</strong> any other message data field</li>\n        </ul>\n      </li>\n    </ul>\n    <h4>Examples</h4>\n    <pre><code class=\"language-javascript\">import LuigiClient from '@kyma-project/luigi-client';\nLuigiClient.sendCustomMessage({id: 'environment.created', production: false})\n</code></pre>\n    <p><strong>Meta</strong></p>\n    <ul>\n      <li><strong>since</strong>: 0.6.2</li>\n    </ul>\n    <h2>Lifecycle~initListenerCallback</h2>\n    <p>Callback of the addInitListener</p>\n    <p>Type: <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\">Function</a></p>\n    <h3>Parameters</h3>\n    <ul>\n      <li><code>context</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></strong> current context data</li>\n      <li><code>origin</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> Luigi Core URL</li>\n    </ul>\n    <h2>Lifecycle~customMessageListenerCallback</h2>\n    <p>Callback of the customMessageListener</p>\n    <p>Type: <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\">Function</a></p>\n    <h3>Parameters</h3>\n    <ul>\n      <li><code>customMessage</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></strong> custom message object\n        <ul>\n          <li><code>customMessage.id</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> message id</li>\n          <li><code>customMessage.MY_DATA_FIELD</code> <strong>any</strong> any other message data field</li>\n        </ul>\n      </li>\n      <li><code>listenerId</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> custom message listener id to be used for unsubscription</li>\n    </ul>\n    <h2>linkManager</h2>\n    <p>The Link Manager allows you to navigate to another route. Use it instead of an internal router to:</p>\n    <ul>\n      <li>Provide routing inside micro frontends.</li>\n      <li>Reflect the route.</li>\n      <li>Keep the navigation state in Luigi.</li>\n    </ul>\n    <h3>navigate</h3>\n    <p>Navigates to the given path in the application hosted by Luigi. It contains either a full absolute path or a relative path without a leading slash that uses the active route as a base. This is the standard navigation.</p>\n    <h4>Parameters</h4>\n    <ul>\n      <li><code>path</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> path to be navigated to</li>\n      <li><code>sessionId</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> current Luigi <strong>sessionId</strong></li>\n      <li><code>preserveView</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">boolean</a></strong> preserve a view by setting it to <code>true</code>. It keeps the current view opened in the background and opens the new route in a new frame. Use the <a href=\"#goBack\">goBack()</a> function to navigate back. You can use this feature across different levels. Preserved views are discarded as soon as you use the standard <a href=\"#navigate\">navigate()</a> function instead of <a href=\"#goBack\">goBack()</a></li>\n      <li><code>modalSettings</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></strong> opens a view in a modal. Use these settings to configure the modal's title and size\n        <ul>\n          <li><code>modalSettings.title</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> modal title. By default, it is the node label. If there is no label, it is left empty</li>\n          <li><code>modalSettings.size</code> <strong>(<code>\"l\"</code> | <code>\"m\"</code> | <code>\"s\"</code>)</strong> size of the modal (optional, default <code>\"l\"</code>)</li>\n        </ul>\n      </li>\n      <li><code>splitViewSettings</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></strong> opens a view in a split view. Use these settings to configure the split view's behaviour\n        <ul>\n          <li><code>splitViewSettings.title</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> split view title. By default, it is the node label. If there is no label, it is left empty</li>\n          <li><code>splitViewSettings.size</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\">number</a></strong> height of the split view in percent (optional, default <code>40</code>)</li>\n          <li><code>splitViewSettings.collapsed</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">boolean</a></strong> creates split view but leaves it closed initially (optional, default <code>false</code>)</li>\n        </ul>\n      </li>\n    </ul>\n    <h4>Examples</h4>\n    <pre><code class=\"language-javascript\">LuigiClient.linkManager().navigate('/overview')\nLuigiClient.linkManager().navigate('users/groups/stakeholders')\nLuigiClient.linkManager().navigate('/settings', null, true) // preserve view\n</code></pre>\n    <h3>openAsModal</h3>\n    <p>Opens a view in a modal. You can specify the modal's title and size. If you don't specify the title, it is the node label. If there is no node label, the title remains empty. The default size of the modal is <code>l</code>, which means 80%. You can also use <code>m</code> (60%) and <code>s</code> (40%) to set the modal size. Optionally, use it in combination with any of the navigation functions.</p>\n    <h4>Parameters</h4>\n    <ul>\n      <li><code>path</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> navigation path</li>\n      <li><code>modalSettings</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a>?</strong> opens a view in a modal. Use these settings to configure the modal's title and size\n        <ul>\n          <li><code>modalSettings.title</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> modal title. By default, it is the node label. If there is no label, it is left empty</li>\n          <li><code>modalSettings.size</code> <strong>(<code>\"l\"</code> | <code>\"m\"</code> | <code>\"s\"</code>)</strong> size of the modal (optional, default <code>\"l\"</code>)</li>\n        </ul>\n      </li>\n    </ul>\n    <h4>Examples</h4>\n    <pre><code class=\"language-javascript\">LuigiClient.linkManager().openAsModal('projects/pr1/users', {title:'Users', size:'m'});\n</code></pre>\n    <h3>openAsSplitView</h3>\n    <ul>\n      <li><strong>See: <a href=\"#splitview\">splitView</a> for further documentation about the returned instance</strong></li>\n    </ul>\n    <p>Opens a view in a split view. You can specify the split view's title and size. If you don't specify the title, it is the node label. If there is no node label, the title remains empty. The default size of the split view is <code>40</code>, which means 40% height of the split view.</p>\n    <h4>Parameters</h4>\n    <ul>\n      <li><code>path</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> navigation path</li>\n      <li><code>splitViewSettings</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></strong> opens a view in a split view. Use these settings to configure the split view's behaviour (optional, default <code>{}</code>)\n        <ul>\n          <li><code>splitViewSettings.title</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> split view title. By default, it is the node label. If there is no label, it is left empty</li>\n          <li><code>splitViewSettings.size</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\">number</a></strong> height of the split view in percent (optional, default <code>40</code>)</li>\n          <li><code>splitViewSettings.collapsed</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">boolean</a></strong> opens split view in collapsed state (optional, default <code>false</code>)</li>\n        </ul>\n      </li>\n    </ul>\n    <h4>Examples</h4>\n    <pre><code class=\"language-javascript\">const splitViewHandle = LuigiClient.linkManager().openAsSplitView('projects/pr1/logs', {title: 'Logs', size: 40, collapsed: true});\n</code></pre>\n    <p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></strong> instance of the SplitView. It provides Event listeners and you can use the available functions to control its behavior.</p>\n    <p><strong>Meta</strong></p>\n    <ul>\n      <li><strong>since</strong>: 0.6.0</li>\n    </ul>\n    <h3>fromContext</h3>\n    <p>Sets the current navigation context to that of a specific parent node which has the <a href=\"navigation-configuration.md\">navigationContext</a> field declared in the navigation configuration. This navigation context is then used by the <code>navigate</code> function.</p>\n    <h4>Parameters</h4>\n    <ul>\n      <li><code>navigationContext</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong></li>\n    </ul>\n    <h4>Examples</h4>\n    <pre><code class=\"language-javascript\">LuigiClient.linkManager().fromContext('project').navigate('/settings')\n</code></pre>\n    <p>Returns <strong><a href=\"#linkmanager\">linkManager</a></strong> link manager instance</p>\n    <h3>fromClosestContext</h3>\n    <p>Sets the current navigation context which is then used by the <code>navigate</code> function. This has to be a parent navigation context, it is not possible to use the child navigation contexts.</p>\n    <h4>Examples</h4>\n    <pre><code class=\"language-javascript\">LuigiClient.linkManager().fromClosestContext().navigate('/users/groups/stakeholders')\n</code></pre>\n    <p>Returns <strong><a href=\"#linkmanager\">linkManager</a></strong> link manager instance</p>\n    <h3>withParams</h3>\n    <p>Sends node parameters to the route. The parameters are used by the <code>navigate</code> function. Use it optionally in combination with any of the navigation functions and receive it as part of the context object in Luigi Client.</p>\n    <h4>Parameters</h4>\n    <ul>\n      <li><code>nodeParams</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></strong></li>\n    </ul>\n    <h4>Examples</h4>\n    <pre><code class=\"language-javascript\">LuigiClient.linkManager().withParams({foo: \"bar\"}).navigate(\"path\")\n\n// Can be chained with context setting functions such as:\nLuigiClient.linkManager().fromContext(\"currentTeam\").withParams({foo: \"bar\"}).navigate(\"path\")\n</code></pre>\n    <p>Returns <strong><a href=\"#linkmanager\">linkManager</a></strong> link manager instance</p>\n    <h3>pathExists</h3>\n    <p>Checks if the path you can navigate to exists in the main application. For example, you can use this helper method conditionally to display a DOM element like a button.</p>\n    <h4>Parameters</h4>\n    <ul>\n      <li><code>path</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> path which existence you want to check</li>\n    </ul>\n    <h4>Examples</h4>\n    <pre><code class=\"language-javascript\">let pathExists;\n LuigiClient\n .linkManager()\n .pathExists('projects/pr2')\n .then(\n   (pathExists) => {  }\n );\n</code></pre>\n    <p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise\">promise</a></strong> a promise which resolves to a Boolean variable specifying whether the path exists or not</p>\n    <h3>hasBack</h3>\n    <p>Checks if there is one or more preserved views. You can use it to show a <strong>back</strong> button.</p>\n    <p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">boolean</a></strong> indicating if there is a preserved view you can return to</p>\n    <h3>goBack</h3>\n    <p>Discards the active view and navigates back to the last visited view. Works with preserved views, and also acts as the substitute of the browser <strong>back</strong> button. <strong>goBackContext</strong> is only available when using preserved views.</p>\n    <h4>Parameters</h4>\n    <ul>\n      <li><code>goBackValue</code> <strong>any</strong> data that is passed in the <strong>goBackContext</strong> field to the last visited view when using preserved views.</li>\n    </ul>\n    <h4>Examples</h4>\n    <pre><code class=\"language-javascript\">LuigiClient.linkManager().goBack({ foo: 'bar' });\nLuigiClient.linkManager().goBack(true);\n</code></pre>\n    <h2>splitView</h2>\n    <p>\n      Split view\n      Allows to open a micro frontend in a split screen in the lower part of the content area. Open it by calling <code>const splitViewHandle = LuigiClient.linkManager().openAsSplitView</code>.\n      At a given time, you can open only one split view. It closes automatically when you navigate to a different route.\n      When you call <code>handle.collapse()</code>, the split view gets destroyed. It recreates when you use <code>handle.expand()</code>.\n      <code>openAsSplitView</code> returns an instance of the split view handle. The functions, actions, and event handlers listed below allow you to control and manage the split view.\n    </p>\n    <p><strong>Meta</strong></p>\n    <ul>\n      <li><strong>since</strong>: 0.6.0</li>\n    </ul>\n    <h3>collapse</h3>\n    <p>Collapses the split view</p>\n    <h4>Examples</h4>\n    <pre><code class=\"language-javascript\">splitViewHandle.collapse();\n</code></pre>\n    <p><strong>Meta</strong></p>\n    <ul>\n      <li><strong>since</strong>: 0.6.0</li>\n    </ul>\n    <h3>expand</h3>\n    <p>Expands the split view</p>\n    <h4>Examples</h4>\n    <pre><code class=\"language-javascript\">splitViewHandle.expand();\n</code></pre>\n    <p><strong>Meta</strong></p>\n    <ul>\n      <li><strong>since</strong>: 0.6.0</li>\n    </ul>\n    <h3>close</h3>\n    <p>Closes and destroys the split view</p>\n    <h4>Examples</h4>\n    <pre><code class=\"language-javascript\">splitViewHandle.close();\n</code></pre>\n    <p><strong>Meta</strong></p>\n    <ul>\n      <li><strong>since</strong>: 0.6.0</li>\n    </ul>\n    <h3>setSize</h3>\n    <p>Sets the height of the split view</p>\n    <h4>Parameters</h4>\n    <ul>\n      <li><code>value</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\">number</a></strong> lower height in percent</li>\n    </ul>\n    <h4>Examples</h4>\n    <pre><code class=\"language-javascript\">splitViewHandle.setSize(60);\n</code></pre>\n    <p><strong>Meta</strong></p>\n    <ul>\n      <li><strong>since</strong>: 0.6.0</li>\n    </ul>\n    <h3>on</h3>\n    <p>Registers a listener for split view events</p>\n    <h4>Parameters</h4>\n    <ul>\n      <li><code>name</code> <strong>(<code>\"expand\"</code> | <code>\"collapse\"</code> | <code>\"resize\"</code> | <code>\"close\"</code>)</strong> event name</li>\n      <li><code>callback</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\">function</a></strong> gets called when this event gets triggered by Luigi</li>\n    </ul>\n    <h4>Examples</h4>\n    <pre><code class=\"language-javascript\">const listenerId = splitViewHandle.on('expand', () => {});\nconst listenerId = splitViewHandle.on('collapse', () => {});\nconst listenerId = splitViewHandle.on('resize', () => {});\nconst listenerId = splitViewHandle.on('close', () => {});\n*\n</code></pre>\n    <p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> listener id</p>\n    <p><strong>Meta</strong></p>\n    <ul>\n      <li><strong>since</strong>: 0.6.0</li>\n    </ul>\n    <h3>removeEventListener</h3>\n    <p>Unregisters a split view listener</p>\n    <h4>Parameters</h4>\n    <ul>\n      <li><code>id</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> listener id</li>\n    </ul>\n    <h4>Examples</h4>\n    <pre><code class=\"language-javascript\">splitViewHandle.removeEventListener(listenerId);\n</code></pre>\n    <p><strong>Meta</strong></p>\n    <ul>\n      <li><strong>since</strong>: 0.6.0</li>\n    </ul>\n    <h3>exists</h3>\n    <p>Gets the split view status</p>\n    <h4>Examples</h4>\n    <pre><code class=\"language-javascript\">splitViewHandle.exists();\n</code></pre>\n    <p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">boolean</a></strong> true if a split view is loaded</p>\n    <p><strong>Meta</strong></p>\n    <ul>\n      <li><strong>since</strong>: 0.6.0</li>\n    </ul>\n    <h3>getSize</h3>\n    <p>Reads the size of the split view</p>\n    <h4>Examples</h4>\n    <pre><code class=\"language-javascript\">splitViewHandle.getSize();\n</code></pre>\n    <p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\">number</a></strong> height in percent</p>\n    <p><strong>Meta</strong></p>\n    <ul>\n      <li><strong>since</strong>: 0.6.0</li>\n    </ul>\n    <h3>isCollapsed</h3>\n    <p>Reads the collapse status</p>\n    <h4>Examples</h4>\n    <pre><code class=\"language-javascript\">splitViewHandle.isCollapsed();\n</code></pre>\n    <p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">boolean</a></strong> true if the split view is currently collapsed</p>\n    <p><strong>Meta</strong></p>\n    <ul>\n      <li><strong>since</strong>: 0.6.0</li>\n    </ul>\n    <h3>isExpanded</h3>\n    <p>Reads the expand status</p>\n    <h4>Examples</h4>\n    <pre><code class=\"language-javascript\">splitViewHandle.isExpanded();\n</code></pre>\n    <p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">boolean</a></strong> true if the split view is currently expanded</p>\n    <p><strong>Meta</strong></p>\n    <ul>\n      <li><strong>since</strong>: 0.6.0</li>\n    </ul>\n    <h2>uxManager</h2>\n    <p>Use the UX Manager to manage the appearance features in Luigi.</p>\n    <h3>showLoadingIndicator</h3>\n    <p>Adds a backdrop with a loading indicator for the micro frontend frame. This overrides the <a href=\"navigation-configuration.md#nodes\">loadingIndicator.enabled</a> setting.</p>\n    <h3>hideLoadingIndicator</h3>\n    <p>Removes the loading indicator. Use it after calling <a href=\"#showLoadingIndicator\">showLoadingIndicator()</a> or to hide the indicator when you use the <a href=\"navigation-configuration.md#nodes\">loadingIndicator.hideAutomatically: false</a> node configuration.</p>\n    <h3>addBackdrop</h3>\n    <p>Adds a backdrop to block the top and side navigation. It is based on the Fundamental UI Modal, which you can use in your micro frontend to achieve the same behavior.</p>\n    <h3>removeBackdrop</h3>\n    <p>Removes the backdrop.</p>\n    <h3>setDirtyStatus</h3>\n    <p>This method informs the main application that there are unsaved changes in the current view in the iframe. For example, that can be a view with form fields which were edited but not submitted.</p>\n    <h4>Parameters</h4>\n    <ul>\n      <li><code>isDirty</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">boolean</a></strong> indicates if there are any unsaved changes on the current page or in the component</li>\n    </ul>\n    <h3>showConfirmationModal</h3>\n    <p>Shows a confirmation modal.</p>\n    <h4>Parameters</h4>\n    <ul>\n      <li><code>settings</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></strong> the settings of the confirmation modal. If you don't provide any value for any of the fields, a default value is used\n        <ul>\n          <li><code>settings.header</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> the content of the modal header (optional, default <code>\"Confirmation\"</code>)</li>\n          <li><code>settings.body</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> the content of the modal body (optional, default <code>\"Are you sure you want to do this?\"</code>)</li>\n          <li><code>settings.buttonConfirm</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> the label for the modal confirm button (optional, default <code>\"Yes\"</code>)</li>\n          <li><code>settings.buttonDismiss</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> the label for the modal dismiss button (optional, default <code>\"No\"</code>)</li>\n        </ul>\n      </li>\n    </ul>\n    <p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise\">promise</a></strong> which is resolved when accepting the confirmation modal and rejected when dismissing it</p>\n    <h3>showAlert</h3>\n    <p>Shows an alert.</p>\n    <h4>Parameters</h4>\n    <ul>\n      <li><code>settings</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></strong> the settings for the alert\n        <ul>\n          <li><code>settings.text</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> the content of the alert. To add a link to the content, you have to set up the link in the <code>links</code> object. The key(s) in the <code>links</code> object must be used in the text to reference the links, wrapped in curly brackets with no spaces. If you don't specify any text, the alert is not displayed</li>\n          <li><code>settings.type</code> <strong>(<code>\"info\"</code> | <code>\"success\"</code> | <code>\"warning\"</code> | <code>\"error\"</code>)</strong> sets the type of alert</li>\n          <li><code>settings.links</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></strong> provides links data\n            <ul>\n              <li><code>settings.links.LINK_KEY</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></strong> object containing the data for a particular link. To properly render the link in the alert message refer to the description of the <strong>settings.text</strong> parameter\n                <ul>\n                  <li><code>settings.links.LINK_KEY.text</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> text which replaces the link identifier in the alert content</li>\n                  <li><code>settings.links.LINK_KEY.url</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> url to navigate when you click the link. Currently, only internal links are supported in the form of relative or absolute paths.</li>\n                </ul>\n              </li>\n            </ul>\n          </li>\n          <li><code>settings.closeAfter</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\">number</a></strong> (optional) time in milliseconds that tells Luigi when to close the Alert automatically. If not provided, the Alert will stay on until closed manually. It has to be greater than <code>100</code>.</li>\n        </ul>\n      </li>\n    </ul>\n    <h4>Examples</h4>\n    <pre><code class=\"language-javascript\">import LuigiClient from '@kyma-project/luigi-client';\nconst settings = {\n text: Ut enim ad minim veniam, {goToHome} quis nostrud exercitation ullamco {relativePath} laboris nisi ut aliquip ex ea commodo consequat.\n   Duis aute irure dolor {goToOtherProject},\n type: 'info',\n links: {\n   goToHome: { text: 'homepage', url: '/overview' },\n   goToOtherProject: { text: 'other project', url: '/projects/pr2' },\n   relativePath: { text: 'relative hide side nav', url: 'hideSideNav' }\n },\ncloseAfter: 3000\n}\nLuigiClient\n .uxManager()\n .showAlert(settings)\n .then(() => {\n    // Logic to execute when the alert is dismissed\n});\n</code></pre>\n    <p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise\">promise</a></strong> which is resolved when the alert is dismissed.</p>\n    <h3>getCurrentLocale</h3>\n    <p>Gets the current locale.</p>\n    <p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> current locale</p>\n    <h3>setCurrentLocale</h3>\n    <p>Sets current locale to the specified one.</p>\n    <p><strong>NOTE:</strong> this must be explicitly allowed on the navigation node level by setting <code>clientPermissions.changeCurrentLocale</code> to <code>true</code>. (See <a href=\"navigation-parameters-reference.md\">Node parameters</a>.)</p>\n    <h4>Parameters</h4>\n    <ul>\n      <li><code>locale</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> locale to be set as the current locale</li>\n    </ul>\n    <h3>isSplitView</h3>\n    <p>Checks if the current micro frontend is displayed inside a split view</p>\n    <p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">boolean</a></strong> indicating if it is loaded inside a split view</p>\n    <p><strong>Meta</strong></p>\n    <ul>\n      <li><strong>since</strong>: 0.6.0</li>\n    </ul>\n    <h3>isModal</h3>\n    <p>Checks if the current micro frontend is displayed inside a modal</p>\n    <p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">boolean</a></strong> indicating if it is loaded inside a modal</p>\n    <p><strong>Meta</strong></p>\n    <ul>\n      <li><strong>since</strong>: 0.6.0</li>\n    </ul>\n  </body>\n</html>\n"},{"name":"luigi-core-api.md","shortName":"luigi-core-api","contents":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h1>Luigi Core API</h1>\n    <h2>Luigi Config</h2><!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n    <h3>Configuration</h3>\n    <h4>setConfig</h4>\n    <p>Sets the configuration for Luigi initially. Can also be called at a later point in time again to update the configuration.</p>\n    <h5>Parameters</h5>\n    <ul>\n      <li><code>configInput</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></strong> the Luigi Core configuration object</li>\n    </ul>\n    <h5>Examples</h5>\n    <pre><code class=\"language-javascript\">Luigi.setConfig({\n  navigation: {\n    nodes: () => [\n      {\n        pathSegment: 'home',\n        label: 'Home',\n        children: [\n          {\n            pathSegment: 'hello',\n            label: 'Hello Luigi!',\n            viewUrl: '/assets/basicexternal.html'\n          }\n        ]\n      }\n    ]\n  },\n  routing: {\n    useHashRouting: true\n  }\n})\n</code></pre>\n    <h4>getConfig</h4>\n    <p>Returns the current active configuration</p>\n    <h5>Examples</h5>\n    <pre><code class=\"language-javascript\">Luigi.getConfig()\n</code></pre>\n    <p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></strong> configuration object</p>\n    <h4>configChanged</h4>\n    <p>Tells Luigi that the configuration has been changed. Luigi will update the application or parts of it based on the specified scope.</p>\n    <h5>Parameters</h5>\n    <ul>\n      <li><code>scope</code> <strong>...<a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> one or more scope selectors specifying what parts of the configuration were changed. If no scope selector is provided, the whole configuration is considered changed.\n        <p>The supported scope selectors are:</p>\n        <p></p>\n        <ul>\n          <li><code>navigation</code>: the navigation part of the configuration was changed. This includes navigation nodes, the context switcher, the product switcher and the profile menu.</li>\n          <li><code>navigation.nodes</code>: navigation nodes were changed.</li>\n          <li><code>navigation.contextSwitcher</code>: context switcher related data were changed.</li>\n          <li><code>navigation.productSwitcher</code>: product switcher related data were changed.</li>\n          <li><code>navigation.profile</code>: profile menu was changed.</li>\n          <li><code>settings</code>: settings were changed.</li>\n          <li><code>settings.header</code>: header settings (title, icon) were changed.</li>\n          <li><code>settings.footer</code>: left navigation footer settings were changed.</li>\n        </ul>\n      </li>\n    </ul>\n    <h4>getConfigValue</h4>\n    <p>Gets value of the given property on Luigi config object. Target can be a value or a synchronous function.</p>\n    <h5>Parameters</h5>\n    <ul>\n      <li><code>property</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> the object traversal path</li>\n    </ul>\n    <h5>Examples</h5>\n    <pre><code class=\"language-javascript\">Luigi.getConfigValue('auth.use')\nLuigi.getConfigValue('settings.sideNavFooterText')\n</code></pre>\n    <h4>getConfigBooleanValue</h4>\n    <p>\n      Gets boolean value of the given property on Luigi config object.\n      Function return true if the property value is equal true or 'true'. Otherwise the function returns false.\n    </p>\n    <h5>Parameters</h5>\n    <ul>\n      <li><code>property</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> the object traversal path</li>\n    </ul>\n    <h5>Examples</h5>\n    <pre><code class=\"language-javascript\">Luigi.getConfigBooleanValue('settings.hideNavigation')\n</code></pre>\n    <h4>getConfigValueAsync</h4>\n    <p>\n      Gets value of the given property on the Luigi config object.\n      If the value is a Function it is called (with the given parameters) and the result of that call is the value.\n      If the value is not a Promise it is wrapped to a Promise so that the returned value is definitely a Promise.\n    </p>\n    <h5>Parameters</h5>\n    <ul>\n      <li><code>property</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> the object traversal path</li>\n      <li><code>parameters</code> <strong>any</strong> optional parameters that are used if the target is a function</li>\n    </ul>\n    <h5>Examples</h5>\n    <pre><code class=\"language-javascript\">Luigi.getConfigValueAsync('navigation.nodes')\nLuigi.getConfigValueAsync('navigation.profile.items')\nLuigi.getConfigValueAsync('navigation.contextSwitcher.options')\n</code></pre>\n    <h4>isAuthorizationEnabled</h4>\n    <p>Detects if authorization is enabled via configuration.</p>\n    <p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">boolean</a></strong> returns true if authorization is enabled. Otherwise returns false.</p>\n    <p><strong>Meta</strong></p>\n    <ul>\n      <li><strong>deprecated</strong>: now located in Luigi.auth() instead of Luigi</li>\n    </ul>\n    <h2>Luigi.elements()</h2><!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n    <h3>Elements</h3>\n    <p>Use these functions to get DOM elements.</p>\n    <h4>getLuigiContainer</h4>\n    <p>Returns the container of the Luigi content.</p>\n    <h5>Examples</h5>\n    <pre><code class=\"language-javascript\">Luigi.elements().getLuigiContainer();\n</code></pre>\n    <p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/HTML/Element\">HTMLElement</a></strong> the DOM element that wraps the Luigi content.</p>\n    <p><strong>Meta</strong></p>\n    <ul>\n      <li><strong>since</strong>: 0.6.0</li>\n    </ul>\n    <h4>getShellbar</h4>\n    <p>Returns the shellbar component.</p>\n    <h5>Examples</h5>\n    <pre><code class=\"language-javascript\">Luigi.elements().getShellbar();\n</code></pre>\n    <p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/HTML/Element\">HTMLElement</a></strong> the shellbar DOM element.</p>\n    <p><strong>Meta</strong></p>\n    <ul>\n      <li><strong>since</strong>: 0.4.12</li>\n    </ul>\n    <h4>getShellbarActions</h4>\n    <p>Returns the shellbar actions component.</p>\n    <h5>Examples</h5>\n    <pre><code class=\"language-javascript\">Luigi.elements().getShellbarActions();\n</code></pre>\n    <p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/HTML/Element\">HTMLElement</a></strong> the shellbar actions DOM element.</p>\n    <p><strong>Meta</strong></p>\n    <ul>\n      <li><strong>since</strong>: 0.4.12</li>\n    </ul>\n    <h4>getMicrofrontends</h4>\n    <p>Returns a list of all available micro frontends.</p>\n    <h5>Examples</h5>\n    <pre><code class=\"language-javascript\">Luigi.elements().getMicrofrontends();\n</code></pre>\n    <p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a>&#x3C;{id: <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a>, active: <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">boolean</a>, container: <a href=\"https://developer.mozilla.org/docs/Web/HTML/Element\">HTMLElement</a>, type: (<code>\"main\"</code> | <code>\"split-view\"</code> | <code>\"modal\"</code>)}></strong> list of objects defining all micro frontends from the DOM</p>\n    <p><strong>Meta</strong></p>\n    <ul>\n      <li><strong>since</strong>: 0.6.2</li>\n    </ul>\n    <h4>getMicrofrontendIframes</h4>\n    <p>Returns all micro frontend iframes including the iframe from the modal if it exists.</p>\n    <h5>Examples</h5>\n    <pre><code class=\"language-javascript\">Luigi.elements().getMicrofrontendIframes();\n</code></pre>\n    <p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a>&#x3C;<a href=\"https://developer.mozilla.org/docs/Web/HTML/Element\">HTMLElement</a>></strong> an array of all micro frontend iframes from the DOM.</p>\n    <p><strong>Meta</strong></p>\n    <ul>\n      <li><strong>since</strong>: 0.4.12</li>\n    </ul>\n    <h4>getCurrentMicrofrontendIframe</h4>\n    <p>\n      Returns the active micro frontend iframe.\n      If there is a modal, which includes the micro frontend iframe, the function returns this iframe.\n    </p>\n    <h5>Examples</h5>\n    <pre><code class=\"language-javascript\">Luigi.elements().getCurrentMicrofrontendIframe();\n</code></pre>\n    <p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/HTML/Element\">HTMLElement</a></strong> the active micro frontend iframe DOM element.</p>\n    <p><strong>Meta</strong></p>\n    <ul>\n      <li><strong>since</strong>: 0.4.12</li>\n    </ul>\n    <h2>Luigi.auth()</h2><!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n    <h3>Authorization</h3>\n    <p>Authorization helpers</p>\n    <h4>isAuthorizationEnabled</h4>\n    <p>Detects if authorization is enabled via configuration.</p>\n    <h5>Examples</h5>\n    <pre><code class=\"language-javascript\">Luigi.auth().isAuthorizationEnabled();\n</code></pre>\n    <p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">boolean</a></strong> true if authorization is enabled. Otherwise returns false.</p>\n    <h2>Luigi.navigation()</h2><!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n    <h3>LuigiNavigation</h3>\n    <p>Use these functions for navigation-related features.</p>\n    <h4>updateTopNavigation</h4>\n    <p>Refreshes top navigation badge counters by rendering the navigation again.</p>\n    <h5>Examples</h5>\n    <pre><code class=\"language-javascript\">Luigi.navigation().updateTopNavigation();\n</code></pre>\n    <h2>Luigi.i18n()</h2><!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n    <h3>LuigiI18N</h3>\n    <p>Localization-related functions.</p>\n    <h4>getCurrentLocale</h4>\n    <p>Gets the current locale.</p>\n    <p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> current locale</p>\n    <p><strong>Meta</strong></p>\n    <ul>\n      <li><strong>since</strong>: 0.5.3</li>\n    </ul>\n    <h4>setCurrentLocale</h4>\n    <p>Sets current locale to the specified one.</p>\n    <h5>Parameters</h5>\n    <ul>\n      <li><code>locale</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> locale to be set as the current locale</li>\n    </ul>\n    <p><strong>Meta</strong></p>\n    <ul>\n      <li><strong>since</strong>: 0.5.3</li>\n    </ul>\n    <h4>addCurrentLocaleChangeListener</h4>\n    <p>Registers a listener for locale changes.</p>\n    <h5>Parameters</h5>\n    <ul>\n      <li><code>listener</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\">Function</a></strong> function called on every locale change with the new locale as argument</li>\n    </ul>\n    <p>Returns <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\">number</a></strong> listener ID associated with the given listener; use it when removing the listener</p>\n    <p><strong>Meta</strong></p>\n    <ul>\n      <li><strong>since</strong>: 0.5.3</li>\n    </ul>\n    <h4>removeCurrentLocaleChangeListener</h4>\n    <p>Unregisters a listener for locale changes.</p>\n    <h5>Parameters</h5>\n    <ul>\n      <li><code>listenerId</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\">number</a></strong> listener ID associated with the listener to be removed, returned by addCurrentLocaleChangeListener</li>\n    </ul>\n    <p><strong>Meta</strong></p>\n    <ul>\n      <li><strong>since</strong>: 0.5.3</li>\n    </ul>\n    <h4>getTranslation</h4>\n    <p>\n      Gets translated text for the specified key in the current locale or in the specified one.\n      Property values for token replacement in the localization key will be taken from the specified interpolations object.\n    </p>\n    <h5>Parameters</h5>\n    <ul>\n      <li><code>key</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> key to be translated</li>\n      <li><code>interpolations</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></strong> objects with properties that will be used for token replacements in the localization key</li>\n      <li><code>locale</code> <strong>locale</strong> optional locale to get the translation for; default is the current locale</li>\n    </ul>\n    <h2>Luigi.customMessages()</h2><!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n    <h3>CustomMessages</h3>\n    <p>Functions related to custom messages.</p>\n    <h4>sendToAll</h4>\n    <p>Sends a custom message to all opened micro frontends.</p>\n    <h5>Parameters</h5>\n    <ul>\n      <li><code>message</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></strong> an object containing data to be sent to the micro frontend to process it further. This object is set as an input parameter of the custom message listener on the micro frontend side.\n        <ul>\n          <li><code>message.id</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\">string</a></strong> the id of the message</li>\n          <li><code>message.MY_DATA_FIELD</code> <strong>any</strong> any other message data field</li>\n        </ul>\n      </li>\n    </ul>\n    <h5>Examples</h5>\n    <pre><code class=\"language-javascript\">Luigi.customMessages().sendToAll({\n    id: 'myprefix.my-custom-message-for-client',\n    dataField1: 'here goes some data',\n    moreData: 'here goes some more'\n});\n</code></pre>\n    <p><strong>Meta</strong></p>\n    <ul>\n      <li><strong>since</strong>: 0.6.2</li>\n    </ul>\n    <h4>send</h4>\n    <p>\n      Sends a message to specific micro frontend identified with an id.\n      Use Luigi.elements().getMicrofrontends() to get the iframe id.\n    </p>\n    <h5>Parameters</h5>\n    <ul>\n      <li><code>microfrontendId</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\">number</a></strong> the id of the micro frontend</li>\n      <li><code>message</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></strong> an object containing data to be sent to the micro frontend to process it further. This object is set as an input parameter of the custom message listener on the micro frontend side.\n        <ul>\n          <li><code>message.id</code> <strong><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\">number</a></strong> the id of the message</li>\n          <li><code>message.MY_DATA_FIELD</code> <strong>any</strong> any other message data field</li>\n        </ul>\n      </li>\n    </ul>\n    <h5>Examples</h5>\n    <pre><code class=\"language-javascript\">Luigi.customMessages().send(microfrontend.id, {\n    id: 'myprefix.my-custom-message-for-client',\n    dataField1: 'here goes some data',\n    moreData: 'here goes some more'\n});\n</code></pre>\n    <p><strong>Meta</strong></p>\n    <ul>\n      <li><strong>since</strong>: 0.6.2</li>\n    </ul>\n    <h2>Luigi.ux()</h2><!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n    <h3>UX</h3>\n    <p>Functions to use Luigi Core UX features.</p>\n    <h4>hideAppLoadingIndicator</h4>\n    <p>Hides the app loading indicator.</p>\n    <p><strong>Meta</strong></p>\n    <ul>\n      <li><strong>since</strong>: 0.6.4</li>\n    </ul>\n  </body>\n</html>\n"},{"name":"luigi-ux-features.md","shortName":"luigi-ux-features","contents":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h1>Luigi UX features</h1>\n    <h3>Rendering of Luigi application in the DOM</h3>\n    <p>By default, the Luigi content, including the top navigation, the left navigation, and the content iframed area, are rendered in the body tag of your Luigi Core application. As a result, the Luigi content takes the whole space from your browser window.</p>\n    <p>However, you can render the Luigi content in any other HTML container. It can be useful if you want to add a header or a footer on top of the Luigi content. To use this feature, add the <code>luigi-app-root</code> custom HTML attribute to the HTML tag in which you want to render the Luigi content.</p>\n    <blockquote>\n      <p><strong>NOTE:</strong> If you render the Luigi content in a custom container, the container is positioned relatively when you apply your own CSS. Also, set the height of the Luigi custom container either in <strong>px</strong> or <strong>vh</strong>.</p>\n    </blockquote>\n    <h3>Responsive application setup</h3>\n    <p>You can quickly adjust the Luigi application to improve user experience on mobile devices, such as smartphones or tablets. Here are some examples:</p>\n    <ul>\n      <li>Add the following line to your <code>index.html</code> file for the Luigi application to render well on a mobile device:</li>\n    </ul>\n    <pre><code class=\"language-html\">&#x3C;meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1\">\n</code></pre>\n    <ul>\n      <li>Define and apply <a href=\"./general-settings.md\">responsiveNavigation</a> settings to make the left navigation responsive.</li>\n    </ul>\n    <h3>App loading indicator</h3>\n    <p>To show a loading indicator before Luigi Core or your first micro frontend is ready, add a container with the <code>luigi-app-loading-indicator</code> attribute to your <em>index.html</em> body or inside your <a href=\"#rendering-of-luigi-application-in-the-dom\"><code>luigi-app-root</code></a> container.</p>\n    <pre><code class=\"language-html\">&#x3C;div luigi-app-loading-indicator>\n  &#x3C;div class=\"fd-spinner\">\n    &#x3C;div>&#x3C;/div>\n  &#x3C;/div>\n&#x3C;/div>\n</code></pre>\n    <p>By default, the loading indicator is removed after <code>Luigi.setConfig({})</code> has been executed.</p>\n    <p>Alternatively, to keep the loading indicator until the first micro frontend is usable, follow these steps:</p>\n    <ol>\n      <li>Set the app loading indicator parameter <code>hideAutomatically</code> to <code>false</code></li>\n    </ol>\n    <pre><code class=\"language-javascript\">{\n  ...\n  settings: {\n    appLoadingIndicator: {\n      hideAutomatically: false\n    }\n  }\n  ...\n}\n</code></pre>\n    <ol start=\"2\">\n      <li>Call <a href=\"./luigi-core-api.md#hideAppLoadingIndicator\"><code>Luigi.ux().hideAppLoadingIndicator()</code></a> in the Luigi Core once your initial micro frontend has finished loading to remove the loading indicator. You can, for example, use the <a href=\"./communication.md#custom-messages\">custom messages</a> feature to allow the Luigi Client micro frontend to communicate with the Core when this function should be executed.</li>\n    </ol>\n  </body>\n</html>\n"},{"name":"navigation-configuration.md","shortName":"navigation-configuration","contents":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h1>Navigation configuration</h1>\n    <p>Navigation parameters allow you to specify routing configuration, set the appearance of navigation, and define navigation structure.</p>\n    <h2>Navigation elements</h2>\n    <p>The image shows the elements of Luigi navigation:</p>\n    <ol>\n      <li>Top navigation which displays the main navigation path.</li>\n      <li>Side navigation which displays the defined applications.</li>\n      <li>Main content window which renders the micro frontend.</li>\n    </ol>\n    <p>\n      <img src=\"assets/navigation-structure.png\" alt=\"Navigation layout\">\n    </p>\n    <h2>Navigation structure</h2>\n    <p>The navigation structure is a recursive tree-like data structure that defines all possible navigation paths within the application.</p>\n    <blockquote>\n      <p><strong>NOTE:</strong> This document describes the navigation structure along with the options you can use to create it. For a full list of available parameters, see the <a href=\"navigation-parameters-reference.md\">parameter reference</a> document.</p>\n    </blockquote>\n    <p>A navigation path is any existing path in the navigation tree. It connects the following elements together:</p>\n    <ul>\n      <li>The path of the main application, that is, the path in the browser URL. The path is defined in a Luigi navigation node through one of the following parameters, listed in order of precedence: <strong>externalLink</strong>, <strong>link</strong>, and <strong>pathSegment</strong>.</li>\n      <li>The <strong>viewUrl</strong> property of a micro frontend rendered in the content area of the main application.</li>\n    </ul>\n    <p>If you set the <strong>hideSideNav</strong> property to <code>true</code>, the left navigation disappears when you click the affected node. It is set to <code>false</code> by default.</p>\n    <p>If you want to group some navigation nodes into a separate parent node, you can use the <strong>category</strong> property. The grouped navigation nodes are rendered in a dropdown. The <strong>category</strong> property needs a <strong>label</strong> and, optionally, an <strong>icon</strong>.</p>\n    <p>A sample navigation structure looks as follows:</p>\n    <pre><code>{\n  navigation: {\n    nodes: [\n      {\n        pathSegment: 'home',\n        label: 'Home',\n        viewUrl: 'https://my.microfrontend.com/',\n        children: [\n          {\n            link: '/home',\n            label: 'Go back home'\n          },\n          {\n            link: 'projects/pr2/settings',\n            label: 'Go to Project 2 Settings'\n          },\n          {\n            pathSegment: 'settings',\n            label: 'Settings',\n            viewUrl: 'https://my.microfrontend.com/general/settings.html'\n          },\n          {\n            pathSegment: 'projects',\n            label: 'Projects',\n            viewGroup: 'projectsGroup',\n            viewUrl: 'https://my.microfrontend.com/projects/list.html',\n            children: [\n              {\n                pathSegment: 'pr1',\n                label: 'Project one',\n                viewUrl: 'https://my.microfrontend.com/projects/details.html#id=pr1',\n                hideSideNav: true\n              },\n              {\n                pathSegment: 'pr2',\n                label: 'Project two',\n                viewUrl: 'https://my.microfrontend.com/projects/details.html#id=pr2'\n              }\n            ]\n          },\n          {\n            category: {label:'Misc', icon:'miscellaneous'},\n            pathSegment: 'miscellaneous',\n            label: 'Miscellaneous',\n            viewUrl: 'https://my.microfrontend.com/general/miscellaneous.html'\n          },\n          {\n            category:'Misc',\n            pathSegment: 'miscellaneous2',\n            label: 'Miscellaneous2',\n            viewUrl: 'https://my.microfrontend.com/general/miscellaneous2.html'\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre>\n    <h2>Node navigation</h2>\n    <p>When you navigate between nodes that are located in the same domain, Luigi triggers a hash or path change. Then it sends the updated context in order not to fully reload the view for a single-page application based micro frontend. Navigation between domains triggers a full page load in order to comply with cross-domain security concepts.</p>\n    <p>If you start navigating from a child node level, navigate to the specific product route using the <a href=\"luigi-client-api.md\">Luigi Client API</a> as shown in the example:</p>\n    <pre><code>LuigiClient.linkManager().fromContext('project').withParam({sort: 'asc'}).navigate('/products');\n</code></pre>\n    <p>You can also navigate directly from any other node:</p>\n    <pre><code>LuigiClient.linkManager().withParam({sort: 'asc'}).navigate('/something/sample_1/products');\n</code></pre>\n    <h2>Application path</h2>\n    <p>The main application path is built from <strong>pathSegment</strong> values in the navigation path, joined with the <strong>/</strong> character. You can override this setting using either <strong>externalLink</strong> or <strong>link</strong> parameters.</p>\n    <p>The micro frontend view URL is the value of the <strong>viewUrl</strong> property of the last node in the navigation path.</p>\n    <p>The following example shows the structure of different navigation paths. If the URL of the main application is <code>https://luigiexample.com</code>, then:</p>\n    <ul>\n      <li>\n        <p><code>https://luigiexample.com/home/projects/pr1</code> reflects the <code>home/projects/pr1</code> navigation path. It is a valid navigation path as it exists in the defined navigation tree structure. The micro frontend view URL rendered in the content area is <code>https://my.microfrontend.com/projects/details.html#id=pr1</code>.</p>\n      </li>\n      <li>\n        <p><code>https://luigiexample.com/home/maskopatol</code> defines an invalid <code>home/maskopatol</code> navigation path.</p>\n      </li>\n      <li>\n        <p><code>https://luigiexample.com/projects/pr1</code> defines the <code>projects/pr1</code> navigation path. It is not a valid navigation path, since a valid navigation path always starts from the root.</p>\n      </li>\n    </ul>\n    <h2>Path parameters</h2>\n    <p>Use path parameter values to define the <strong>pathSegment</strong> in your configuration. You can either use a static value for your <strong>pathSegment</strong>, or add a colon to this value as in <code>:projectId</code>, to make it act as a parameter. This tells Luigi to accept any value for this <strong>pathSegment</strong> of the main application URL. The value replaces the parameter when it is further processed by the application.</p>\n    <p>A sample structure with a parametrized <strong>pathSegment</strong> is as follows:</p>\n    <pre><code>{\n  navigation: {\n    nodes: [\n      {\n        pathSegment: 'home',\n        label: 'Home',\n        viewUrl: 'https://my.microfrontend.com/',\n        children: [\n          {\n            pathSegment: 'projects',\n            label: 'Projects',\n            viewUrl: 'https://my.microfrontend.com/projects/list.html',\n            children: [\n              {\n                pathSegment: ':projectId',\n                label: 'Project Details',\n                viewUrl: 'https://my.microfrontend.com/projects/details.html#id=:projectId;'\n              }            \n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n\n</code></pre>\n    <p>Use the following options to work with path parameters:</p>\n    <ul>\n      <li>Add the parameters to the <strong>viewUrl</strong> by placing them anywhere in the <strong>viewUrl</strong> value. For example, if the main application URL is <code>https://luigiexample.com/home/projects/pr23</code>, then the <strong>viewUrl</strong> of the micro frontend in the content area is <code>https://my.microfrontend.com/projects/details.html#id=pr23</code>.</li>\n      <li>\n        Use the <a href=\"luigi-client-api.md\">Luigi Client API</a> to access the node parameter values from the micro frontend. Use the <code>LuigiClient.getPathParams()</code> function.\n        For example, to get the value of the sample project parameter, use <code>LuigiClient.getPathParams().projectId</code>.\n      </li>\n      <li>Add a parameter to the context part of your configuration:\n        <pre><code>{\n  pathSegment: ':projectId',\n  label: 'Project Details',\n  viewUrl: 'https://my.microfrontend.com/projects/details.html#id=:projectId;',\n  context: {\n    project: ':projectId'\n  }\n} \n</code></pre>In all cases, the parameter is automatically replaced by the real value.</li>\n    </ul>\n    <h2>Node parameters</h2>\n    <p>\n      You can use node parameters to build the <strong>viewUrl</strong> and pass them to the micro frontend specified in the navigation node selected in the navigation path.\n      You can specify them in the main application URL, similarly to URL query parameters with a specific prefix. The prefix is <code>~</code> by default, but you can reconfigure it using the global <strong>nodeParamPrefix</strong> setting.\n    </p>\n    <p>All parameters without the prefix are not passed to the micro frontend and are consumed by the main application.</p>\n    <p>A sample <strong>viewUrl</strong> <code>https://luigiexample.com/home/projects/pr23?~sorting=asc&#x26;~page=2</code> supports sorting and paging by introducing the <strong>sort</strong> and <strong>page</strong> node parameters.</p>\n    <p>The navigation structure with the project list view using such sample node parameters looks as follows:</p>\n    <pre><code>{\n  navigation: {\n    nodes: [\n      {\n        pathSegment: 'home',\n        label: 'Home',\n        viewUrl: 'https://my.microfrontend.com/',\n        children: [\n          {\n            pathSegment: 'projects',\n            label: 'Projects',\n            viewGroup: 'projectsGroup',\n            viewUrl: 'https://my.microfrontend.com/projects/list.html#pagenr={nodeParams.page};sort={nodeParams.sorting}',\n            children: [\n              {\n                pathSegment: ':projectId',\n                label: 'Project Details',\n                viewUrl: 'https://my.microfrontend.com/projects/details.html#id=:projectId;'\n              }            \n            ]\n          }\n        ]\n      }\n    ]\n  }\n} \n\n</code></pre>\n    <p>Use the following options to work with node parameters:</p>\n    <ul>\n      <li>\n        <p>Build the <strong>viewUrl</strong> by placing them anywhere in the <strong>viewUrl</strong> value using the following syntax: <code>nodeParams.{node param name}</code>. For example, if the main application URL is <code>https://luigiexample.com/home/projects/?~sorting=asc&#x26;~page=2</code> then the <strong>viewUrl</strong> of a micro frontend is <code>https://my.microfrontend.com/projects/list.html#pagenr=2;sort=asc</code>.</p>\n      </li>\n      <li>\n        <p>\n          Use the <a href=\"luigi-client-api.md\">Luigi Client API</a> to access the node parameter values from within the micro frontend. Use the <code>LuigiClient.getNodeParams()</code> function.\n          For example, to get the value of the sorting parameter, use <code>LuigiClient.getNodeParams().sorting</code>.\n        </p>\n      </li>\n    </ul>\n    <h2>Dynamic viewUrl</h2>\n    <p>Use the node parameters and path parameters to build a dynamic <strong>viewUrl</strong>.</p>\n    <p>In this example, the web application URL is <code>https://Luigi.corp/something/sample_1/products?~sort=asc</code>. The micro frontend loads using a different URL, such as <code>https://admin.my.test/project/sample_1/products?sort=asc</code>.</p>\n    <p>When loading, the <strong>viewUrl</strong> uses the following dynamic URL parameters:</p>\n    <ul>\n      <li><code>:projectId = sample_1</code></li>\n      <li><code>sort = asc</code></li>\n    </ul>\n    <pre><code>Luigi.setConfig({\n  routing: {\n    nodeParamPrefix: '~'\n  },\n  navigation: {\n    nodes: [\n      {\n        pathSegment: 'something',\n        label: 'Something',\n        viewUrl: 'https://admin.my.test/project',\n        children: [{\n          navigationContext: 'project',\n          pathSegment: ':projectId',\n          viewUrl: 'https://admin.my.test/project/:projectId',\n          // Optional, you can always call LuigiClient.getPathParams() to get the parameters\n          // context: {\n          //  currentProject: ':projectId'\n          // },\n          children: [\n            {\n              pathSegment: 'products',\n              label: 'Products',\n              viewUrl: 'https://admin.my.test/project/:projectId/products'\n            }\n          ]\n        }\n      }\n    ]\n  }\n});\n</code></pre>\n    <h2>View groups</h2>\n    <p>The view groups feature allows you to override the default iframes management policy. Imagine your application hosts two micro frontend views: <code>http://mysite.com/a#e</code> and <code>http://mysite.com/b#f</code>. Due to hash routing and a different path up to <code>#</code>, they are, by default, rendered in different iframes. However, as they both have the <strong>same origin</strong>, such as<code>mysite.com</code>, and belong to the <strong>same micro frontend</strong> you want to render them in the same iframe. To achieve that, use the view groups feature. Define the <strong>viewGroup</strong> parameter for top navigation nodes. The children nodes will automatically be considered as part of the same view group.</p>\n    <p>Nodes belonging to the same view group are always rendered in their own view group iframe. Nodes not belonging to any view group follow the same-origin iframe rendering policy.</p>\n    <p>The view groups feature also offers out-of-the-box caching. Each time you navigate to another view group, either a new iframe is created or it is reused if already exists. In both cases, the iframe you are navigating from becomes hidden and is available for you to use again. If you navigate back to the first iframe and it should be updated with new data, such when a new entry was added in the second iframe and you want to display it in a table in the first iframe, you must define a <strong>preloadUrl</strong> parameter for a given view in the view group to ensure that the view is refreshed when you navigate back to it.</p>\n    <p>You can also preload view groups. You just need to define which URL you want to preload, and Luigi will preload the view after some user interactions when the browser is most likely to be idle. This option is active by default, but you can deactivate it with a <a href=\"navigation-parameters-reference.md#node-parameters\">configuration flag</a>.</p>\n    <p>For more information on setting caching with view refreshing and preloading for view groups, read <a href=\"navigation-parameters-reference.md#node-parameters\">this document</a>.</p>\n  </body>\n</html>\n"},{"name":"navigation-parameters-reference.md","shortName":"navigation-parameters-reference","contents":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h1>Navigation parameters reference</h1>\n    <p>You can use the listed parameters and functions to configure your navigation structure. The examples show how to use selected options.</p>\n    <h2>Navigation configuration example</h2>\n    <p>This code sample demonstrates a sample structure with the parameters you can use when configuring navigation for Luigi.</p>\n    <pre><code>Luigi.setConfig({\n  routing: {\n    // uses hash-based navigation if set to true\n    useHashRouting: true,\n    nodeParamPrefix: '~',\n    skipRoutingForUrlPatterns: [/access_token=/, /id_token=/]\n  },\n  // navigation structure and settings\n  navigation: {\n    nodeAccessibilityResolver: function (nodeToCheckPermissionFor, parentNode, currentContext) {},\n  viewGroupSettings: {\n    main: {\n      preloadUrl: 'https://my-site.com/index.html#/preload',\n    },\n    projects: {\n      preloadUrl: 'https://my-site.com/projects.html#/preloading',\n    },\n    envs: {\n      preloadUrl: 'https://my-site.com/environments-details.html#/preload-view',\n    }\n  },\n  nodes: [\n    // STATIC navigation node\n    {\n      pathSegment: 'settings',\n      label: 'Settings',\n      viewUrl: 'https://admin.mydomain.com/settings',\n      viewGroup: 'settingsGroup',\n      // optional\n      children: [node, node, node],\n      hideFromNav: false,\n      isolateView: false,\n      icon: 'settings',\n      testId: 'myTestId'\n      category: {\n        label: 'General',\n        testId: 'myTestId',\n        icon: 'general'\n      }, // OR\n      category: 'General'\n    },\n    // DYNAMIC navigation node\n    {\n      navigationContext: 'contextName',\n      pathSegment: ':projectId',\n      testId: 'myTestId',\n      viewUrl: '/some/path/:projectId',\n      context: {\n        projectId: ':projectId'\n      },\n      children: [node, node, node]\n    },\n    // View groups nodes\n    {\n      viewGroup: 'main',\n      pathSegment: 'overview',\n      label: 'Overview',\n      viewUrl: 'https://my-site.com/index.html#/overview'\n    },\n    {\n      viewGroup: 'main',\n      pathSegment: 'preload',\n      viewUrl: 'https://my-site.com/index.html#/preload'\n    },\n    {\n      viewGroup: 'projects',\n      pathSegment: 'projects',\n      label: 'Projects',\n      viewUrl: 'https://my-site.com/projects.html#/list',\n      children: [\n        {\n          pathSegment: 'preloading',\n          viewUrl: 'https://my-site.com/projects.html#/preloading'\n        }\n      ]\n    },\n    {\n      viewGroup: 'envs',\n      pathSegment: 'create-environment',\n      viewUrl: 'https://my-site.com/environments.html#/create',\n      context: {\n        label: 'Create Environment'\n      }\n    },\n    {\n      viewGroup: 'envs',\n      pathSegment: 'environments',\n      viewUrl: 'https://my-site.com/environments-details.html#/list',\n      children: [\n        {\n          pathSegment: 'preload',\n          viewUrl: 'https://my-site.com/environments-details.html#/preload-view'\n        },\n        {\n          pathSegment: 'env1',\n          viewUrl: 'https://my-site.com/environments-details.html#/details/env1'\n        }\n      ]\n    }\n    ],\n    contextSwitcher: {\n      defaultLabel: 'Select Environment ...',\n      testId: 'myTestId',\n      parentNodePath: '/environments',\n      lazyloadOptions: false,\n      fallbackLabelResolver: (id) => (id.toUpperCase()),\n      options: [{label,pathValue}, {label,pathValue}],\n      actions: [{label,link,position,clickHandler?}]\n    },\n    profile: {\n      logout: {\n        label: 'End session'\n        // icon: \"sys-cancel\",\n        testId: 'myTestId',\n      },\n      items: [\n        {\n          icon: '',\n          testId: 'myTestId',\n          label: 'Luigi in Github',\n          externalLink: {\n            url: 'https://github.com/SAP/luigi',\n            sameWindow: false\n          }\n        },\n        {\n          icon: '',\n          label: 'Project 1',\n          link: '/projects/pr1'\n        }\n      ]\n    },\n    productSwitcher: {\n      label: 'My Products',\n      testId: 'myTestId',\n      icon: 'grid',\n      items: [\n        {\n          icon: '',\n          label: 'Luigi in Github',\n          testId: 'myTestId',\n          externalLink: {\n            url: 'https://github.com/SAP/luigi',\n            sameWindow: false\n          }\n        },\n        {\n          icon: '',\n          label: 'Project 1',\n          testId: 'myTestId',\n          link: '/projects/pr1'\n        }\n      ]\n    },\n  }\n});\n</code></pre>\n    <h2>Routing</h2>\n    <p>You can configure the way Luigi tackles routing in your application in the <strong>Routing</strong> section of the configuration file. For example, you can choose the routing strategy to apply in your application as either hash or path location routing.</p>\n    <ul>\n      <li><strong>useHashRouting</strong> defines either hash-based (<code>url.com/#/yourpath</code>) or path-based (<code>url.com/yourpath</code>) routing.</li>\n      <li><strong>nodeParamPrefix</strong> sets the prefix character when using the <code>LuigiClient.linkManager().withParam()</code> function, which provides a way to simply attach query parameters to the view URL for activities such as sorting and filtering. The URL contains the parameters to allow deep linking. If you want to use a different character prefix, define yours here. The default character is <code>~</code>.</li>\n      <li><strong>skipRoutingForUrlPatterns</strong> defines regex patterns to be skipped by the router when listening for path changes. This parameter is used for excluding <strong>redirect_uri</strong> parameters. Default patterns are <code>[/access_token=/, '/id_token=/]</code>.</li>\n      <li><strong>pageNotFoundHandler</strong> is a function defining custom behavior when the 404 (page not found) error occurs. Luigi handles it by default. Leave its body empty if you have an external 404 handling. This function takes the following parameters:\n        <ul>\n          <li><strong>wrongPath</strong>(string): the path that user tried to navigate to</li>\n          <li><strong>wasAnyPathFitted</strong>(bool): it is true if Luigi managed to fit a valid path which means <strong>wrongPath</strong> was only partially wrong. Otherwise it is false.</li>\n        </ul>\n      </li>\n    </ul>\n    <h2>Node navigation parameters</h2>\n    <p>The node navigation parameters are as follows:</p>\n    <ul>\n      <li>\n        <strong>nodeAccessibilityResolver</strong> receives all values defined in the node configuration. It allows you to define a permission checker function that gets executed on every node. If it returns <code>false</code>, Luigi removes the node and its children from the navigation structure.\n        See <a href=\"https://github.com/SAP/luigi/blob/master/core/examples/luigi-sample-angular/src/luigi-config/extended/navigation.js\">angular navigation.js</a> for an example.\n      </li>\n      <li><strong>defaults.isolateView</strong> renders all views in new frames. This setting overrides the same-domain frame reuse. The <strong>defaults.isolateView</strong> is disabled by default, and you can overwrite it using the <strong>isolateView</strong> value on a single node level.</li>\n      <li><strong>preloadViewGroups</strong>(bool) allows deactivating the default preloading of <a href=\"navigation-configuration.md#view-groups\">view groups</a> iframes.</li>\n      <li><strong>viewGroupsSettings</strong> is an object containing key-object pairs, where the key is the view group name as specified in the node parameters, and the object contains key-value pairs. In each key-value pair, the key is the feature name and the value is the actual setting. The following options are supported:\n        <ul>\n          <li><strong>preloadUrl</strong>(string): needs to be an absolute URL for a node from the view group. It is recommended that you use a dedicated small, visually empty view, which imports Luigi Client and is fine with getting an empty context, for example, without an access token. The <strong>preloadUrl</strong> parameter is also required for view group caching in case you need a view group iframe to refresh whenever you navigate back to it.</li>\n        </ul>\n      </li>\n    </ul>\n    <h2>Node parameters</h2>\n    <p>The node parameters are as follows:</p>\n    <ul>\n      <li><strong>pathSegment</strong> specifies the partial URL of the current segment. <strong>pathSegment</strong> must not contain slashes.\n        <ul>\n          <li>A static settings example reflects <code>luigidomain.test/settings</code>.</li>\n          <li>A dynamic settings example, prefixed with a colon, loads on any other value.</li>\n        </ul>\n      </li>\n      <li><strong>link</strong> is a string which refers to an absolute path in the navigation structure or a relative path to a grandchild of the current path. If this parameter is defined, <strong>pathSegment</strong> is ignored.</li>\n      <li><strong>externalLink</strong> is an object which indicates that the node links to an external URL. If this parameter is defined, <strong>pathSegment</strong> and <strong>link</strong> parameters are ignored. It has the following properties:\n        <ul>\n          <li><strong>sameWindow</strong> defines if the external URL is opened in a new or current tab. The default value for this parameter is <code>false</code>.</li>\n          <li><strong>url</strong> is the external URL that the node leads to.</li>\n        </ul>\n      </li>\n      <li><strong>label</strong> contains the display name of the navigation node.</li>\n      <li><strong>testId</strong> is a string where you can define your own custom <code>testId</code>. If there is nothing specified, it is a combination of the node's pathsegment followed by a dash (if pathsegment exists) and the label written as one word and lower case (e.g. <code>pathsegment_label</code> or <code>label</code>).</li>\n      <li><strong>hideFromNav</strong> shows or hides a navigation node. You can still navigate to the node but it does not show up in the top or left pane.</li>\n      <li><strong>viewUrl</strong> contains the URL or path to a view which renders when you click the navigation node. Use either a full URL or a relative path. This value may consist of variables if you have specified a <strong>navigationContext</strong> with a dynamic <strong>pathSegment</strong>. If <strong>viewUrl</strong> is undefined, Luigi activates the child node specified in <strong>defaultChildNode</strong>. When both <strong>viewUrl</strong> and <strong>defaultChildNode</strong> are undefined, Luigi opens the first child of the current node.</li>\n      <li><strong>navigationContext</strong> contains a named node that is mainly for use in combination with a dynamic <strong>pathSegment</strong> to start navigation from a dynamic node using <code>LuigiClient.linkManager().fromContext('contextname')</code>.</li>\n      <li><strong>context</strong> sends the specified object as context to the view. Use this parameter in combination with the dynamic <strong>pathSegment</strong> to receive the context through the context listeners of <strong>Luigi Client</strong>. This is an alternative to using the dynamic value in the <strong>viewUrl</strong>.</li>\n      <li><strong>defaultChildNode</strong> sets the child node that Luigi activates automatically if the current node has no <strong>viewUrl</strong> defined. Provide <strong>pathSegment</strong> of the child node you want to activate as a string.</li>\n      <li><strong>isolateView</strong> renders the view in a new frame when you enter and leave the node. This setting overrides the same-domain frame re-usage. The <strong>isolateView</strong> is disabled by default.</li>\n      <li><strong>viewGroup</strong> allows you to associate nodes to be rendered in the same iframe, as long as they belong to the same origin. The value of this parameter is considered as the view group id. For further explanations, see <a href=\"navigation-configuration.md#view-groups\">this section</a>.</li>\n      <li><strong>keepSelectedForChildren</strong> focuses the navigation on its current hierarchy, omitting the display of children.</li>\n      <li><strong>loadingIndicator.enabled</strong> shows a loading indicator when switching between micro frontends. If you have a fast micro frontend, you can disable this feature to prevent flickering of the loading indicator. This parameter is enabled by default.</li>\n      <li><strong>loadingIndicator.hideAutomatically</strong> disables the automatic hiding of the loading indicator once the micro frontend is loaded. It is only considered if the loading indicator is enabled. It does not apply if the loading indicator is activated manually with the <code>LuigiClient.uxManager().showLoadingIndicator()</code> function. If the loading indicator is enabled and automatic hiding is disabled, use <code>LuigiClient.uxManager().hideLoadingIndicator()</code> to hide it manually in your micro frontend during the startup. This parameter is enabled by default.</li>\n      <li><strong>viewGroup</strong> defines a group of views in the same domain sharing a common security context. This improves performance through reusing the frame. Use <strong>viewGroup</strong> only for the views that use path routing internally.</li>\n      <li><strong>icon</strong> is the name of an icon, without the <code>sap-icon--</code> prefix. Its source may be <a href=\"https://openui5.hana.ondemand.com/1.40.10/iconExplorer.html\">OpenUI</a> or a custom link (relative or absolute) to an image. The icon is displayed next to the node label in the side navigation or instead of the label in the top navigation.</li>\n      <li><strong>hideSideNav</strong> if set to <code>true</code>, the left navigation disappears when you click the affected node. It is set to <code>false</code> by default.</li>\n      <li><strong>badgeCounter</strong> adds a badge with a number and a label to a node. Nodes that are part of a category show a cumulated number of all badges in this category. <strong>badgeCounter</strong> is only available for top navigation items.\n        <ul>\n          <li><strong>label</strong> is the label of the badge.</li>\n          <li>\n            <strong>count</strong> is a function or asynchronous function that returns a number.\n            Gets updated when you click the navigation. Use <code>Luigi.navigation().updateTopNavigation()</code> in Luigi Core or trigger it in Luigi Client by using the custom message feature.\n          </li>\n        </ul>\n      </li>\n      <li><strong>category</strong> defines a group of views separated with a headline and an icon. You should define at least one node in a group should as an Object with <strong>label</strong> and <strong>icon</strong> properties. For all other nodes, you can set <strong>category</strong> as a string with the <code>label</code> value.\n        <ul>\n          <li><strong>label</strong> is a string that represents the title of the category</li>\n          <li><strong>icon</strong> is the name of an icon, without the <code>sap-icon--</code> prefix. Its source may be <a href=\"https://openui5.hana.ondemand.com/1.40.10/iconExplorer.html\">OpenUI</a> or a custom link (relative or absolute) to an image. The icon is displayed next to the node label in the side navigation or instead of the label in the top navigation. In case you accidentally define different icons in a category group, only the first one is used.</li>\n          <li><strong>collapsible</strong> if set to <code>true</code>, category items are hidden at first. To expand them, click the main category node.</li>\n          <li><strong>testId</strong> is a string where you can define your own custom <code>testId</code>. If nothing is specified, it is the node's label written as one word and lower case (e.g. <code>label</code>).</li>\n        </ul>\n      </li>\n      <li><strong>openNodeInModal</strong> configures the settings of the view which opens in a modal. You can specify the modal's title and size. If you don't specify the title, the node label is used. If there is no node label, the title remains empty. The default size of the modal is <code>l</code>, which means 80%. You can also use <code>m</code> (60%) and <code>s</code> (40%) to set the modal size.<br>Optionally you can set the <strong>openNodeInModal</strong> property to <code>true</code> to use default title and size.\n        <ul>\n          <li><strong>title</strong> modal title. By default, it is the node label. If there is no label, it is left empty</li>\n          <li><strong>size</strong> <strong>(<code>\"l\"</code> | <code>\"m\"</code> | <code>\"s\"</code>)</strong> size of the modal (optional, default <code>\"l\"</code>)</li>\n        </ul>\n      </li>\n      <li><strong>onNodeActivation</strong> is an optional function executed when a request to navigate to the node occurs. As an input parameter, the function receives the node object as described in the configuration. This function can return results synchronously or asynchronously. If the function returns boolean <code>false</code>, the navigation is not triggered, otherwise, navigation renders as usual.</li>\n      <li><strong>clientPermissions.changeCurrentLocale</strong> current locale can be changed from client using the corresponding API if this is set to <code>true</code></li>\n    </ul>\n    <h2>Context switcher</h2>\n    <p>The context switcher is a drop-down list available in the top navigation bar. It allows you to switch between a curated list of navigation elements such as Environments. To do so, add the <strong>contextSwitcher</strong> property to the <strong>navigation</strong> object using the following optional properties:</p>\n    <ul>\n      <li><strong>defaultLabel</strong> specifies the default label that is shown if no context is selected.</li>\n      <li><strong>parentNodePath</strong> specifies the base path, that is prepended to <strong>options[].pathValue</strong>. It must be an absolute path.</li>\n      <li><strong>lazyloadOptions</strong> defines when to fetch <strong>options</strong>. When set to <code>true</code>, loads <strong>options</strong> when you click the context switcher. It doesn't involve any caching. When set to <code>false</code>, loads <strong>options</strong> once the page loads. The default value is <code>true</code>.</li>\n      <li><strong>options</strong> defines the list of context element. Context element properties are:\n        <ul>\n          <li><strong>label</strong> defines the context element label. If not defined, the <strong>pathValue</strong> is passed to <strong>fallbackLabelResolver</strong> to set its value. The default value is <strong>pathValue</strong>, if <strong>fallbackLabelResolver</strong> is not defined.</li>\n          <li><strong>pathValue</strong> defines the context element path that is appended to <strong>parentNodePath</strong> and reflects a <strong>pathSegment</strong>.</li>\n        </ul>\n      </li>\n      <li><strong>actions</strong> defines a list of additional elements that are shown on above or below the context switcher <strong>options</strong>. Each action contains the following parameters:\n        <ul>\n          <li><strong>label</strong> defines the action element label.</li>\n          <li><strong>testId</strong> is a string where you can define your own custom <code>testId</code>. If nothing is specified, it is the node's label written as one word and lower case (e.g. <code>label</code>).</li>\n          <li><strong>position</strong> defines the action element position. Can be <code>top</code> or <code>bottom</code>. The default value is <code>top</code>. This parameter is optional.</li>\n          <li><strong>link</strong> defines an absolute Link to a <strong>node</strong>. This parameter is optional.</li>\n          <li><strong>clickHandler</strong> specifies a function and is executed on click and should return a boolean. If it returns <code>true</code>, <strong>link</strong> is opened afterwards.</li>\n        </ul>\n      </li>\n      <li><strong>fallbackLabelResolver</strong> specifies a function used to fetch the <strong>label</strong> for <strong>options</strong> with no <strong>label</strong> defined. Additionally, it fetches the drop-down label for non-existing <strong>options</strong>.</li>\n    </ul>\n    <h2>Profile</h2>\n    <p>The profile section is a configurable drop-down list available in the top navigation bar. Within the configuration, you can override the logout item content (if authorization is configured) and/or add links to Luigi navigation nodes. To do so, add the <strong>profile</strong> property to the <strong>navigation</strong> object using the following optional properties:</p>\n    <ul>\n      <li><strong>logout</strong> overrides the content of the logout item.\n        <ul>\n          <li><strong>label</strong> overrides the text for the logout item. The default value is \"Sign Out\".</li>\n          <li><strong>testId</strong> is a string where you can define your own custom <code>testId</code>. If nothing is specified, it is the node's label written as one word and lower case (e.g. <code>label</code>).</li>\n          <li><strong>icon</strong> overrides the icon for the logout item. The default value is <a href=\"https://sapui5.hana.ondemand.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html#/overview/SAP-icons/?tag=logout\">SAP UI5 log icon</a>.</li>\n        </ul>\n      </li>\n      <li><strong>items</strong> is an array of objects, each one being a link to a Luigi navigation node or an external URL. An item can have the following parameters:\n        <ul>\n          <li><strong>label</strong> defines the text for the link.</li>\n          <li><strong>testId</strong> is a string where you can define your own custom <code>testId</code>. If nothing is specified, it is the node's label written as one word and lower case (e.g. <code>label</code>).</li>\n          <li><strong>icon</strong> is the name of an icon from the <a href=\"https://openui5.hana.ondemand.com/1.40.10/iconExplorer.html\">OpenUI</a> or a custom link (relative or absolute) to an image displayed next to the label or instead of it.</li>\n          <li><strong>link</strong> defines an absolute link to a <strong>node</strong>.</li>\n          <li>\n            <strong>externalLink</strong> is an object which indicates that the node links to an external URL. If this parameter is defined, the <strong>link</strong> parameter is ignored. It has the following properties:\n            - <strong>sameWindow</strong> defines if the external URL is opened in the current tab or in a new one. The default value for this parameter is <code>false</code>.\n            - <strong>url</strong> is the external URL that the link leads to.\n            <blockquote>\n              <p><strong>NOTE:</strong> Neither authorization nor profile property are configured if the profile section in the top navigation bar is not visible.</p>\n            </blockquote>\n          </li>\n        </ul>\n      </li>\n    </ul>\n    <h2>Product switcher</h2>\n    <p>The product switcher is a pop-up window available in the top navigation bar. It allows you to switch between the navigation elements displayed in the pop-up. To do so, add the <strong>productSwitcher</strong> property to the <strong>navigation</strong> object using the following optional properties:</p>\n    <ul>\n      <li><strong>label</strong> defines the label of the product switcher. It is displayed as a title attribute on hover in the top navigation and as a headline in the mobile pop-up.</li>\n      <li><strong>testId</strong> is a string where you can define your own custom <code>testId</code>. If nothing is specified, it is the node's label written as one word and lower case (e.g. <code>label</code>).</li>\n      <li><strong>icon</strong> is the name of an icon, without the <code>sap-icon--</code> prefix. Its source may be <a href=\"https://openui5.hana.ondemand.com/1.40.10/iconExplorer.html\">OpenUI</a> or a custom link (relative or absolute) to an image. The icon is displayed without label in the top navigation.</li>\n      <li><strong>items</strong> is an array of objects, each one being a link to a Luigi navigation node or an external URL. An item can have the following parameters:\n        <ul>\n          <li><strong>label</strong> defines the text for the link.</li>\n          <li><strong>testId</strong> is a string where you can define your own custom <code>testId</code>. If nothing is specified, it is the node's label written as one word and lower case (e.g. <code>label</code>).</li>\n          <li><strong>icon</strong> is the name of an icon from the <a href=\"https://openui5.hana.ondemand.com/1.40.10/iconExplorer.html\">OpenUI</a> or a custom link (relative or absolute) to an image displayed next to the label or instead of it.</li>\n          <li><strong>link</strong> defines an absolute link to a <strong>node</strong>.</li>\n          <li><strong>externalLink</strong> is an object which indicates that the node links to an external URL. If this parameter is defined, the <strong>link</strong> parameter is ignored. It has the following properties:\n            <ul>\n              <li><strong>sameWindow</strong> defines if the external URL is opened in the current tab or in a new one. The default value for this parameter is <code>false</code>.</li>\n              <li><strong>url</strong> is the external URL that the link leads to.</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </body>\n</html>\n"}]