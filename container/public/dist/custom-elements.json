{
  "schemaVersion": "2.1.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "dist/bundle.js",
      "declarations": [
        {
          "kind": "class",
          "description": "LuigiContainer",
          "name": "LuigiContainer",
          "tagName": "luigi-container",
          "customElement": true,
          "members": [
            {
              "kind": "field",
              "name": "activeFeatureToggleList",
              "type": {
                "text": "Array<string>"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "allowRules",
              "type": {
                "text": "Array<string>"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "anchor",
              "type": {
                "text": "string"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "authData",
              "type": {
                "text": "object"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "clientPermissions",
              "type": {
                "text": "object"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "context",
              "type": {
                "text": "any"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "deferInit",
              "type": {
                "text": "boolean"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "dirtyStatus",
              "type": {
                "text": "boolean"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "documentTitle",
              "type": {
                "text": "string"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "hasBack",
              "type": {
                "text": "boolean"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "noShadow",
              "type": {
                "text": "boolean"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "nodeParams",
              "type": {
                "text": "object"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "pathParams",
              "type": {
                "text": "object"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "sandboxRules",
              "type": {
                "text": "Array<string>"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "searchParams",
              "type": {
                "text": "object"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "skipCookieCheck",
              "type": {
                "text": "string"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "skipInitCheck",
              "type": {
                "text": "boolean"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "theme",
              "type": {
                "text": "string"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "userSettings",
              "type": {
                "text": "object"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "viewurl",
              "type": {
                "text": "string"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "webcomponent",
              "type": {
                "text": "any"
              },
              "default": "undefined"
            },
            {
              "kind": "method",
              "name": "updateContext"
            },
            {
              "kind": "method",
              "name": "sendCustomMessage"
            },
            {
              "kind": "method",
              "name": "closeAlert"
            },
            {
              "kind": "method",
              "name": "notifyAlertClosed"
            },
            {
              "kind": "method",
              "name": "notifyConfirmationModalClosed"
            },
            {
              "kind": "method",
              "name": "updateViewUrl"
            },
            {
              "kind": "method",
              "name": "init"
            }
          ],
          "events": [
            {
              "name": "custom-message",
              "description": "Event fired when the micro frontend sends a custom message. @type {Object} @property {object} data - event data @property {string} id - event ID @example { data: {}, id: 'some-id' }",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "navigation-request",
              "description": "Event fired when a navigation has been requested by the micro frontend.  Payload: {@link https://github.com/SAP/luigi/blob/main/container/typings/constants/event-payloads.ts|NavigationRequestPayload} @type {NavigationRequestPayload} @example { fromClosestContext: false, fromContext: null, fromParent: true, fromVirtualTreeRoot: false, link: '/test/route', nodeParams: {} }",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "show-alert-request",
              "description": "Event fired when the micro frontend requests to show an alert.  Read more about `showAlert` params [here](https://docs.luigi-project.io/docs/luigi-core-api?section=showalert).  Payload: {@link https://github.com/SAP/luigi/blob/main/container/typings/constants/event-payloads.ts|AlertRequestPayload} @type {AlertRequestPayload} @example { text: 'Custom alert message', type: 'info', links: { goToHome: { text: 'Homepage', url: '/overview' }, goToOtherProject: { text: 'Other project', url: '/projects/pr2' }, relativePath: { text: 'Hide side nav', url: 'hideSideNav' }, neverShowItAgain: { text: 'Never show it again', dismissKey: 'neverShowItAgain' } }, closeAfter: 3000 }",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "initialized",
              "description": "Event fired when the micro frontend has been initialized. @type {unspecified} (type is not relevant in this case)",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "add-search-params-request",
              "description": "Event fired when the micro frontend requests the addition of search parameters to the URL.  Payload: {@link https://github.com/SAP/luigi/blob/main/container/typings/constants/event-payloads.ts|ParamsRequestPayload} @type {ParamsRequestPayload} @example { data: {}, keepBrowserHistory: false }",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "add-node-params-request",
              "description": "Event fired when the micro frontend requests the addition of node parameters to the URL.  Payload: {@link https://github.com/SAP/luigi/blob/main/container/typings/constants/event-payloads.ts|ParamsRequestPayload} @type {ParamsRequestPayload} @example { data: {}, keepBrowserHistory: false }",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "show-confirmation-modal-request",
              "description": "Event fired when the micro frontend requests to show a confirmation modal.  Read more about `showConfirmationModal` params [here](https://docs.luigi-project.io/docs/luigi-core-api?section=showconfirmationmodal).  Payload: {@link https://github.com/SAP/luigi/blob/main/container/typings/constants/event-payloads.ts|ConfirmationModalRequestPayload} @type {ConfirmationModalRequestPayload} @example { header: 'Confirmation', body: 'Are you sure you want to do this?', buttonConfirm: 'Yes', buttonDismiss: 'No' }",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "show-loading-indicator-request",
              "description": "Event fired when the micro frontend requests to show a loading indicator. @type {unspecified} (type is not relevant in this case)",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "hide-loading-indicator-request",
              "description": "Event fired when the micro frontend requests to hide the loading indicator. @type {unspecified} (type is not relevant in this case)",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "set-current-locale-request",
              "description": "Event fired when the micro frontend requests to set the current locale. @type {Object.<string, string>} @example { currentLocale: 'en' }",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "set-storage-request",
              "description": "Event fired when the micro frontend requests to modify the local storage. @type {Object.<string, string>} @example { key: 'luigi-version', value: '2.21.0' }",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "runtime-error-handling-request",
              "description": "Event fired when the micro frontend requests to handle errors that might happen during the runtime of the micro frontend. @type {unspecified} (type is not relevant in this case)",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "set-anchor-request",
              "description": "Event fired when the micro frontend requests to set the anchor of the URL. @type {string} @example 'some-anchor'",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "set-third-party-cookies-request",
              "description": "Event fired when the micro frontend requests to set third-party cookies. @type {unspecified} (type is not relevant in this case)",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "get-current-route-request",
              "description": "Event fired when the micro frontend requests the current app route.  Payload: {@link https://github.com/SAP/luigi/blob/main/container/typings/constants/event-payloads.ts|CurrentRouteRequestPayload} @type {CurrentRouteRequestPayload} @example { fromClosestContext: false, fromContext: null, fromParent: true, fromVirtualTreeRoot: false, nodeParams: {} }",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "report-navigation-completed-request",
              "description": "Event fired to report that the micro frontend's navigation has completed. @type {unspecified} (type is not relevant in this case)",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "update-modal-path-data-request",
              "description": "Event fired when the micro frontend requests to update the modal path parameters.  Payload: {@link https://github.com/SAP/luigi/blob/main/container/typings/constants/event-payloads.ts|ModalPathDataRequestPayload} @type {ModalPathDataRequestPayload} @example { fromClosestContext: false, fromContext: null, fromParent: true, fromVirtualTreeRoot: false, history: true, link: '/test/route', modal: { title: 'Some modal' }, nodeParams: {} }",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "update-modal-settings-request",
              "description": "Event fired when the micro frontend requests to update the modal settings.  Read more about `updateModalSettings` params [here](https://docs.luigi-project.io/docs/luigi-client-api?section=updatemodalsettings).  Payload: {@link https://github.com/SAP/luigi/blob/main/container/typings/constants/event-payloads.ts|ModalSettingsRequestPayload} @type {ModalSettingsRequestPayload} @example { addHistoryEntry: true, updatedModalSettings: {} }",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "check-path-exists-request",
              "description": "Event fired when the micro frontend requests to check the validity of a path. @type {Object.<string, string>} @example { link: '/test/route' }",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "set-dirty-status-request",
              "description": "Event fired when the micro frontend requests to set the 'dirty status' which, for example, avoids closing when there are any unsaved changes. @type {Object.<string, boolean>} @example { dirty: true }",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "set-viewgroup-data-request",
              "description": "Event fired when the micro frontend requests to set the view group data. @type {Object.<string, unknown>} @example { vg: 'some data' }",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "go-back-request",
              "description": "Event fired when the micro frontend requests to navigate back. @type {Object.<string, unknown>} @example { ctx: 'some context' }",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "add-backdrop-request",
              "description": "Event fired when the micro frontend requests to display the backdrop. @type {unspecified} (type is not relevant in this case)",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "remove-backdrop-request",
              "description": "Event fired when the micro frontend requests to remove the backdrop. @type {unspecified} (type is not relevant in this case)",
              "type": {
                "text": "Event"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LuigiContainer",
          "declaration": {
            "name": "LuigiContainer",
            "module": "LuigiContainer.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "luigi-container",
          "declaration": {
            "name": "LuigiContainer",
            "module": "LuigiContainer.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/bundle.js",
      "declarations": [
        {
          "kind": "class",
          "description": "LuigiCompoundContainer",
          "name": "LuigiCompoundContainer",
          "tagName": "luigi-compound-container",
          "customElement": true,
          "members": [
            {
              "kind": "field",
              "name": "activeFeatureToggleList",
              "type": {
                "text": "Array<string>"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "anchor",
              "type": {
                "text": "string"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "clientPermissions",
              "type": {
                "text": "object"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "compoundConfig",
              "type": {
                "text": "object"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "context",
              "type": {
                "text": "any"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "deferInit",
              "type": {
                "text": "boolean"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "dirtyStatus",
              "type": {
                "text": "boolean"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "documentTitle",
              "type": {
                "text": "string"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "hasBack",
              "type": {
                "text": "boolean"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "noShadow",
              "type": {
                "text": "boolean"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "nodeParams",
              "type": {
                "text": "object"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "pathParams",
              "type": {
                "text": "object"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "searchParams",
              "type": {
                "text": "object"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "skipInitCheck",
              "type": {
                "text": "boolean"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "theme",
              "type": {
                "text": "string"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "userSettings",
              "type": {
                "text": "object"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "viewurl",
              "type": {
                "text": "string"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "webcomponent",
              "type": {
                "text": "any"
              },
              "default": "undefined"
            },
            {
              "kind": "method",
              "name": "updateContext"
            },
            {
              "kind": "method",
              "name": "notifyAlertClosed"
            },
            {
              "kind": "method",
              "name": "notifyConfirmationModalClosed"
            },
            {
              "kind": "method",
              "name": "init"
            }
          ],
          "events": [
            {
              "name": "custom-message",
              "description": "Event fired when the micro frontend sends a custom message. @type {Object} @property {object} data - event data @property {string} id - event ID @example { data: {}, id: 'some-id' }",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "navigation-request",
              "description": "Event fired when a navigation has been requested by the micro frontend.  Payload: {@link https://github.com/SAP/luigi/blob/main/container/typings/constants/event-payloads.ts|NavigationRequestPayload} @type {NavigationRequestPayload} @example { fromClosestContext: false, fromContext: null, fromParent: true, fromVirtualTreeRoot: false, link: '/test/route', nodeParams: {} }",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "show-alert-request",
              "description": "Event fired when the micro frontend requests to show an alert.  Read more about `showAlert` params [here](https://docs.luigi-project.io/docs/luigi-core-api?section=showalert).  Payload: {@link https://github.com/SAP/luigi/blob/main/container/typings/constants/event-payloads.ts|AlertRequestPayload} @type {AlertRequestPayload} @example { text: 'Custom alert message', type: 'info', links: { goToHome: { text: 'Homepage', url: '/overview' }, goToOtherProject: { text: 'Other project', url: '/projects/pr2' }, relativePath: { text: 'Hide side nav', url: 'hideSideNav' }, neverShowItAgain: { text: 'Never show it again', dismissKey: 'neverShowItAgain' } }, closeAfter: 3000 }",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "initialized",
              "description": "Event fired when the micro frontend has been initialized. @type {unspecified} (type is not relevant in this case)",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "add-search-params-request",
              "description": "Event fired when the micro frontend requests the addition of search parameters to the URL.  Payload: {@link https://github.com/SAP/luigi/blob/main/container/typings/constants/event-payloads.ts|ParamsRequestPayload} @type {ParamsRequestPayload} @example { data: {}, keepBrowserHistory: false }",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "add-node-params-request",
              "description": "Event fired when the micro frontend requests the addition of node parameters to the URL.  Payload: {@link https://github.com/SAP/luigi/blob/main/container/typings/constants/event-payloads.ts|ParamsRequestPayload} @type {ParamsRequestPayload} @example { data: {}, keepBrowserHistory: false }",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "show-confirmation-modal-request",
              "description": "Event fired when the micro frontend requests to show a confirmation modal.  Read more about `showConfirmationModal` params [here](https://docs.luigi-project.io/docs/luigi-core-api?section=showconfirmationmodal).  Payload: {@link https://github.com/SAP/luigi/blob/main/container/typings/constants/event-payloads.ts|ConfirmationModalRequestPayload} @type {ConfirmationModalRequestPayload} @example { header: 'Confirmation', body: 'Are you sure you want to do this?', buttonConfirm: 'Yes', buttonDismiss: 'No' }",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "show-loading-indicator-request",
              "description": "Event fired when the micro frontend requests to show a loading indicator. @type {unspecified} (type is not relevant in this case)",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "hide-loading-indicator-request",
              "description": "Event fired when the micro frontend requests to hide the loading indicator. @type {unspecified} (type is not relevant in this case)",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "set-current-locale-request",
              "description": "Event fired when the micro frontend requests to set the current locale. @type {Object.<string, string>} @example { currentLocale: 'en' }",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "set-storage-request",
              "description": "Event fired when the micro frontend requests to modify the local storage. @type {Object.<string, string>} @example { key: 'luigi-version', value: '2.21.0' }",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "runtime-error-handling-request",
              "description": "Event fired when the micro frontend requests to handle errors that might happen during the runtime of the micro frontend. @type {unspecified} (type is not relevant in this case)",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "set-anchor-request",
              "description": "Event fired when the micro frontend requests to set the anchor of the URL. @type {string} @example 'some-anchor'",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "set-third-party-cookies-request",
              "description": "Event fired when the micro frontend requests to set third-party cookies. @type {unspecified} (type is not relevant in this case)",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "get-current-route-request",
              "description": "Event fired when the micro frontend requests the current app route.  Payload: {@link https://github.com/SAP/luigi/blob/main/container/typings/constants/event-payloads.ts|CurrentRouteRequestPayload} @type {CurrentRouteRequestPayload} @example { fromClosestContext: false, fromContext: null, fromParent: true, fromVirtualTreeRoot: false, nodeParams: {} }",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "report-navigation-completed-request",
              "description": "Event fired to report that the micro frontend's navigation has completed. @type {unspecified} (type is not relevant in this case)",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "update-modal-path-data-request",
              "description": "Event fired when the micro frontend requests to update the modal path parameters.  Payload: {@link https://github.com/SAP/luigi/blob/main/container/typings/constants/event-payloads.ts|ModalPathDataRequestPayload} @type {ModalPathDataRequestPayload} @example { fromClosestContext: false, fromContext: null, fromParent: true, fromVirtualTreeRoot: false, history: true, link: '/test/route', modal: { title: 'Some modal' }, nodeParams: {} }",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "update-modal-settings-request",
              "description": "Event fired when the micro frontend requests to update the modal settings.  Read more about `updateModalSettings` params [here](https://docs.luigi-project.io/docs/luigi-client-api?section=updatemodalsettings).  Payload: {@link https://github.com/SAP/luigi/blob/main/container/typings/constants/event-payloads.ts|ModalSettingsRequestPayload} @type {ModalSettingsRequestPayload} @example { addHistoryEntry: true, updatedModalSettings: {} }",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "check-path-exists-request",
              "description": "Event fired when the micro frontend requests to check the validity of a path. @type {Object.<string, string>} @example { link: '/test/route' }",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "set-dirty-status-request",
              "description": "Event fired when the micro frontend requests to set the 'dirty status' which, for example, avoids closing when there are any unsaved changes. @type {Object.<string, boolean>} @example { dirty: true }",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "set-viewgroup-data-request",
              "description": "Event fired when the micro frontend requests to set the view group data. @type {Object.<string, unknown>} @example { vg: 'some data' }",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "go-back-request",
              "description": "Event fired when the micro frontend requests to navigate back. @type {Object.<string, unknown>} @example { ctx: 'some context' }",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "add-backdrop-request",
              "description": "Event fired when the micro frontend requests to display the backdrop. @type {unspecified} (type is not relevant in this case)",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "remove-backdrop-request",
              "description": "Event fired when the micro frontend requests to remove the backdrop. @type {unspecified} (type is not relevant in this case)",
              "type": {
                "text": "Event"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LuigiCompoundContainer",
          "declaration": {
            "name": "LuigiCompoundContainer",
            "module": "LuigiCompoundContainer.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "luigi-compound-container",
          "declaration": {
            "name": "LuigiCompoundContainer",
            "module": "LuigiCompoundContainer.js"
          }
        }
      ]
    }
  ]
}